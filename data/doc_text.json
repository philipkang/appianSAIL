[{"doc": "SAIL_Design.md", "content": "---\n layout: basic\n title: SAIL Technology\n type: Concept\n topic: Interfaces\n weight: 10\n ---\n \n ## Overview\n \n Appian SAIL is the patented framework that takes declarative UI definitions to generate dynamic, interactive, and multi-platform user experiences. On this page, you can learn about how SAIL empowers designers to build amazing interfaces quickly, and deploy them everywhere.\n \n ## Background\n \n Before SAIL, simplified UI (User Interface) design was inflexible. Traditional UI development was a bottleneck for most projects. Businesses have unique needs, which often means costly custom software. As business processes change, these interfaces become expensive and time-consuming burdens.\n \n Beyond process and aesthetics, UI design trends evolve over time improving usability and experience. With consumer software raising user expectations, badly designed, custom UIs often cripple adoption of internal IT initiatives.\n \n To make matters worse, mobile devices have became an inextricable part of work life. Technologies change, and new internet browsers and operating systems crop up every year. Keeping up with them becomes impossible, forcing many enterprises to remain years behind technology trends as they struggle to continuously modernize their internal apps or replace them with new custom solutions.\n \n ## Enter SAIL\n \n Rather than try to improve the existing methods of creating UIs, Appian started over from scratch and reimagined what it _should_ be.\n \n ### Easy\n \n Building an interface mock-up should be as easy as just building the interface. With SAIL, Appian designers have a simple, configurable visual tool, where designers can drag and drop the various interface elements onto a visual workspace, and when they\u2019re done the result is a working interface. And designers know it works because, unlike mock-ups, the interface is fully interactive while it\u2019s being designed. It's an experience unlike any other.\n \n ### Portable\n \n Appian interfaces capture the designer\u2019s intent, not their code. SAIL takes that intent and translates it into the various operating systems or browsers for you, meaning the interface you just built is natively mobile.\n \n ### Timeless\n \n The principle of capturing intent makes it easy to update styles over time. What looks good today will look dated in just a couple of years. For example, ten years ago green was a great color for a submit button, but over the years interface trends have given that color a different connotation---it\u2019s the color of the \u201cBUY NOW\u201d button, or the \u201cLEARN MORE\u201d button. When Appian rolled out modern UIs, the primary button color on all interfaces turned to blue at no cost, because the buttons were never configured to be \"green,\" they were declared \"primary.\"\n \n ### Powerful\n \n Modern interfaces are dynamic and interactive. SAIL makes even the most elaborate design or logic possible. SAIL-based interfaces can also leverage existing enterprise services through the platform\u2019s powerful integration capabilities, enabling designers to be able to pull together all the contextual information the user needs to make effective decisions.\n \n Because SAIL was reimagined from scratch, it doesn\u2019t suffer from the limits of traditional technologies. This has lead to some fantastic breakthroughs like [parallel evaluation](Performance_View.md#parallel-evaluation).\n \n ### Beautiful\n \n Designers have all the options of contemporary interface design trends available to them. With SAIL, designers can build professional-grade interfaces in a fraction of the time, and without needing years of specialized training.\n \n ### Affordable\n \n SAIL delivers a UI framework where cost is only a function of changing business needs, not of technical obsolescence.\n"}, {"doc": "SAIL_Components.md", "content": "---\n layout: basic\n title: Interface Components\n type: Reference\n topic: Interfaces\n category: function_category_page\n fnccatparent: SAIL_Component\n fnccatdesc: \"Used to create Appian interfaces.\"\n weight: 101\n ---\n \n \n Interfaces in Appian are made up of components. This page lists all the components and supporting configurations delivered with Appian.\n \n - If you're looking for information about the **PATTERNS** tab of the component palette, see [Interface Patterns](SAIL_Recipes.md).\n - To understand the Interface design, concepts, and functionality available, see [Interface Object](interface_object.md).\n - If you're new to Appian, check out [Academy Online](https://academy.appian.com).\n \n # Layouts\n \n * Billboard Layout - Displays a background color, image, or video with optional overlay content.\n \n * Box Layout - Displays any arrangement of layouts and components within a box on an interface.\n \n * Card Layout - Displays any arrangement of layouts and components within a card on an interface. Can be styled or linked.\n \n * Columns Layout - Displays any number of columns alongside each other. On narrow screens and mobile devices, columns are stacked.\n \n * Form Layout - Displays any arrangement of layouts and components beneath a title and above buttons. Use this as the top-level layout for start and task forms.\n \n * Header Content Layout - Displays any arrangement of layouts and components beneath a card or billboard flush with the edge of the page.\n \n * Section Layout - This layout requires Appian for Mobile Devices version 17.2 or later. Displays any arrangement of layouts and components beneath a section title on an interface.\n \n * Side By Side Layout - Displays components alongside each other.\n \n ## Layout Elements\n * Bar Overlay - Displays a horizontal bar overlay for use in billboard layout.\n \n * Column Layout - Displays a column that can be used within the columns layout.\n \n * Column Overlay - Displays a vertical column overlay for use in billboard layout.\n \n * Full Overlay - Displays an overlay that covers the entire billboard layout.\n \n * Side By Side Item - Displays one item within a side by side layout.\n \n # Inputs\n \n * Barcode - Displays and allows entry of a barcode value using a barcode scanner or manual input.\n \n * Date - Displays and allows entry of a single date (year, month, day). To display a read-only date using a custom format, use a text component.\n \n * Date and Time - Displays and allows entry of a single date and time (year, month, day, hour, minute, second). To display a read-only date and time using a custom format, use a text component.\n \n * Decimal (Floating Point) - Displays and allows entry of a single decimal number, stored with a floating point representation.\n \n * Encrypted Text - Allows entry of a single line of text that is encrypted when saved into a variable. The value remains encrypted while on the server and is only decrypted when displayed in the component.\n \n * File Upload - Allows users to upload one or more files. To upload files outside of a start form or task, use a!submitUploadedFiles() in the saveInto parameter of a submit button or link. Uploaded documents are not accessible until after form submission.\n \n * Integer - Displays and allows entry of a single integer number.\n \n * Paragraph - Displays and allows entry of multiple lines of text.\n \n * Signature - Allows users to capture and save a .png signature file. To upload signatures outside of a start form or task, use a!submitUploadedFiles() in the saveInto parameter of a submit button or link.\n \n * Text - Displays and allows entry of a single line of text.\n \n ## Selection\n \n * Card Choices - Displays a set of cards from which the user may select one or many cards and saves a value based on the selected choice.\n \n * Checkbox By Index - Displays a limited set of choices from which the user may select none, one, or many items and saves the indices of the selected choices.\n \n * Checkbox - Displays a limited set of choices from which the user may select none, one, or many items and saves the values of the selected choices.\n \n * Dropdown By Index - Displays a list of choices for the user to select one item and saves the index of the selected choice.\n \n * Dropdown - Displays a list of choices for the user to select one item and saves a value based on the selected choice.\n \n * Multiple Dropdown By Index - Displays a list of choices for the user to select multiple items and saves the indices of the selected choices.\n \n * Multiple Dropdown - Displays a list of choices for the user to select multiple items and saves values based on the selected choices.\n \n * Radio Button By Index - Displays a limited set of choices from which the user must select one item and saves the index of the selected choice.\n \n * Radio Button - Displays a limited set of choices from which the user must select one item and saves a value based on the selected choice.\n \n ### Card Choices Templates\n * Bars (Text Stacked) Template - Displays a bar card template with an icon and stacked primary text and secondary text. For use in the Card Choice Field cardTemplate parameter.\n \n * Bars Template - Displays a bar card template with an icon, primary text, and secondary text justified on either side of the card. For use in the Card Choice Field cardTemplate parameter.\n \n * Tiles Template - Displays a tile card template with a stacked icon, primary text, and secondary text. For use in the Card Choice Field cardTemplate parameter.\n \n ## Display\n \n * Document Viewer - Displays a document from document management on an interface.\n \n * Gauge - Displays completion percentage in a circular style with optional text.\n \n * Image - Displays an image from document management or the web.\n \n * Milestone - Displays the completed, current, and future steps of a process or sequence.\n \n * Progress Bar - Displays a completion percentage in bar style.\n \n * Rich Text - Displays text in variety of styles, including bold, italics, underline, links, headers, and numbered and bulleted lists.\n \n * Stamp - Displays an icon and/or text on a colored circular background.\n \n * Tag Component - Displays a list of short text labels with colored background to highlight important attributes.\n \n * Tag Item - Displays a short text label with colored background for use with a!tagField.\n \n * Time Display - Displays a single time (hour, minute, second) but cannot take input.\n \n * Video - Creates a Video component.\n \n * Web Content Field - Displays content inline from an external source.\n \n * Web Video - Displays a video from the web for use in a video field.\n \n \n \n ### Gauge Types\n * Gauge Fraction - Displays text in fractional format for use within the gauge field primary text parameter.\n \n * Gauge Icon - Displays an icon for use within the gauge field primary text parameter.\n \n * Gauge Percentage - Displays the configured percentage of the gauge as an integer for use within the gauge field primary text parameter.\n \n ### Image Types\n * Document Image - Displays an image from document management.\n \n * User Image - Displays the profile photo of the user.\n \n * Web Image - Displays an image from the web.\n \n ### Rich Text Types\n * Bulleted List - Displays a bulleted list within a rich text component.\n \n * Header Text - Displays heading-styled text within a rich text component.\n \n * Inline Image - Displays an image within a rich text component.\n \n * List Item - Displays a numbered list within a rich text component.\n \n * Numbered List - Displays a numbered list within a rich text component.\n \n * Styled Icon - Displays a style icon within a rich text component.\n \n * Styled Text - Displays styled text within a rich text component.\n \n ## Action\n \n * Button Array Layout - Displays a list of buttons in the order they are specified. Use this layout for buttons within interfaces rather than for submission buttons at the bottom of forms\n \n * Button Layout - Displays a list of buttons grouped by prominence. Use this layout in cases where prominence needs to be explicitly specified.\n \n * Link - Displays one or more links of any link type, including document links, task links, record view links, external web page links, and dynamic links that update variables.\n \n * Record Actions - Displays a list of record actions with a consistent style. A record action is an end-user action configured within a record type object, such as a related action or record list action.\n \n ### Action Types\n * Record Action Item - Displays a record action defined within a record action field or a read-only grid that uses a record type as the data source. A record action is an end-user action configured within a record type object, such as a related action or a record list action.\n ### Button Types\n * Button - Displays a button that can conditionally be used to submit a form.\n ### Link Types\n \n * Authorization Link - Defines a link to authorize a user for a connected system that uses OAuth 2.0 Authorization Code grant.\n \n * Document Download Link - Defines a link used to download a document.\n \n * Dynamic Link - Defines a link that triggers updates to one or more variables.\n \n * News Entry Link - Defines a link to news entries.\n \n * Process Task Link - Defines a link to a process task.\n \n * Record Link - Defines a link to a record view configured in the record type.\n \n * Report Link - Defines a link to a report.\n \n * Safe Link - Defines a link to an external web page.\n \n * Start Process Link - Defines a link to start a process and navigates the user through any initial chained forms.\n \n * Submit Link - Defines a link to trigger form submission.\n \n * User Record Link - Defines a link to a user record.\n \n ## Grids and Lists\n * Editable Grid - Displays a tabular layout of SAIL components to provide quick inline editing of fields. For an example of how to configure an editable grid, see the Add, Edit, and Remove Data in an Inline Editable Grid SAIL Recipe.\n \n * Event History List - Displays the event history for one or more record types.\n \n * Read-Only Grid - Accepts a set of data and displays it as read-only text, links, images, or rich text in a grid that supports selecting, sorting, and paging.\n \n ### Editable Grid Elements\n * Editable Grid Column Configuration - Defines a column configuration for use in an editable grid (a!gridLayout).\n \n * Editable Grid Header - Defines a column header for use in an editable grid (a!gridLayout).\n \n * Editable Grid Row - Displays a row of components within an editable grid (a!gridLayout).\n \n ### Event History List Elements\n * Event Data - This function determines the event data to display for a single record type in the Event History List component.\n ### Read-Only Grid Elements\n * Read-Only Grid Column - Displays a column of data as read-only text, links, images, or rich text within the read-only grid.\n \n \n ## Charts\n * Area Chart - Displays a series of numerical data as points connected by lines with the area between the line and axis shaded. Use an area chart to visualize trends over time and compare multiple values. If specific values are more important than the trend, consider using a column chart.\n \n * Bar Chart - Displays numerical data as horizontal bars. Use a bar chart to display several values at the same point in time.\n \n * Column Chart - Displays numerical data as vertical bars. Use a column chart to graphically display data that changes over time.\n \n * Line Chart - Displays a series of numerical data as points connected by lines. Use a line chart to visualize trends of data that changes over time.\n \n * Pie Chart - Displays numerical data as slices of a single circle. Use a pie chart to graphically display parts of a whole.\n \n * Scatter Chart - Displays the relationship between two numerical data points. Use a scatter chart to compare multiple values, visualize trends over time, and spot outliers.\n \n \n ### Chart Elements\n * Area Chart Configuration - Contains configuration for how to display data in an area chart.\n \n * Bar Chart Configuration - Contains configuration for how to display data in a bar chart.\n \n * Chart Custom Color Scheme - A custom list of colors to apply to any chart.\n \n * Chart Reference Line - Contains the reference line value for each threshold that is defined on a column, bar, line, or area chart.\n \n * Chart Series - Defines a series of data for a bar, column, line, area, or pie chart. This component is always used within a chart component.\n \n * Column Chart Configuration - Contains configuration for how to display data in a column chart.\n \n * Grouping - Determines the fields to group by in a query or chart that uses a record type as the source. The grouping should incorporate a record field or a related record field, an alias, and an optional interval to group by a date.\n \n * Line Chart Configuration - Contains configuration for how to display data in a line chart.\n \n * Measure - Determines the numerical values to display on a query or chart. The measure should incorporate a record field or a related record field, the appropriate calculation to run on the field, and an alias. If your record type has data sync enabled, you can also apply filters to determine which values are included in the calculation.\n \n * Pie Chart Configuration - Contains configuration for how to display data in a pie chart.\n \n ## Pickers\n * Custom Picker - Displays an autocompleting input for the selection of one or more items from an arbitrary data set. For an example of how to configure the picker, see the Configure an Array Picker SAIL Recipe.\n \n * Document Picker - Displays an autocompleting input for the selection of one or more documents.\n \n * Document and Folder Picker - Displays an autocompleting input for the selection of one or more documents or folders.\n \n * Folder Picker - Displays an autocompleting input for selecting one or more folders.\n \n * Group Picker - Displays an autocompleting input for selecting one or more groups.\n \n * Record Picker - Displays an autocompleting input for the selection of one or more records, filtered by a single record type. Suggestions and picker tokens use the title of the record.\n \n * User Picker - Displays an autocompleting input for the selection of one or more users.\n \n * User and Group Picker - Displays an autocompleting input for selecting one or more users or groups.\n \n \n ## Browsers\n * Document Browser - Displays the contents of a folder and allows users to navigate through a series of folders to find and select a document.\n \n * Document and Folder Browser - Displays the contents of a folder and allows users to navigate through a series of folders to find and select a folder or document.\n \n * Folder Browser - Displays the contents of a folder and allows users to navigate through a series of folders to find and select a folder.\n \n * Group Browser - Displays group membership structure in columns. Users can navigate through the structure and select a single group.\n \n * Hierarchy Browser (Columns) - Displays hierarchical data in the form of drillable columns with selectable cells.\n \n * Hierarchy Browser (Tree) - Displays hierarchical data in the form of drillable tree.\n \n * Org Chart - Displays the organizational structure of users within Appian based on the users\u2019 Supervisor field values.\n \n * User Browser - Displays group membership structure in columns. Users can navigate through the structure and select a single user.\n \n * User and Group Browser - Displays group membership structure in columns. Users can navigate through the structure and select a single user or group.\n \n ## Hierarchy Browser Elements\n * Hierarchy Browser Node (Columns) - Returns a Hierarchy Browser Field Columns Node, used in the Node Configurations parameter of the Columns Browser to determine how items in the hierarchy are displayed.\n \n * Hierarchy Browser Node (Tree) - Returns a Tree Node, used in the Node Configurations parameter of the Tree Browser Component to determine how items in the hierarchy are displayed.\n \n \n \n"}, {"doc": "interface_overview.md", "content": "---\n title: Interfaces Documentation\n layout: basic\n type: Home\n topic: Interfaces\n proxy-topic: totalexperience\n proxy-topic-group: A\n tx-order: 100\n ---\n \n Welcome to Interfaces Documentation!\n \n Everything you need to know about interfaces can be found right here. Use these set of topics to help you build amazing interfaces in Appian.\n \n ## Browsing these topics\n \n The interface topics are organized into four main categories so that you can easily find information based on your goals.\n \n ### Learn\n \n In this category you will find conceptual topics about interfaces and how to think about them in your Appian environment. Don't know what SAIL is? You can read all about it [here](SAIL_Design.md).\n \n ### Build\n \n This category is all about creating interfaces and you'll find how-to's, tutorials, and examples. Be sure to check out [Interface Recipes](SAIL_Recipes.md), which contain a huge number of design patterns and solutions that cover everything from validating inputs to advanced grids.\n \n ### Best practices\n \n You'll find best practices or guidance on building interfaces that are [well-designed](sail/home.md) and [accessible](building_accessible_applications.md) in this category.\n \n ### Reference\n \n Forget how to edit your Interface properties? You can look up detailed information or questions about the [Interface object](interface_object.md) or [components](SAIL_Components.md) in this category.\n \n"}, {"doc": "Document_and_Folder_Picker_Component.md", "content": "---\n layout: function\n title: Document and Folder Picker Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for the selection of one or more documents\n   or folders.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldDocumentsAndFolders\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n \n     '\n - keyword: folderFilter\n   name: Folder Filter\n   types: Folder\n   description: 'When present, only documents and folders that are inside this folder\n     and its subfolders are suggested.\n \n     '\n - keyword: value\n   name: Display Value\n   types: List of Document or Folder\n   description: Array of currently selected documents and folders.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected documents\n     and folders when the user selects or removes a document or folder. Use a!save()\n     to save a modified or alternative value to a variable.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Document and Folder Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldDocumentsAndFolders \n  function syntax: a!pickerFieldDocumentsAndFolders (label,labelPosition,instructions,required,requiredMessage,readOnly,disabled,maxSelections,folderFilter,value,validations,validationGroup,saveInto,placeholder,helpTooltip,accessibilityText,showWhen)\n \n Displays an autocompleting input for the selection of one or more documents or folders.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\\n\"}, {\"keyword\": \"folderFilter\", \"name\": \"Folder Filter\", \"types\": \"Folder\", \"description\": \"When present, only documents and folders that are inside this folder and its subfolders are suggested.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Document or Folder\", \"description\": \"Array of currently selected documents and folders.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected documents and folders when the user selects or removes a document or folder. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Saving and displaying values and placeholders\n \n - The component always saves an array regardless of how many selections have been made.\n - Any nulls in the array passed to selected documents or folders are not displayed.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Filtering and permissions\n \n - When the filter folder is used, the filtering folder itself is never suggested. \n - The user viewing the picker must have access to view documents and folders passed to the value. Only documents and folders that the viewing user has permissions to see appear in the suggestions list. When *folderFilter* is not null, the viewing user must have permission to view the filtering folder for any suggestions to be made."}, {"doc": "Grid_Header_Component.md", "content": "---\n layout: function\n title: Editable Grid Header Component\n category: function_page\n compatibility: -crf\n excerpt: Defines a column header for use in an editable grid (a!gridLayout).\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gridLayoutHeaderCell\n fncsubcat: Grids and Lists\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the column header.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip.\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines the header label''s alignment. Valid values: `\"LEFT\"`,\n     `\"CENTER\"`, `\"RIGHT\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the header cell is displayed in the grid. When\n     set to false, the header cell is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Editable Grid Header\n scsubcat: Editable_Grid_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gridLayoutHeaderCell \n  function syntax: a!gridLayoutHeaderCell (label,helpTooltip,align,showWhen)\n \n Defines a column header for use in an [Editable Grid](Editable_Grid_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the column header.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip.\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines the header label's alignment. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the header cell is displayed in the grid. When set to false, the header cell is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Grid header with a label\n \n *This example needs to be used with the `a!gridLayout()` function for it to display anything. Examples that you can see in action are available in the Grid Layout component section.*\n \n ```sail \n a!gridLayoutHeaderCell(\n   label: \"Total\",\n   align: \"RIGHT\"\n )\n ```"}, {"doc": "List_Item_Component.md", "content": "---\n layout: function\n title: List Item\n category: function_page\n compatibility: -crf\n excerpt: Displays a numbered list within a rich text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextListItem\n fncsubcat: Display\n parameters:\n - keyword: text\n   name: Text\n   types: Text or Styled Text\n   description: 'Array of text to display as a rich text list item. Text can be formatted\n     using `a!richTextItem()`.\n \n     '\n - keyword: nestedList\n   name: Nested List\n   types: Bulleted List or Numbered List\n   description: 'A bulleted or numbered list to nest within the rich text list item.\n     Use `a!richTextBulletedList()` or `a!richTextNumberedList()`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: List Item\n scsubcat: Rich_Text_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextListItem \n  function syntax: a!richTextListItem (text,nestedList,showWhen)\n \n Displays a nested list within a bulleted or numbered list in a [Rich Text](Rich_Text_Component.md) component.\n \n **See also**: [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"text\", \"name\": \"Text\", \"types\": \"Text or Styled Text\", \"description\": \"Array of text to display as a rich text list item. Text can be formatted using `a!richTextItem()`.\\n\"}, {\"keyword\": \"nestedList\", \"name\": \"Nested List\", \"types\": \"Bulleted List or Numbered List\", \"description\": \"A bulleted or numbered list to nest within the rich text list item. Use `a!richTextBulletedList()` or `a!richTextNumberedList()`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the text and nestedList parameters\n \n - If *text* is null or contains an empty array, no text is displayed for the list item.\n - If *nestedList* is null, no nested list is displayed within the parent list.\n - A nested list doesn't need to be the same type of list as its parent list. Bulleted lists can be nested within numbered lists and vice versa.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 750 %}\n a!richTextDisplayField(\n   labelPosition: \"COLLAPSED\",\n   value: {\n     a!richTextBulletedList(\n       items: {\n         \"a\",\n         a!richTextListItem(\n           text: \"b\",\n           nestedList: a!richTextBulletedList(\n             items: {\n               \"c\",\n               a!richTextListItem(\n                 text: \"d\",\n                 nestedList: a!richTextBulletedList(\n                   items: {\n                     a!richTextListItem(\n                       text: \"e\",\n                       nestedList: a!richTextBulletedList(\n                         items: {\n                           \"f\",\n                           \"g\"\n                         }\n                       )\n                     )\n                   }\n                 )\n               )\n             }\n           )\n         ),\n         \"h\",\n         a!richTextListItem(\n           text: \"i\",\n           nestedList: a!richTextBulletedList(\n             items: {\n               \"j\",\n               \"k\"\n             }\n           )\n         )\n       }\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "card-choices-bars.md", "content": "---\n layout: function\n title: Bars Template\n category: function_page\n compatibility: -crf\n excerpt: 'Displays a bar card template with an icon, primary text, and secondary text\n   justified on either side of the card. For use in the [Card Choice Field](card-choices-component.md)\n   *cardTemplate* parameter.\n \n   '\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!cardTemplateBarTextJustified\n fncsubcat: Selection\n parameters:\n - keyword: id\n   name: Id\n   types: Any Type\n   description: 'Value that identifies the card.\n \n     '\n - keyword: primaryText\n   name: Primary Text\n   types: Text\n   description: 'Optional text to display on the first line inside the card.\n \n     '\n - keyword: secondaryText\n   name: Secondary Text\n   types: Text\n   description: 'Optional text to display beneath the primary text inside the card.\n \n     '\n - keyword: icon\n   name: Icon\n   types: Text\n   description: 'Icon to display inside the card.\n \n     '\n - keyword: iconColor\n   name: Icon Color\n   types: Text\n   description: 'Determines the icon color. Valid values: Any hex color or `\"ACCENT\"`\n     (default), `\"STANDARD\"`, `\"SECONDARY\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`.\n \n     '\n - keyword: iconAltText\n   name: Icon Alternative Text\n   types: Text\n   description: 'Equivalent alternate text for use by screen readers.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: 'Text to display on mouseover (web) or tap (mobile).\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the card is displayed in the set of card choices.\n     When set to false, the card is hidden. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Bars Template\n scsubcat: Card_Choices_Templates\n space: sail_component\n ---\n \n ## Function\n \n function name: a!cardTemplateBarTextJustified \n  function syntax: a!cardTemplateBarTextJustified (id,primaryText,secondaryText,icon,iconColor,iconAltText,tooltip,showWhen)\n \n Displays a bar card template with an icon, primary text, and secondary text justified on either side of the card. For use in the [Card Choice Field](card-choices-component.md) *cardTemplate* parameter.\n \n \n ## Parameters\n \n [{\"keyword\": \"id\", \"name\": \"Id\", \"types\": \"Any Type\", \"description\": \"Value that identifies the card.\\n\"}, {\"keyword\": \"primaryText\", \"name\": \"Primary Text\", \"types\": \"Text\", \"description\": \"Optional text to display on the first line inside the card.\\n\"}, {\"keyword\": \"secondaryText\", \"name\": \"Secondary Text\", \"types\": \"Text\", \"description\": \"Optional text to display beneath the primary text inside the card.\\n\"}, {\"keyword\": \"icon\", \"name\": \"Icon\", \"types\": \"Text\", \"description\": \"Icon to display inside the card.\\n\"}, {\"keyword\": \"iconColor\", \"name\": \"Icon Color\", \"types\": \"Text\", \"description\": \"Determines the icon color. Valid values: Any hex color or `\\\"ACCENT\\\"` (default), `\\\"STANDARD\\\"`, `\\\"SECONDARY\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`.\\n\"}, {\"keyword\": \"iconAltText\", \"name\": \"Icon Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text for use by screen readers.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display on mouseover (web) or tap (mobile).\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the card is displayed in the set of card choices. When set to false, the card is hidden. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Text truncation\n \n - Spacing and truncation look different in the bars template. To ensure that all your text has enough space to show properly, keep your secondary text short when using this template.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 580 %} \n a!localVariables(\n   local!save, \n   {\n     a!cardChoiceField(\n       label: \"When do you need your package?\",\n       labelPosition: \"ABOVE\",\n       instructions: \"Shipping times may vary depending of the time of year\",\n       data: {\n         a!map(id: 1,primaryText: \"Tomorrow\", secondaryText: \"+ $25\" ),\n         a!map(id: 2,primaryText: \"2-4 Days\", secondaryText: \"+ $15\"),\n         a!map(id: 3,primaryText: \"5-7 Days\", secondaryText: \"+ $8.50\"),\n         a!map(id: 4, primaryText: \"7+ Days\", secondaryText: \"Free\")\n \n       },\n       sort: {\n         a!sortInfo(\n           field: \"id\",\n           ascending: true\n         )\n       },\n       cardTemplate: a!cardTemplateBarTextJustified(\n         id: fv!data.id,\n         primaryText: fv!data.primaryText,\n         secondaryText: fv!data.secondaryText\n       ),\n       value: local!save,\n       saveInto: local!save,\n       maxSelections: 1\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Process_Task_Link_Component.md", "content": "---\n layout: function\n title: Process Task Link Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Defines a link to a process task.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!processTaskLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text displayed as the link name the user clicks on.\n - keyword: task\n   name: Task\n   types: Task\n   description: ID of the process task to use as the address of the link.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: openLinkIn\n   name: Open Link In\n   types: Text\n   description: '(Browser-Only) Determines where the linked content should open. Valid\n     values: `\"SAME_TAB\"` (default), `\"NEW_TAB\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Process Task Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!processTaskLink \n  function syntax: a!processTaskLink (label,task,showWhen,openLinkIn)\n \n Defines a link to a process task. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [Task](Appian_Data_Types.md#task)\n - [Link](Link_Component.md)\n - [Read-Only Grid](Paging_Grid_Component.md)\n - [Images](Image_Component.md)\n - [Execute Process Report Smart Service](Execute_Process_Report_Smart_Service.md)\n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text displayed as the link name the user clicks on.\"}, {\"keyword\": \"task\", \"name\": \"Task\", \"types\": \"Task\", \"description\": \"ID of the process task to use as the address of the link.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"openLinkIn\", \"name\": \"Open Link In\", \"types\": \"Text\", \"description\": \"(Browser-Only) Determines where the linked content should open. Valid values: `\\\"SAME_TAB\\\"` (default), `\\\"NEW_TAB\\\"`.\\n\"}]\n \n ## Usage considerations  \n \n ### Retrieving task IDs\n \n - To retrieve task IDs, use the Execute Process Report Smart Service and pull from the column that returns the list of IDs.\n \n ### Using process tasks links with other components\n \n - To display a single link or array of links, use the process task link inside of the [link field component](Link_Component.md).\n - To display a link in a grid, use the process task link inside of a [grid text column](Grid_Text_Column_Component.md).\n - To add a link to an image, use the process task link inside of a [document image](Document_Image_Component.md) or [web image](Web_Image_Component.md).\n - To add a link to a chart series, use the process task link inside of the [chart series component](Chart_Series_Component.md).\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Basic process task link\n \n ```sail \n a!processTaskLink(\n   label: \"Approval Task\",\n   task: 1\n )\n ```"}, {"doc": "Grouping_Component.md", "content": "---\n layout: function\n title: Grouping Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Determines the fields to group by in a query or chart that uses a record\n   type as the source. The grouping should incorporate a record field or a related\n   record field, an alias, and an optional interval to group by a date.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!grouping\n fncsubcat: Charts\n parameters:\n - keyword: field\n   name: Field\n   types: Any Type\n   description: 'The record field or related record field to group by. Use the `recordType!`\n     domain to reference the field. For example, `recordType!Case.fields.status`.\n \n     '\n - keyword: interval\n   name: Interval\n   types: Text\n   description: 'The date or time interval to group by. This parameter can only be\n     used when the field is of type Date, Date and Time, or Time. Valid values: `\"AUTO\"`\n     (default), `\"YEAR\"`, `\"MONTH_OF_YEAR\"`, `\"MONTH_OF_YEAR_SHORT_TEXT\"`, `\"MONTH_OF_YEAR_TEXT\"`,\n     `\"MONTH_TEXT\"`, `\"MONTH_SHORT_TEXT\"`, `\"MONTH_DATE\"`, `\"DATE\"`, `\"DATE_SHORT_TEXT\"`,\n     `\"DATE_TEXT\"`, `\"DAY_OF_MONTH\"`, `\"HOUR_OF_DAY\"`, `\"HOUR\"`, `\"MINUTE_OF_HOUR\"`,\n     `\"MINUTE\"`.\n \n     '\n - keyword: alias\n   name: Alias\n   types: Text\n   description: 'The short name by which the result of the grouping field can be referenced\n     in other places in the chart configuration or `a!queryRecordType()`.\n \n     '\n - keyword: formatValue\n   name: Format Value\n   types: Any Type\n   description: 'Display value for the given grouping value. Only applies when the\n     grouping is used in a chart. This parameter is evaluated once for each value returned.\n     You can reference the unformatted result from the data source using `fv!value`.\n     This display value does not affect the values used in calculations for the chart;\n     it is only used for display.\n \n     '\n reftype: sailcomponent\n scdisplayname: Grouping\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n {{ page.fncsyntax }}\n \n Determines the fields to group by in a query or chart that uses a record type as the source. The grouping should incorporate a record field or a related record field, an alias, and an optional interval to group by a date.\n \n This configuration is used when a record type is defined as the data source for a chart or when using `a!queryRecordType()`. This function can be used as a primary grouping or secondary grouping in a [bar](Bar_Chart_Component.md), [column](Column_Chart_Component.md), [line](Line_Chart_Component.md), or [pie chart](Pie_Chart_Component.md) or to define the fields in a query using [a!aggregationFields()](fnc_scripting_a_aggregationfields.md).\n \n **See also**:\n \n - [Chart Configuration Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"field\", \"name\": \"Field\", \"types\": \"Any Type\", \"description\": \"The record field or related record field to group by. Use the `recordType!` domain to reference the field. For example, `recordType!Case.fields.status`.\\n\"}, {\"keyword\": \"interval\", \"name\": \"Interval\", \"types\": \"Text\", \"description\": \"The date or time interval to group by. This parameter can only be used when the field is of type Date, Date and Time, or Time. Valid values: `\\\"AUTO\\\"` (default), `\\\"YEAR\\\"`, `\\\"MONTH_OF_YEAR\\\"`, `\\\"MONTH_OF_YEAR_SHORT_TEXT\\\"`, `\\\"MONTH_OF_YEAR_TEXT\\\"`, `\\\"MONTH_TEXT\\\"`, `\\\"MONTH_SHORT_TEXT\\\"`, `\\\"MONTH_DATE\\\"`, `\\\"DATE\\\"`, `\\\"DATE_SHORT_TEXT\\\"`, `\\\"DATE_TEXT\\\"`, `\\\"DAY_OF_MONTH\\\"`, `\\\"HOUR_OF_DAY\\\"`, `\\\"HOUR\\\"`, `\\\"MINUTE_OF_HOUR\\\"`, `\\\"MINUTE\\\"`.\\n\"}, {\"keyword\": \"alias\", \"name\": \"Alias\", \"types\": \"Text\", \"description\": \"The short name by which the result of the grouping field can be referenced in other places in the chart configuration or `a!queryRecordType()`.\\n\"}, {\"keyword\": \"formatValue\", \"name\": \"Format Value\", \"types\": \"Any Type\", \"description\": \"Display value for the given grouping value. Only applies when the grouping is used in a chart. This parameter is evaluated once for each value returned. You can reference the unformatted result from the data source using `fv!value`. This display value does not affect the values used in calculations for the chart; it is only used for display.\\n\"}]\n \n ## Usage considerations\n \n ### Interval\n \n The `interval` determines how to group data for fields of type Date, Date and Time, or Time. Each interval can combine data from multiple dates for easy reporting. For example, suppose you have three records with the following values for the `startDate` field: `March 17, 2021`; `March 28, 2021`, and `April 3, 2021`. If you use the `MONTH_TEXT` interval, it will group the data together and return the values as `March 2021` and `April 2021`. \n \n In addition to grouping the data, the interval can also provide localized date formats in some cases. For example, the `MONTH_OF_YEAR` interval returns the month number, a value 1-12. The `MONTH_OF_YEAR_TEXT` interval also groups the data by month, but it returns the text value of the month, such as `January`. The value returned for the interval will vary based on the locale of the user who runs the query. If you need to ensure the value is the same across all locales (for example, to use the result in a filter), use one of the intervals that does not contain the word `TEXT`.\n \n By default, the `AUTO` interval is selected. This interval does not perform any additional grouping, so the original value will be returned.\n \n See the table below for the results using each interval:\n \n | Grouping Interval | Valid Data Types | Return Type| Localized? | Sample Value | Sample Result |\n | - | - | - | - | - | - |\n | `AUTO`      | Any Type | Any Type | No | 10/17/2021 3:45:12 PM | 10/17/2021 3:45:12 PM |\n | `YEAR`      | Date and Time; Date | Integer | No | 10/17/2021 | 2021 |\n | `MONTH_OF_YEAR`      | Date and Time; Date | Integer | No | 10/17/2021 | 10 |\n | `MONTH_OF_YEAR_SHORT_TEXT`      | Date and Time; Date | Text | Yes | 10/17/2021 | Oct |\n | `MONTH_OF_YEAR_TEXT`      | Date and Time; Date | Text | Yes | 10/17/2021 | October |\n | `MONTH_DATE`      | Date and Time; Date | Integer | No | 10/17/2021 | 10/1/2021 |\n | `MONTH_SHORT_TEXT`      | Date and Time; Date | Text | Yes | 10/17/2021 | Oct 2021 |\n | `MONTH_TEXT`      | Date and Time; Date | Text | Yes | 10/17/2021 | October 2021 |\n | `DATE`      | Date and Time; Date | Date | No | 10/17/2021 3:45 PM| 10/17/2021 |\n | `DATE_SHORT_TEXT`      | Date and Time; Date | Text | Yes | 10/17/2021 3:45 PM| Oct 17, 2021 |\n | `DATE_TEXT`      | Date and Time; Date | Text | Yes | 10/17/2021 3:45 PM| October 17, 2021 |\n | `DAY_OF_MONTH`      | Date and Time; Date | Integer | No | 10/17/2021 3:45 PM| 17 |\n | `HOUR_OF_DAY`      | Date and Time; Time | Integer | No | 10/17/2021 3:45 PM| 15 |\n | `HOUR`      | Date and Time | Date and Time | No | 10/17/2021 3:45 PM| 10/17/2021 3:00 PM |\n | `MINUTE_OF_HOUR`      | Date and Time; Time | Integer | No | 10/17/2021 3:45:12 PM| 45 |\n | `MINUTE`      | Date and Time | Date and Time | No | 10/17/2021 3:45:12 PM| 10/17/2021 3:45:00 PM |\n \n ### Using the field and alias parameters\n \n - The *field* is a required parameter. It must reference a record field or a [related record field](record-type-relationships.md) from the record type specified in the query or chart.\n - When using `a!grouping` in a query, an alias is required.\n - If an alias is provided, it must be used as the field in the *sort* parameter within the parent configuration function. \n \n ### Formatting values\n \n - When using `formatValue`, the expression provided will execute for each unique value returned for the grouping. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#using-format-values) for more information on how to set up the format value.\n \n ### Grouping in charts\n - If you use a bar, column, or line chart, you can display a Primary and Secondary Grouping if there is only one Measure provided. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#configure-chart-groupings) for more information on how to add groupings to charts.\n - When the [*interval*](#interval) parameter is set to any value other than `\"AUTO\"`, you can show time intervals with no data on the axis of your [bar](Bar_Chart_Config_Component.md), [column](Column_Chart_Config_Component.md), and [line](Line_Chart_Config_Component.md) charts using the *showIntervalsWithNoData* parameter."}, {"doc": "Grid_Image_Column_Component.md", "content": "---\n layout: function\n title: Paging Grid Image Column Component [Deprecated]\n category: function_page\n compatibility: -crf\n depver: 19.2\n evolved_fncname: a!gridColumn\n evolved_reason: Now supports multiple interface components.\n fnccat: \u4e00Deprecated\u4e00\n fncname: a!gridImageColumn\n reftype: sailcomponent\n scdisplayname: Paging Grid Image Column\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Name to display for the column heading.\n - keyword: field\n   name: Field\n   types: Text\n   description: Name of the field that populates the column. Stored into Paging and\n     Selection Value when the user clicks on the column label. A sort indicator displays\n     on the column when its Field argument matches pagingInfo.sort[1].field.\n - keyword: data\n   name: Data\n   types: Array of Images\n   description: Array of images values to display in the column. Create images with\n     [a!documentImage()](Document_Image_Component.md), [a!userImage()](User_Image_Component.md),\n     [a!webImage()](Web_Image_Component.md).\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the reference line is hidden and is not evaluated. Default: true.'\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines how the images are sized. Valid values: `\"ICON\"` (default),\n     `\"TINY\"`, `\"GALLERY\"`, `\"SMALL\"`, `\"MEDIUM\"`, and `\"LARGE\"`.'\n - keyword: isThumbnail\n   name: Is Thumbnail\n   types: Boolean\n   description: 'Determines whether the images can be viewed at a larger size when\n     clicked. Multiple images will be visible in a slideshow. Default: false.'\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Determines how the images are rendered. Valid values: `\"STANDARD\"\n     (default)` or `\"AVATAR\"`.'\n ---\n \n The grid image column component has been deprecated, and will be removed in a future release of Appian. Instead, use a grid column. For information about the grid image column, see the [Appian 19.4 documentation](https://docs.appian.com/suite/help/19.4/Grid_Image_Column_Component.html)."}, {"doc": "Box_Layout.md", "content": "---\n layout: function\n title: Box Layout\n category: function_page\n compatibility: -crf\n excerpt: Displays any arrangement of layouts and components within a box on an interface.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!boxLayout\n fncsubcat: Layouts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: 'Text to display as the box''s title.\n \n     '\n - keyword: contents\n   name: Contents\n   types: Any Type\n   description: Components and layouts to display within the box.\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Determines the color of the label and box outline. Valid values: Any\n     valid hex color or `\"STANDARD\"` (default), `\"ACCENT\"`, `\"SUCCESS\"`, `\"INFO\"`,\n     `\"WARN\"`, `\"ERROR\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: isCollapsible\n   name: Collapsible\n   types: Boolean\n   description: 'Determines if an expand/collapse control appears in the box header.\n     Default: false.\n \n     '\n - keyword: isInitiallyCollapsed\n   name: Initially Collapsed\n   types: Boolean\n   description: 'Determines if the box is collapsed when the interface first loads.\n     Default: false.\n \n     '\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: padding\n   name: Padding\n   types: Text\n   description: 'Determines the space between the box edges and its contents. Valid\n     values: `\"NONE\"`, `\"EVEN_LESS\"`, `\"LESS\"` (default), `\"STANDARD\"`, `\"MORE\"`, `\"EVEN_MORE\"`.\n \n     '\n - keyword: shape\n   name: Shape\n   types: Text\n   description: 'Determines the box shape. Valid values: `\"SQUARED\"` (default), `\"SEMI_ROUNDED\"`,\n     `\"ROUNDED\"`.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: showBorder\n   name: Show border\n   types: Boolean\n   description: 'Determines whether the layout has an outer border. Default: true.\n \n     '\n - keyword: showShadow\n   name: Show shadow\n   types: Boolean\n   description: 'Determines whether the layout has an outer shadow. Default: false.\n \n     '\n - keyword: labelSize\n   name: Label Size\n   types: Text\n   description: 'Determines the label size. Valid values: \"LARGE_PLUS\", \"LARGE\", \"MEDIUM_PLUS\",\n     \"MEDIUM\", \"SMALL\", \"EXTRA_SMALL\" (default).\n \n     '\n - keyword: labelHeadingTag\n   name: Accessibility Heading Tag\n   types: Text\n   description: 'Determines the heading tag associated with the label for use by screen\n     readers; produces no visible change. Valid values: \"H1\", \"H2\", \"H3\", \"H4\", \"H5\",\n     \"H6\". The default is dependent on the chosen label size. See [accessibility design\n     guidance](sail/ux-accessibility.md#use-accessible-headers) for more details to\n     associate the proper heading tag with the box label to follow accessibility standards.\n \n     '\n reftype: sailcomponent\n scdisplayname: Box Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!boxLayout \n  function syntax: a!boxLayout (label,contents,style,showWhen,isCollapsible,isInitiallyCollapsed,marginBelow,accessibilityText,padding,shape,marginAbove,showBorder,showShadow,labelSize,labelHeadingTag)\n \n Displays any arrangement of layouts and components within a box on an interface.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the box's title.\\n\"}, {\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type\", \"description\": \"Components and layouts to display within the box.\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines the color of the label and box outline. Valid values: Any valid hex color or `\\\"STANDARD\\\"` (default), `\\\"ACCENT\\\"`, `\\\"SUCCESS\\\"`, `\\\"INFO\\\"`, `\\\"WARN\\\"`, `\\\"ERROR\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"isCollapsible\", \"name\": \"Collapsible\", \"types\": \"Boolean\", \"description\": \"Determines if an expand/collapse control appears in the box header. Default: false.\\n\"}, {\"keyword\": \"isInitiallyCollapsed\", \"name\": \"Initially Collapsed\", \"types\": \"Boolean\", \"description\": \"Determines if the box is collapsed when the interface first loads. Default: false.\\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"padding\", \"name\": \"Padding\", \"types\": \"Text\", \"description\": \"Determines the space between the box edges and its contents. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"` (default), `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}, {\"keyword\": \"shape\", \"name\": \"Shape\", \"types\": \"Text\", \"description\": \"Determines the box shape. Valid values: `\\\"SQUARED\\\"` (default), `\\\"SEMI_ROUNDED\\\"`, `\\\"ROUNDED\\\"`.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"showBorder\", \"name\": \"Show border\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout has an outer border. Default: true.\\n\"}, {\"keyword\": \"showShadow\", \"name\": \"Show shadow\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout has an outer shadow. Default: false.\\n\"}, {\"keyword\": \"labelSize\", \"name\": \"Label Size\", \"types\": \"Text\", \"description\": \"Determines the label size. Valid values: \\\"LARGE_PLUS\\\", \\\"LARGE\\\", \\\"MEDIUM_PLUS\\\", \\\"MEDIUM\\\", \\\"SMALL\\\", \\\"EXTRA_SMALL\\\" (default).\\n\"}, {\"keyword\": \"labelHeadingTag\", \"name\": \"Accessibility Heading Tag\", \"types\": \"Text\", \"description\": \"Determines the heading tag associated with the label for use by screen readers; produces no visible change. Valid values: \\\"H1\\\", \\\"H2\\\", \\\"H3\\\", \\\"H4\\\", \\\"H5\\\", \\\"H6\\\". The default is dependent on the chosen label size. See [accessibility design guidance](sail/ux-accessibility.md#use-accessible-headers) for more details to associate the proper heading tag with the box label to follow accessibility standards.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Box layout with success style\n \n This example uses a box layout with the \"SUCCESS\" style. It displays the following interface.\n \n ![screenshot of a box layout with green success styling and a confirmation message](images/success_box_layout_example.png){:.screenshot}\n \n ```sail\n a!boxLayout(\n   label: \"Success! Your order was successfully processed\",\n   style: \"SUCCESS\",\n   marginBelow: \"STANDARD\",\n   contents: {\n     a!textField(\n       labelPosition: \"COLLAPSED\",\n       value: \"Your credit card has been charged.\",\n       readOnly: true\n     )\n   }\n )\n ```\n \n ### Collapsible box layout with custom style\n \n This example uses a collapsible box layout with a custom style for the header color. It displays the following interface.\n \n ![screenshot of a box layout with burgundy styling and a list of students](images/box_layout_example_custom.gif){:.screenshot}\n \n ```sail\n a!boxLayout(\n     label: \"Enrolled Students\",\n     style: \"#98002E\",\n     marginBelow: \"STANDARD\",\n     isCollapsible: true,\n     contents: {\n       a!richTextDisplayField(\n         labelPosition: \"COLLAPSED\",\n         value: a!richTextBulletedList(\n           items: {\n             \"Elizabeth Ward\",\n             \"Fatima Cooper\",\n             \"Jaylen Smith\",\n             \"Michael Johnson\",\n             \"Jade Rao\",\n           }\n         )\n       )\n     }\n   )\n ```\n \n ### Box layout with label size and shadow\n \n This example uses a box layout with a \"MEDIUM\" label size. It displays the following interface.\n \n ![screenshot of a box layout with custom styling and medium label size](images/box_layout_current_classes.png){:.screenshot style=\"width:60%\"}\n \n Because the header content layout uses a transparent background, we are using a shadow instead of a border. See the [box layout design guidance](sail/ux-box-layout.md#when-to-use-borders-and-shadows) for more information on using borders and shadows.\n \n ```sail\n a!localVariables(\n   local!currentClasses: {\n     a!map(courseNum: \"JPN 202\", title: \"Intermediate Japanese II\", students: 14),\n     a!map(courseNum: \"JPN 270\", title: \"Intro to Japanese Culture\", students: 8),\n     a!map(courseNum: \"JPN 360\", title: \"Japanese Modern Women Writers\", students: 5)\n   },\n   a!headerContentLayout(\n     contents: a!boxLayout(\n       label: \"Current Classes\",\n       labelSize: \"MEDIUM\",\n       contents: {\n         a!forEach(\n           items: local!currentClasses,\n           expression: a!sideBySideLayout(\n             items: {\n               a!sideBySideItem(\n                 item: a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     fv!item.courseNum,\n                     \"   \",\n                     a!richTextItem(\n                       text: {fv!item.title},\n                       link: a!dynamicLink(),\n                       linkStyle: \"STANDALONE\",\n                       color: \"#1a73e7\"\n                     )\n                   }\n                 ),\n                 width: \"AUTO\"\n               ),\n               a!sideBySideItem(\n                 item: a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     fv!item.students,\n                     \" \",\n                     a!richTextIcon(icon: \"users\")\n                   }\n                 ),\n                 width: \"MINIMIZE\"\n               )\n             }\n           )\n         )\n       },\n       style: \"#1a73e7\",\n       marginBelow: \"STANDARD\",\n       showBorder: false,\n       showShadow: true\n     ),\n     backgroundColor: \"TRANSPARENT\"\n   )\n )\n ```\n \n ### Rounded box layouts\n \n This example uses a box layout with a rounded shape. It displays the following interface.\n \n ![screenshot of a student dashboard with multiple rounded box layouts](images/rounded_boxes.png){:.screenshot}\n \n ``` sail\n a!columnsLayout(\n   columns: {\n     a!columnLayout(\n       contents: {\n         a!boxLayout(\n           label: \"Current Courses\",\n           contents: {\n             a!sideBySideLayout(\n               items: {\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: {\n                           \"CRW470\"\n                         },\n                         size: \"STANDARD\"\n                       )\n                     }\n                   ),\n                   width: \"MINIMIZE\"\n                 ),\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       \"Advanced Fiction Workshop\"\n                     }\n                   )\n                 )\n               }\n             ),\n             a!sideBySideLayout(\n               items: {\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: {\n                           \"ENG463\"\n                         },\n                         size: \"STANDARD\"\n                       )\n                     }\n                   ),\n                   width: \"MINIMIZE\"\n                 ),\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       \"Literature on the Move: Stories of Migration\"\n                     }\n                   )\n                 )\n               }\n             ),\n             a!sideBySideLayout(\n               items: {\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: {\n                           \"ENG327\"\n                         },\n                         size: \"STANDARD\"\n                       )\n                     }\n                   ),\n                   width: \"MINIMIZE\"\n                 ),\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       \"The Next Great American Graphic Novel\"\n                     }\n                   )\n                 )\n               }\n             ) \n           },\n           style: \"#363535\",\n           shape: \"ROUNDED\",\n           marginBelow: \"STANDARD\"\n         )\n       }\n     ), \n     a!columnLayout(\n       contents: {\n         a!boxLayout(\n           label: \"Past Courses\",\n           contents: {\n             a!sideBySideLayout(\n               items: {\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: {\n                           \"CRW370\"\n                         },\n                         size: \"STANDARD\"\n                       )\n                     }\n                   ),\n                   width: \"MINIMIZE\"\n                 ),\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       \"Intermediate Fiction Workshop\"\n                     }\n                   )\n                 )\n               }\n             ),\n             a!sideBySideLayout(\n               items: {\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: {\n                           \"ENG222\"\n                         },\n                         size: \"STANDARD\"\n                       )\n                     }\n                   ),\n                   width: \"MINIMIZE\"\n                 ),\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       \"Literature of Regency England: Jane Austen \"\n                     }\n                   )\n                 )\n               }\n             ),\n             a!sideBySideLayout(\n               items: {\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: {\n                           \"ENG301\"\n                         },\n                         size: \"STANDARD\"\n                       )\n                     }\n                   ),\n                   width: \"MINIMIZE\"\n                 ),\n                 a!sideBySideItem(\n                   item: a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       \"How to Study Literature\"\n                     }\n                   )\n                 )\n               }\n             )\n           },\n           style: \"#363535\",\n           shape: \"ROUNDED\",\n           marginBelow: \"STANDARD\"\n         )\n       }\n     )\n   }\n )\n ```"}, {"doc": "Side_By_Side_Item.md", "content": "---\n layout: function\n title: Side By Side Item\n category: function_page\n compatibility: -crf\n excerpt: Displays one item within a side by side layout.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!sideBySideItem\n fncsubcat: Layouts\n parameters:\n - keyword: item\n   name: Item\n   types: Any Type\n   description: 'The component to display inside the layout.\n \n     '\n - keyword: width\n   name: Width\n   types: Text\n   description: 'Determines the amount of space allocated to each of the items in the\n     row. Valid values: `\"AUTO\"` (default), `\"MINIMIZE\"`, `\"1X\"`, `\"2X\"`, `\"3X\"`, `\"4X\"`,\n     `\"5X\"`, `\"6X\"`, `\"7X\"`, `\"8X\"`, `\"9X\"`, and `\"10X\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component or layout is displayed on the interface.\n     When set to false, the component or layout is hidden and is not evaluated. Default:\n     true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Side By Side Item\n scsubcat: Layout_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!sideBySideItem \n  function syntax: a!sideBySideItem (item,width,showWhen)\n \n Displays one item within a side by side layout.\n \n **See also**:\n \n - [Side By Side Layout](Side_By_Side_Layout.md)\n - [Side By Side and Columns design guidance](sail/ux-columns-and-side-by-side.md)\n - [Side By Side design guidance](sail/ux-side-by-side-layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"item\", \"name\": \"Item\", \"types\": \"Any Type\", \"description\": \"The component to display inside the layout.\\n\"}, {\"keyword\": \"width\", \"name\": \"Width\", \"types\": \"Text\", \"description\": \"Determines the amount of space allocated to each of the items in the row. Valid values: `\\\"AUTO\\\"` (default), `\\\"MINIMIZE\\\"`, `\\\"1X\\\"`, `\\\"2X\\\"`, `\\\"3X\\\"`, `\\\"4X\\\"`, `\\\"5X\\\"`, `\\\"6X\\\"`, `\\\"7X\\\"`, `\\\"8X\\\"`, `\\\"9X\\\"`, and `\\\"10X\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component or layout is displayed on the interface. When set to false, the component or layout is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Accepted widths and fields\n \n - Most fields are allowed for *Item*, except for grids, hierarchy browsers, the org chart, and layouts.\n - The `\"MINIMIZE\"` width is appropriate for items with a fixed width, such as images or buttons. Use relative widths for items whose width is determined by the containing layout or user interaction, such as text inputs or dropdowns. For further explanation and examples, see [UX Side by Side Guidance](sail/ux-side-by-side-layout.md).\n \n ## Examples\n \n *Copy and paste an example into an Appian Expression Editor to experiment with it.*\n \n ### Input fields with relative widths\n \n ```sail \n a!sideBySideLayout(\n   items: {\n     a!sideBySideItem(\n       width: \"4X\",\n       item: a!textField(\n         label: \"First Name\"\n       )\n     ),\n     a!sideBySideItem(\n       item: a!textField(\n         label: \"M.I.\"\n       )\n     ),\n     a!sideBySideItem(\n       width: \"4X\",\n       item: a!textField(\n         label: \"Last Name\"\n       )\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of inputs of different widths](images/sbs-with-relative-width.png){:.screenshot}\n \n ### Minimized width for icon and button\n \n ```sail \n a!sideBySideLayout(\n   alignVertical: \"MIDDLE\",\n   spacing: \"DENSE\",\n   items: {\n     a!sideBySideItem(\n       width: \"MINIMIZE\",\n       item: a!richTextDisplayField(\n         labelPosition: \"COLLAPSED\",\n         value: a!richTextIcon(\n           icon: \"user\",\n           size: \"LARGE\"\n         )\n       )\n     ),\n     a!sideBySideItem(\n       item: a!textField(\n         labelPosition: \"COLLAPSED\"\n       )\n     ),\n     a!sideBySideItem(\n       width: \"MINIMIZE\",\n       item: a!buttonArrayLayout(\n         marginBelow: \"NONE\",\n         buttons: {\n           a!buttonWidget(\n             label: \"Check Availability\",\n             size: \"SMALL\",\n             style: \"SECONDARY\"\n           )\n         }\n       )\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of inputs using minimized widths](images/sbs-with-minimize.png){:.screenshot}"}, {"doc": "Dashboard_Layout.md", "content": "---\n layout: function\n title: Dashboard Layout [Deprecated]\n reftype: sailcomponent\n category: function_page\n compatibility: -crf\n fncname: a!dashboardLayout\n fnccat: \u4e00Deprecated\u4e00\n depver: 18.2\n scdisplayname: Dashboard Layout\n related_patterns_mods: hide\n parameters:\n - keyword: contents\n   name: Contents\n   types: Any Type Array\n   description: \"Components and layouts to display in the dashboard body. \\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n ---\n \n The dashboard layout has been deprecated, and will be removed in a future release of Appian. Instead, wrap your components in an array `{}`. For information about the dashboard layout, see the [Appian 19.4 documentation](https://docs.appian.com/suite/help/19.4/Dashboard_Layout.html)."}, {"doc": "Image_Component.md", "content": "---\n layout: function\n title: Image Component\n category: function_page\n compatibility: -crf\n excerpt: Displays an image from document management or the web.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!imageField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: images\n   name: Images\n   types: Any Type\n   description: 'Array of images to display, created with a!webImage(), a!userImage(),\n     or a!documentImage().\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines how the images are sized. Valid values: `\"ICON\"`, `\"GALLERY\"`,\n     `\"TINY\"`, `\"SMALL\"`, `\"MEDIUM\"` (default), `\"LARGE\"`, `\"FIT\"`. See the documentation\n     for guidance on how to use different image sizes effectively.\n \n     '\n - keyword: isThumbnail\n   name: Image is a thumbnail\n   types: Boolean\n   description: 'Determines whether the images can be viewed at a larger size when\n     clicked. Multiple images will be visible in a slideshow. Default: false.\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Determines how the images are rendered. Valid values: `\"STANDARD\"`\n     (default), `\"AVATAR\"`.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the image(s). Valid values: `\"START\"`, `\"CENTER\"`,\n     `\"END\"`. Image fields in grids are center-aligned by default. Image fields outside\n     of grids are start-aligned by default.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Image\n space: sail_component\n ---\n \n ## Function\n \n function name: a!imageField \n  function syntax: a!imageField (label,labelPosition,instructions,helpTooltip,images,showWhen,size,isThumbnail,style,align,accessibilityText,marginAbove,marginBelow)\n \n Displays an image from document management or the web.\n \n **See also**:\n \n - [Document Image](Document_Image_Component.md).\n - [User Image](User_Image_Component.md).\n - [Web Image](Web_Image_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"images\", \"name\": \"Images\", \"types\": \"Any Type\", \"description\": \"Array of images to display, created with a!webImage(), a!userImage(), or a!documentImage().\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines how the images are sized. Valid values: `\\\"ICON\\\"`, `\\\"GALLERY\\\"`, `\\\"TINY\\\"`, `\\\"SMALL\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"LARGE\\\"`, `\\\"FIT\\\"`. See the documentation for guidance on how to use different image sizes effectively.\\n\"}, {\"keyword\": \"isThumbnail\", \"name\": \"Image is a thumbnail\", \"types\": \"Boolean\", \"description\": \"Determines whether the images can be viewed at a larger size when clicked. Multiple images will be visible in a slideshow. Default: false.\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines how the images are rendered. Valid values: `\\\"STANDARD\\\"` (default), `\\\"AVATAR\\\"`.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the image(s). Valid values: `\\\"START\\\"`, `\\\"CENTER\\\"`, `\\\"END\\\"`. Image fields in grids are center-aligned by default. Image fields outside of grids are start-aligned by default.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n The maximum display dimensions for each *Size* are listed below:\n \n  - `\"ICON\"`: 20x20 pixels\n  - `\"TINY\"`: 60x120 pixels\n  - `\"GALLERY\"`: 240x80 pixels\n  - `\"SMALL\"`: 100x200 pixels\n  - `\"MEDIUM\"`: 200x400 pixels\n  - `\"LARGE\"`: 400x600 pixels\n  - `\"FIT\"`: natural dimensions\n \n ## Usage considerations\n \n ### Using the style parameter\n \n - If *style* is set to `\"STANDARD\"`, images are scaled down as necessary to fit the size limit, preserving their natural aspect ratio. Images will never be scaled up with this configuration, so they'll display at their natural size if they are smaller than the configured size.\n - If *style* is set to `\"AVATAR\"`, images are scaled down or up as necessary to fit the size limit, preserving their natural aspect ratio, and cropped in a circle.\n \n ### Using the size parameter\n \n - If *size* is set to `\"FIT\"`, images display at either their natural width or the width of the container, whichever is smaller.\n - Images look best with the `ICON` size if they are 40 x 40 pixels and have a transparent background. The images display at 20 x 20 pixels but an original size of 40 x 40 pixels is recommend if any users view the images on high-definition screens, like an iPhone, iPad, or Mac.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Display a series of document images\n \n ```sail \n a!imageField(\n   label: \"Image Field Example\",\n   images: {\n     a!documentImage(\n       document: a!iconNewsEvent(icon: \"HAMMER\", color: \"BLUE\")\n     ),\n     a!documentImage(\n       document: a!iconNewsEvent(icon: \"GEARS\", color: \"GREY\")\n     ),\n     a!documentImage(\n       document: a!iconNewsEvent(icon: \"BRIEFCASE\", color: \"GREEN\")\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of three icon images](images/ImageField_75.png){:.screenshot}\n \n ### Display a series of user images with looping\n \n ```sail \n a!imageField(\n   label: \"Images\",\n   size: \"MEDIUM\",\n   style: \"AVATAR\",\n   images: a!forEach(\n     /* \n     * Usernames of users in your environment. \n     * Please adjust usernames appropriately.\n     */\n     items: { \"james.baker\", \"karen.anderson\", \"maria.lopez\" },\n     expression: a!userImage(\n       user: fv!item\n     )\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of three user images](images/Image_Field_User_Image_Array.png){:.screenshot}"}, {"doc": "Dynamic_Link_Component.md", "content": "---\n layout: function\n title: Dynamic Link\n category: function_page\n compatibility: -crf\n excerpt: Defines a link that triggers updates to one or more variables.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!dynamicLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text displayed as the link name the user clicks on.\n - keyword: value\n   name: Value\n   types: Any Type\n   description: The value that is saved when the user clicks the link.\n - keyword: saveInto\n   name: Save Value To\n   types: Save Array\n   description: 'One or more variables that are updated with the link''s value when\n     the user clicks it. Use `a!save(target, value)` to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Dynamic Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!dynamicLink \n  function syntax: a!dynamicLink (label,value,saveInto,showWhen)\n \n Defines a link that triggers updates to one or more variables. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**: [Link](Link_Component.md), [Read-Only Grid](Paging_Grid_Component.md), [Images](Image_Component.md), [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text displayed as the link name the user clicks on.\"}, {\"keyword\": \"value\", \"name\": \"Value\", \"types\": \"Any Type\", \"description\": \"The value that is saved when the user clicks the link.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Value To\", \"types\": \"Save Array\", \"description\": \"One or more variables that are updated with the link's value when the user clicks it. Use `a!save(target, value)` to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using dynamic links with the link field component\n \n - To display a single link or array of links, use inside the Link Field component. To display a link in a grid, use inside a Grid Text Column. To add a link to an image, use inside a document or web image. To add a link to a chart series, use inside the `a!chartSeries()` function. To add a link to an image, use inside a document, user, or web image.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Dynamic link that saves into a local variable\n \n {% sailbox 500 %} \n a!localVariables(\n   local!priority,\n   a!linkField(\n     label: \"Link Field\",\n     instructions: if(isnull(local!priority), null, \"local!priority is \" & local!priority),\n     links: {\n       a!dynamicLink(\n         label: \"Set priority to high\",\n         value: \"High\",\n         saveInto: local!priority\n       )\n     }\n   )\n )\n {% endsailbox %}"}, {"doc": "Submit_Button_Component.md", "content": "---\n layout: function\n title: Submit Button Component [Deprecated]\n depver: 19.1\n category: function_page\n compatibility: -crf\n fncname: a!buttonWidgetSumbit\n fnccat: \u4e00Deprecated\u4e00\n reftype: function\n ---\n \n This feature has been [deprecated](Deprecated_Features.md), and will be removed in a future release of Appian.\n \n You can now configure a [Button Component](Button_Component.md) as submittable by setting the `submit` parameter to `true`. Works the same way as a Submit Button Component!\n \n For information about the *{{ page.title }}*, see the [Appian 18.4 documentation](https://docs.appian.com/suite/help/18.4/Submit_Button_Component.html)."}, {"doc": "Billboard_Layout.md", "content": "---\n layout: function\n title: Billboard Layout Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a background color, image, or video with optional overlay content.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!billboardLayout\n fncsubcat: Layouts\n parameters:\n - keyword: backgroundMedia\n   name: Background Media\n   types: Any Type\n   description: 'Determines the background content. Takes priority over background\n     color. Configure using a!documentImage, a!userImage, a!webImage, or a!webVideo.\n \n     '\n - keyword: backgroundColor\n   name: Background Color\n   types: Text\n   description: 'Determines the background color. When background media is also specified,\n     the background color shows while media is loading or when background image is\n     transparent. Must be a valid hex code. Default is #f0f0f0.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the layout height. Valid values: `\"EXTRA_SHORT\"`, `\"SHORT\"`,\n     `\"SHORT_PLUS\"`, `\"MEDIUM\"` (default), `\"MEDIUM_PLUS\"`, `\"TALL\"`, `\"TALL_PLUS\"`,\n     `\"EXTRA_TALL\"`, `\"AUTO\"`. Auto renders as medium when no background media is set.\n \n     '\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: 'Determines how much space is added below the layout. Valid values:\n     `\"NONE\"`, `\"EVEN_LESS\"`, `\"LESS\"`, `\"STANDARD\"` (default), `\"MORE\"`, `\"EVEN_MORE\"`.\n \n     '\n - keyword: overlay\n   name: Overlay Configurations\n   types: Any Type\n   description: 'Determines the overlay. Configure using a!columnOverlay, a!barOverlay,\n     or a!fullOverlay.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Billboard Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!billboardLayout \n  function syntax: a!billboardLayout (backgroundMedia,backgroundColor,showWhen,height,marginBelow,overlay,accessibilityText,marginAbove)\n \n Displays a background color, image, or video with optional overlay content.\n \n ## Parameters\n \n [{\"keyword\": \"backgroundMedia\", \"name\": \"Background Media\", \"types\": \"Any Type\", \"description\": \"Determines the background content. Takes priority over background color. Configure using a!documentImage, a!userImage, a!webImage, or a!webVideo.\\n\"}, {\"keyword\": \"backgroundColor\", \"name\": \"Background Color\", \"types\": \"Text\", \"description\": \"Determines the background color. When background media is also specified, the background color shows while media is loading or when background image is transparent. Must be a valid hex code. Default is #f0f0f0.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the layout height. Valid values: `\\\"EXTRA_SHORT\\\"`, `\\\"SHORT\\\"`, `\\\"SHORT_PLUS\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"MEDIUM_PLUS\\\"`, `\\\"TALL\\\"`, `\\\"TALL_PLUS\\\"`, `\\\"EXTRA_TALL\\\"`, `\\\"AUTO\\\"`. Auto renders as medium when no background media is set.\\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}, {\"keyword\": \"overlay\", \"name\": \"Overlay Configurations\", \"types\": \"Any Type\", \"description\": \"Determines the overlay. Configure using a!columnOverlay, a!barOverlay, or a!fullOverlay.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Default text colors for light and dark backgrounds  \n - When the overlay style is *none*, the standard text color changes based on the selected background color. \n   - For light background colors, standard text is dark gray. \n   - For dark background colors, standard text is switched to white. \n   - These automatic text color changes apply even when background media is set.\n \n ### Using overlays\n - A billboard layout may have either a bar, column, full, or no overlay.\n - When overlay content does not fit within the layout, it scrolls vertically.\n \n ### Sizing and displaying background media\n - For billboards with a value of `\"SHORT\"`, `\"MEDIUM\"`, or `\"TALL\"` for the *height* parameter, background media is displayed as large as possible to fill the available width. \n - When the background media's aspect ratio is different from the layout's aspect ratio, the background will be cut off at the top and bottom. \n - If it is important that the background media be fully visible, use *auto* height. See [the UXDG](sail/ux-billboard-layout.md) for guidance on this setting.\n - When a video is used as the background, it plays automatically and does not have audio.\n \n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Billboard with overlay\n ```sail\n a!billboardLayout(\n   backgroundColor: \"#619ed6\",\n   overlay: a!barOverlay(\n     position: \"BOTTOM\",\n     contents: {\n       a!columnsLayout(\n         columns: {\n           a!columnLayout(\n             contents: {\n               a!richTextDisplayField(\n                 labelPosition: \"COLLAPSED\",\n                 value: {\n                   a!richTextItem(\n                     text: \"Finance Summary\",\n                     size: \"LARGE\"\n                   )\n                 }\n               )\n             }\n           ),\n           a!columnLayout(\n             contents: {\n               a!columnsLayout(\n                 columns: {\n                   a!columnLayout(\n                     contents: {\n                       a!richTextDisplayField(\n                         label: \"Total Spending\",\n                         value: a!richTextItem(\n                           text: \"$31,000.00\",\n                           size: \"MEDIUM\"\n                         )\n                       )\n                     }\n                   ),\n                   a!columnLayout(\n                     contents: {\n                       a!richTextDisplayField(\n                         label: \"Remaining Budget\",\n                         value: a!richTextItem(\n                           text: a!richTextItem(\n                             text: \"79%\",\n                             size: \"MEDIUM\"\n                           ),\n                           color: \"POSITIVE\"\n                         )\n                       )\n                     }\n                   ),\n                   a!columnLayout(\n                     contents: {\n                       a!richTextDisplayField(\n                         label: \"Open Requests\",\n                         value: a!richTextItem(\n                           text: \"36\",\n                           size: \"MEDIUM\"\n                         )\n                       )\n                     }\n                   )\n                 },\n                 alignVertical: \"TOP\"\n               )\n             }\n           )\n         },\n         alignVertical: \"MIDDLE\"\n       )\n     },\n     style: \"DARK\"\n   ),\n   height: \"SHORT\"\n )\n ```\n \n Displays the following:\n \n ![screenshot of a billboard with an overlay displaying a finance summary](images/billboard-172.png){:.screenshot}\n \n See the [SAIL Design System: Billboard Layout](sail/ux-billboard-layout.md) for guidance on when to use each overlay style."}, {"doc": "Folder_Browser_Component.md", "content": "---\n layout: function\n title: Folder Browser Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays the contents of a folder and allows users to navigate through a\n   series of folders to find and select a folder.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!folderBrowserFieldColumns\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: 'Determines where the label appears. Valid values: `\"ABOVE\"` (default),\n     `\"ADJACENT\"`, `\"JUSTIFIED\"`,`\"COLLAPSED\"`.\n \n     '\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: rootFolder\n   name: Root Folder\n   types: Any Type\n   description: The contents of the specified folder or knowledge center are displayed\n     in the first column of the browser.\n - keyword: navigationValue\n   name: Navigation Folder Value\n   types: Folder\n   description: The folder that has been navigated to whose contents are displayed\n     in the rightmost column.\n - keyword: navigationSaveInto\n   name: Save Navigation Folder To\n   types: List of Save\n   description: Variable or list of variables to update when the navigation folder\n     changes.\n - keyword: selectionValue\n   name: Selection Value\n   types: Folder\n   description: The folder to show as selected.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: Variable or list of variables to update when a folder is clicked.\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines whether selection is enabled. Default: false.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the component. Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n reftype: sailcomponent\n scdisplayname: Folder Browser\n space: sail_component\n ---\n \n ## Function\n \n function name: a!folderBrowserFieldColumns \n  function syntax: a!folderBrowserFieldColumns (label,labelPosition,instructions,helpTooltip,rootFolder,navigationValue,navigationSaveInto,selectionValue,selectionSaveInto,readOnly,showWhen,height,accessibilityText)\n \n Displays the contents of a folder and allows users to navigate through a series of folders to find and select a folder.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: `\\\"ABOVE\\\"` (default), `\\\"ADJACENT\\\"`, `\\\"JUSTIFIED\\\"`,`\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"rootFolder\", \"name\": \"Root Folder\", \"types\": \"Any Type\", \"description\": \"The contents of the specified folder or knowledge center are displayed in the first column of the browser.\"}, {\"keyword\": \"navigationValue\", \"name\": \"Navigation Folder Value\", \"types\": \"Folder\", \"description\": \"The folder that has been navigated to whose contents are displayed in the rightmost column.\"}, {\"keyword\": \"navigationSaveInto\", \"name\": \"Save Navigation Folder To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when the navigation folder changes.\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"Folder\", \"description\": \"The folder to show as selected.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a folder is clicked.\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines whether selection is enabled. Default: false.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the component. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}]\n \n ## Usage considerations\n \n ### Displaying items and offline use\n \n - Each column displays items in alphabetical order.\n - Avoid using this component for offline mobile forms because tapping on a folder does not display its contents.\n \n ### Permissions\n \n - The current user must have permission to view the selected folder or knowledge center in the parameter.\n - Within a folder or knowledge center, the user can only see contents for which they have permission to view.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Folder browser with folder picker\n \n ```sail \n a!localVariables(\n   local!selection,\n   local!navigation: if(\n     isnull(local!selection),\n     null,\n     document(local!selection[1], \"folderId\")\n   ),\n   local!rootFolder: cons!REPORTS_FOLDER,\n   a!sectionLayout(\n     label: \"System Report Picker\",\n     contents: {\n       a!folderBrowserFieldColumns(\n         rootFolder: local!rootFolder,\n         selectionValue: local!selection,\n         selectionSaveInto: local!selection,\n         navigationValue: local!navigation,\n         navigationSaveInto: local!navigation\n       ),\n       a!pickerFieldFolders(\n         label: \"Selection\",\n         labelPosition: \"JUSTIFIED\",\n         folderFilter: local!rootFolder,\n         maxSelections: 1,\n         value: local!selection,\n         saveInto: local!selection\n       )\n     }\n   )\n )\n ```\n \n A folder browser similar to the one pictured below displays. Note that your folder contents may differ from the example:\n \n ![An example of the document browser component](images/folder-browser-example.png){:.screenshot}"}, {"doc": "Report_Link_Component.md", "content": "---\n layout: function\n title: Report Link Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Defines a link to a report.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!reportLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text associated with this link.\n - keyword: report\n   name: Report\n   types: Report or Task Report\n   description: The linked report or task report.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the link is displayed in the component. When set\n     to false, the component is hidden and is not evaluated. Default: true.'\n - keyword: openLinkIn\n   name: Open Link In\n   types: Text\n   description: '(Browser-Only) Determines where the linked content should open. Valid\n     values: `\"SAME_TAB\"` (default), `\"NEW_TAB\"`.'\n reftype: sailcomponent\n scdisplayname: Report Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!reportLink \n  function syntax: a!reportLink (label,report,showWhen,openLinkIn)\n \n Defines a link to a report. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**: \n - [Report Type](Appian_Data_Types.md#report) \n - [Task Report Type](Appian_Data_Types.md#task-report) \n - [Link](Link_Component.md) \n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text associated with this link.\"}, {\"keyword\": \"report\", \"name\": \"Report\", \"types\": \"Report or Task Report\", \"description\": \"The linked report or task report.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the link is displayed in the component. When set to false, the component is hidden and is not evaluated. Default: true.\"}, {\"keyword\": \"openLinkIn\", \"name\": \"Open Link In\", \"types\": \"Text\", \"description\": \"(Browser-Only) Determines where the linked content should open. Valid values: `\\\"SAME_TAB\\\"` (default), `\\\"NEW_TAB\\\"`.\"}]\n \n ## Examples\n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n > appian-style-note \n > Since report constants are specific to each system, this example does not evaluate in your interface. Use it only as a reference.\n \n ### Basic report link\n \n ```sail \n a!linkField(\n   links: {\n     a!reportLink(\n       label: \"Department Summary\",\n       report: cons!DEPARTMENT_SUMMARY_REPORT\n     )\n   }\n )\n ```"}, {"doc": "File_Upload_Component_171.md", "content": "---\n layout: function\n title: a!fileUploadField_17r1 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Allows users to upload a file.\n category: function_page\n compatibility: -crf, -om\n fncname: a!fileUploadField_17r1\n fncsubcat: Inputs\n fncexample: Click on the function name for examples.\n fncsyntax: '**a!fileUploadField_17r1**( [*label*], [*labelPosition*], [*instructions*],\n   [*helpTooltip*], [*target*], [*documentName*], [*documentDescription*],[*value*],\n   [*saveInto*], [*required*], [*requiredMessage*], [*disabled*], [*validations*],\n   [*validationGroup*] )'\n fnccat: Interface_Component\n scdisplayname: File Upload 17.1\n evolved_fncname: a!fileUploadField\n evolved_reason: Multiple file upload is now supported directly within the component.\n   This removes the need to generate many individual file upload fields.\n ---\n \n ## File Upload 17.1\n \n **Function**: `a!fileUploadField_17r1()`\n \n Allows users to upload a file. File upload is only enabled on start and task forms.\n \n **See Also:** [Document](Appian_Data_Types.md#document), [Document or Folder](Appian_Data_Types.md#document-or-folder)\n \n **Parameters**\n \n <table class=\"appianTable\">\n   <tr>\n     <th> Name </th>\n     <th> Keyword </th>\n     <th> Type </th>\n     <th> Description </th>\n   </tr>\n   <tr>\n     <td> Label </td>\n     <td> label </td>\n     <td> Text </td>\n     <td> Optional text to display as the field label. </td>\n   </tr>\n   <tr>\n     <td> Label Position </td>\n     <td> labelPosition </td>\n     <td> Text </td>\n     <td> Optional text to determine where the label appears. Valid values include\n       <ul>\n         <li><code>\"ABOVE\"</code> (default) Displays the label above the component.</li>\n         <li><code>\"ADJACENT\"</code> Displays the label to the left of the component.</li>\n         <li><code>\"COLLAPSED\"</code> Hides the label. The label will still be read by screen readers; see <a href =\"building_accessible_applications.md\">accessibility considerations</a> for more information.</li>\n       </ul>\n     </td>\n   </tr>\n   <tr>\n     <td> Instructions </td>\n     <td> instructions </td>\n     <td> Text </td>\n     <td> Optional text displayed below the field's value. </td>\n   </tr>\n   <tr>\n     <td> Help Tooltip </td>\n     <td> helpTooltip </td>\n     <td> Text </td>\n     <td> Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is <code>\"COLLAPSED\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Target </td>\n     <td> target </td>\n     <td> Document or Folder </td>\n     <td> Determines the eventual location of the uploaded file. When a Folder, the uploaded file is created as a document in that folder. When a Document, the uploaded file is created as a new version of that document. </td>\n   </tr>\n   <tr>\n     <td> Document Name </td>\n     <td> documentName </td>\n     <td> Text </td>\n     <td> Optionally determines the name for the document. When not provided, the uploaded filename is used. </td>\n   </tr>\n   <tr>\n     <td> Document Description </td>\n     <td> documentDescription </td>\n     <td> Text </td>\n     <td> Determines the description for the document. When not provided, the description of the new file or version is empty. </td>\n   </tr>\n   <tr>\n     <td> Selected Document </td>\n     <td> value </td>\n     <td> Document </td>\n     <td> The document associated with this field. </td>\n   </tr>\n   <tr>\n     <td> Save Document To </td>\n     <td> saveInto </td>\n     <td> Save Array </td>\n     <td> One or more variables that are updated with the document when the user uploads a file. Removing an uploaded file saves a null document. Use <code>a!save()</code> to save a modified or alternative value to a variable. </td>\n   </tr>\n   <tr>\n     <td> Required </td>\n     <td> required </td>\n     <td> Boolean </td>\n     <td> Determines if a value is required to submit the form. Default is <code>false</code>. </td>\n   </tr>\n   <tr>\n     <td> Required Message </td>\n     <td> requiredMessage </td>\n     <td> Text </td>\n     <td> Custom message to be displayed when the field's value is required and not provided. </td>\n   </tr>\n   <tr>\n     <td> Disabled </td>\n     <td> disabled </td>\n     <td> Boolean </td>\n     <td> Determines if the user is prevented from changing the value and determines if the field should be grayed out. Default is <code>false</code>. </td>\n   </tr>\n   <tr>\n     <td> Validations </td>\n     <td> validations </td>\n     <td> Text Array </td>\n     <td> Validation errors to be displayed below the field when the value is not null. </td>\n   </tr>\n   <tr>\n     <td> Validation Group </td>\n     <td> validationGroup </td>\n     <td> Text </td>\n     <td> When present, this field is only validated when a button in the same validation group is clicked. </td>\n   </tr>\n   <tr>\n     <td> Visibility </td>\n     <td> showWhen </td>\n     <td> Boolean </td>\n     <td> Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. </td>\n   </tr>\n </table>\n \n **Notes**\n \n - When a file is uploaded, the component updates with a temporary Document representing the uploaded file. Between the upload and the form submission, the file on the server is an inactive temporary document and not accessible.\n - When implementing form cancel behavior via a submission, remember that the uploaded file is moved to its target on submission. If this is undesirable in a cancel scenario, it should be deleted (if target is a folder) or reverted via a new version (if the target is a document) by the process after submission.\n - If a file is uploaded to a form that is never submitted, the temporary file is automatically deleted after thirty days.\n - If any of the following characters appear in a document's name, they are replaced by underscores: `\\ / \" ; : | ? ' < > *`\n - The user submitting the form must have at least author access to the target folder or document. Any error creating the new document or version causes submission to be canceled and an error to be displayed to the user.\n - The file upload component only functions on start and task forms. When placed on a record view or report, the field appears but is automatically disabled.\n - Task forms with one or more file upload fields can only be saved if either no file has been uploaded or every uploaded file has been removed.\n \n **Examples**\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ***Single File Upload***\n \n ```sail \n =a!fileUploadField_17r1(\n   label: \"Upload resume\",\n   instructions: \"Accepted Formats: docsx, xlsx, png, etc\",\n   target: cons!RESUME_FOLDER,\n   value: ri!file,\n   saveInto: ri!file,\n   required: true\n )\n ```\n \n Displays the following:\n \n <img src=\"images/FileUploadEmpty_75.png\" class=\"screenshot\"/>\n \n Using the field to upload a file called \"Resume.pdf\" displays the following:\n \n <img src=\"images/FileUploadWithFile_75.png\" class=\"screenshot\"/>"}, {"doc": "Dropdown_Component_20r2.md", "content": "---\n layout: function\n title: a!dropdownField_20r2 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays a limited set of choices from which the user must select one item\n   and saves a value based on the selected choice.\n category: function_page\n compatibility: -crf\n fncname: a!dropdownField_20r2\n fncsubcat: Selection\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scdisplayname: Dropdown\n evolved_fncname: a!dropdownField\n evolved_reason: Added an optional search box and renamed the placeholderLabel parameter\n   to placeholder.'\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.'\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.'\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: choiceValues\n   name: Choice Values\n   types: List of Variant\n   description: Array of values associated with the available choices.\n - keyword: placeholderLabel\n   name: Placeholder Label\n   types: Text\n   description: Text to display when nothing is selected and the value is null.\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: Value of the choice to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the choice value when the\n     user changes the selection. Use a!save() to save a modified or alternative value\n     to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.'\n ---\n \n ## Dropdown\n \n **Function**: `a!dropdownField_20r2()`\n \n Displays a limited set of exclusive choices from which the user must select one item and saves a value based on the selected choice.  To save the index of the choice instead of a value, use [dropdown by index](Dropdown_By_Index_Component.md).\n \n If the user may select none, one, or many of the choices, then consider using [checkboxes](Checkbox_Component.md) or a [multiple dropdown](Multiple_Dropdown_Component.md).\n \n If there aren't many choices and users would benefit from easily seeing them all at once, consider using [radio buttons](Radio_Button_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"choiceValues\", \"name\": \"Choice Values\", \"types\": \"List of Variant\", \"description\": \"Array of values associated with the available choices.\"}, {\"keyword\": \"placeholderLabel\", \"name\": \"Placeholder Label\", \"types\": \"Text\", \"description\": \"Text to display when nothing is selected and the value is null.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"Value of the choice to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice value when the user changes the selection. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\"}]\n \n **Notes**\n \n - If you set *Label Position* to `\"ADJACENT\"` or `\"ABOVE\"`, but do not give a value for *Label*, a space still displays to the left-side or above, respectively, of the component as if there was a label displayed. To ensure the component appears to the far left when *Label* has no value, use `\"COLLAPSED\"` for *Label Position*.\n - Choices display in the same order as defined in the *Choice Labels* parameter. The *Choice Labels* argument cannot be null.\n - Passing a null value to the dropdown's *Selected Value* parameter causes the placeholder text to appear selected. The *Placeholder Label* and *Selected Value* arguments cannot both be null. If the placeholder is selected and *Required* is true when a validating button is clicked, the field prompts the user to select a value.\n - *Choice Labels* and *Choice Values* must be the same length.\n - *Choice Values* cannot contain nulls or duplicate values.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ***Disabled Dropdown with Label Displayed Above***\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!dropdownField_20r2(\n   label: \"Language\",\n   labelPosition: \"ABOVE\",\n   instructions: \"In which language are you most proficient?\",\n   choiceLabels: {\n     \"English\",\n     \"Spanish\",\n     \"French\",\n     \"German\"\n   },\n   choiceValues: {\n     \"en_US\",\n     \"es_ES\",\n     \"fr_FR\",\n     \"de_DE\"\n   },\n   value: \"en_US\",\n   disabled: true\n )\n {% endsailbox %}\n \n \n ***Editable Dropdown with the First Choice Selected by Default***\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: \"en_US\",\n   a!dropdownField_20r2(\n     label: \"Language\",\n     instructions: \"In which language are you most proficient?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language\n   )\n )\n {% endsailbox %}\n \n \n ***Dropdown with a Blank Choice Selected by Default***\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: null,\n   a!dropdownField_20r2(\n     label: \"Language\",\n     instructions: \"In which language are you most proficient?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     placeholderLabel: \"Select a language...\",\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language\n   )\n )\n {% endsailbox %}"}, {"doc": "Area_Chart_Config_Component.md", "content": "---\n layout: basic\n title: Area Chart Configuration\n category: function_page\n excerpt: Contains configuration for how to display data in an area chart.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples\n fncname: a!areaChartConfig\n fncsubcat: Charts\n fncsyntax: '**a!areaChartConfig**(*primaryGrouping*, *secondaryGrouping*, *measures*,\n   *sort*, *dataLimit*, *link*, *showIntervalsWithNoData*)'\n parameters:\n - keyword: primaryGrouping\n   name: Primary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display on the axis in the chart, configured\n     using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: secondaryGrouping\n   name: Secondary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display in the series of stacked or overlapping\n     data points in the chart, configured using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: measures\n   name: Measures\n   types: List of Measure\n   description: 'Defines the numerical calculations for data in the chart, configured\n     using [a!measure()](Measure_Component.md). If no measure is provided, a count\n     of records shows as the measurement in the chart.\n \n     '\n - keyword: sort\n   name: Sort\n   types: List of SortInfo\n   description: 'Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending\n     or descending order. Use the alias of any groupings or measures to sort by the\n     values in the chart. Use a record field or related record field reference to sort\n     by data that is not referenced in the chart.\n \n     '\n - keyword: dataLimit\n   name: Data Limit\n   types: Number (Integer)\n   description: 'Maximum number of data points to display on the chart. Default: 100.\n     Valid values: 1-5000.\n \n     '\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to execute when a user selects a data point on the chart. Use\n     `fv!selection` to pass context from the selection made on the chart to the link.\n     Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\n \n     '\n - keyword: showIntervalsWithNoData\n   name: Show time intervals with no data\n   types: Boolean\n   description: 'Determines whether the axis in the chart displays date or time values\n     that do not have a value associated with them. For example, show January, February,\n     and March, even if February has no data. This parameter is only available when\n     a Date, Time, or Date and Time field is used as the primary grouping. Default:\n     _false_.\n \n     '\n reftype: sailcomponent\n scdisplayname: Area Chart Configuration\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n {{ page.fncsyntax }}\n \n Contains configuration for how to display data in an area chart. See the [Area Chart Component](Area_Chart_Component.md) page for examples on using this configuration supporting function.\n \n **See also**:\n \n - [Chart Configuration Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"primaryGrouping\", \"name\": \"Primary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display on the axis in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"secondaryGrouping\", \"name\": \"Secondary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display in the series of stacked or overlapping data points in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"measures\", \"name\": \"Measures\", \"types\": \"List of Measure\", \"description\": \"Defines the numerical calculations for data in the chart, configured using [a!measure()](Measure_Component.md). If no measure is provided, a count of records shows as the measurement in the chart.\\n\"}, {\"keyword\": \"sort\", \"name\": \"Sort\", \"types\": \"List of SortInfo\", \"description\": \"Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart.\\n\"}, {\"keyword\": \"dataLimit\", \"name\": \"Data Limit\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to execute when a user selects a data point on the chart. Use `fv!selection` to pass context from the selection made on the chart to the link. Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\\n\"}, {\"keyword\": \"showIntervalsWithNoData\", \"name\": \"Show time intervals with no data\", \"types\": \"Boolean\", \"description\": \"Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: _false_.\\n\"}]\n \n ## Usage considerations\n \n ### Using a!areaChartConfig()\n \n - [a!areaChartConfig()](Area_Chart_Component.md) is always used within an area chart component.\n - This configuration is used when a record type is defined as the data source for an area chart.\n - If no measure is provided, the chart displays a count of records and the label displays as `Count of <primary key field name>`.\n \n ### Using groups and data limits\n \n - The *primaryGrouping* is required to display data on the chart. The data values returned from the grouping display on the horizontal axis.\n - The *secondaryGrouping* is optional; if this parameter is provided, multiple lines are shown for each unique value in the grouping and the label will display in the legend and/or tooltips if they are enabled.\n - The *dataLimit* determines the total number of data points displayed in the chart. When both a primary and secondary grouping are provided, there is a data point for each unique combination of values: with 3 values in your primary grouping and 4 values in your secondary grouping, you will have 12 values on your chart.\n \n ### Using dynamic links and aliases\n \n - When a dynamic link is added to the *link* parameter, the current selected data is available using `fv!selection`. This variable returns a map that contains each of the field aliases as the key and the unformatted value as the value. Since the alias is used for the key, aliases are required for each grouping and measure when using a link. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#configure-chart-links) for an example of how to configure a link.\n \n ### Using the sort parameter\n - You can sort by the alias of any groupings or measures, or by any fields that are not directly referenced in the chart as long as they are of type Number (Integer), Number (Decimal), Date, Date and Time, Time, or Boolean. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#stacked-column-chart-of-cases-by-status-and-priority) for an example of sorting by a field not referenced in the chart.\n - When configuring sort in Design Mode, you must use the alias of any groupings or measures to sort by the fields in the chart. In Expression Mode, you can use the alias or the field name if the alias is not provided.\n \n ### Using the showIntervalsWithNoData parameter\n - To use the *showIntervalsWithNoData* parameter, the *primaryGrouping* must be a Date, Time, or Date and Time field, and have a [time interval](Grouping_Component.md#interval) set to a value other than `\"AUTO\"`.  For example:\n   \n   {% include zoompic.html url=\"images/area-chart-show-no-data.png\" %}\n \n - When you configure your chart in Design Mode, the *showIntervalsWithNoData* parameter will automatically be set to `true` when you select a time interval for your primary grouping.\n - When *showIntervalsWithNoData* is `true`, the sort must be on the *primaryGrouping* field.\n - The *dataLimit* applies to this parameter, so any dates without data will be counted in the total number of data points that can be displayed in the chart."}, {"doc": "Header_Text_Component.md", "content": "---\n layout: function\n title: Header Text Component\n category: function_page\n compatibility: -crf\n excerpt: Displays heading-styled text within a rich text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextHeader\n fncsubcat: Display\n parameters:\n - keyword: text\n   name: Text\n   types: Text or Styled Text\n   description: Array of text to display as a rich text item.\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the text size. Valid values: `\"ICON\"` (default), `\"TINY\"`,\n     `\"GALLERY\"`, `\"SMALL\"`, `\"MEDIUM\"`, and `\"LARGE\"`.\n \n     '\n - keyword: link\n   name: Link\n   types: Link\n   description: \"Link to apply to the text. Create links with:\\n  - [a!authorizationLink()](authorization_link_component.md)\\n\n     \\ - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n\n     \\ - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n\n     \\ - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n\n     \\ - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: linkStyle\n   name: Link Style\n   types: Text\n   description: 'Determines how the link is underlined. Valid values: `\"INLINE\"` (default),\n     `\"STANDALONE\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Header Text\n scsubcat: Rich_Text_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextHeader \n  function syntax: a!richTextHeader (text,size,link,linkStyle,showWhen)\n \n Displays heading-styled text within a [rich text](Rich_Text_Component.md) component.\n \n **See also**: [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"text\", \"name\": \"Text\", \"types\": \"Text or Styled Text\", \"description\": \"Array of text to display as a rich text item.\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the text size. Valid values: `\\\"ICON\\\"` (default), `\\\"TINY\\\"`, `\\\"GALLERY\\\"`, `\\\"SMALL\\\"`, `\\\"MEDIUM\\\"`, and `\\\"LARGE\\\"`.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Link\", \"description\": \"Link to apply to the text. Create links with:\\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"linkStyle\", \"name\": \"Link Style\", \"types\": \"Text\", \"description\": \"Determines how the link is underlined. Valid values: `\\\"INLINE\\\"` (default), `\\\"STANDALONE\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the text and link parameters\n \n - If *text* is null or contains an empty array, no text is displayed.\n - If *link* is null, the *text* is not displayed as a link.\n \n ### Header text and grids\n \n - While rich text components can be placed inside a grid layout, header styles are not supported within a grid layout.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %}\n \n a!richTextDisplayField(\n   label: \"Heading Sizes\",\n   labelPosition: \"ABOVE\",\n   value: {\n     a!richTextHeader(\n       text: \"Small Heading\",\n       size: \"SMALL\"\n     ),\n     a!richTextHeader(\n       text: \"Medium Heading\",\n       size: \"MEDIUM\"\n     ),\n     a!richTextHeader(\n       text: \"Large Heading\",\n       size: \"LARGE\"\n     ),\n     a!richTextHeader(\n       text: \"Medium Standalone Link Heading\",\n       link: a!dynamicLink(\n       ),\n       linkstyle: \"STANDALONE\",\n       size: \"MEDIUM\"\n     ),\n     a!richTextHeader(\n       text: \"Medium Inline Link Heading\",\n       link: a!dynamicLink(\n       ),\n       linkstyle: \"INLINE\",\n       size: \"MEDIUM\"\n     )\n   }\n )\n \n {% endsailbox %}"}, {"doc": "Pie_Chart_Config_Component.md", "content": "---\n layout: function\n title: Pie Chart Configuration\n category: function_page\n compatibility: -crf\n excerpt: Contains configuration for how to display data in a pie chart.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples\n fncname: a!pieChartConfig\n fncsubcat: Charts\n parameters:\n - keyword: primaryGrouping\n   name: Primary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display for each slice of the pie chart,\n     configured using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: measures\n   name: Measures\n   types: Measure\n   description: 'Defines the numerical calculations for data in the chart, configured\n     using [a!measure()](Measure_Component.md). If no measure is provided, a count\n     of records shows as the measurement in the chart.\n \n     '\n - keyword: sort\n   name: Sort\n   types: SortInfo\n   description: 'Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending\n     or descending order. Use the alias of any groupings or measures to sort by the\n     values in the chart. Use a record field or related record field reference to sort\n     by data that is not referenced in the chart.\n \n     '\n - keyword: dataLimit\n   name: Data Limit\n   types: Integer\n   description: 'Maximum number of data points to display on the chart. Default: 100.\n     Valid values: 1-5000.\n \n     '\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to execute when a user selects a data point on the chart. Use\n     `fv!selection` to pass context from the selection made on the chart to the link.\n     Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\n \n     '\n reftype: sailcomponent\n scdisplayname: Pie Chart Configuration\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pieChartConfig \n  function syntax: a!pieChartConfig (primaryGrouping,measures,sort,dataLimit,link)\n \n Contains configuration for how to display data in a pie chart. See the [Pie Chart Component](Pie_Chart_Component.md) page for examples on using this configuration supporting function.\n \n **See also**:\n \n - [Chart Configuration Using Records](Chart_Configuration_Using_Records.md)\n - [Chart Color Schemes](Chart_Color_Scheme.md)\n \n ## Parameters\n \n [{\"keyword\": \"primaryGrouping\", \"name\": \"Primary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display for each slice of the pie chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"measures\", \"name\": \"Measures\", \"types\": \"Measure\", \"description\": \"Defines the numerical calculations for data in the chart, configured using [a!measure()](Measure_Component.md). If no measure is provided, a count of records shows as the measurement in the chart.\\n\"}, {\"keyword\": \"sort\", \"name\": \"Sort\", \"types\": \"SortInfo\", \"description\": \"Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart.\\n\"}, {\"keyword\": \"dataLimit\", \"name\": \"Data Limit\", \"types\": \"Integer\", \"description\": \"Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to execute when a user selects a data point on the chart. Use `fv!selection` to pass context from the selection made on the chart to the link. Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\\n\"}]\n \n ## Usage considerations\n \n ### Using a!pieChartConfig()\n  \n - `a!pieChartConfig()` is always used within a pie chart component.\n - This configuration is used when a record type is defined as the data source for a pie chart in the *data* parameter of `a!pieChartField()`.\n - If no measure is provided, the chart displays a count of records. Also, the label displays as `Count of <primary key field name>`.\n \n ### Using groups and data limits parameters\n \n - The *primaryGrouping* is required to display data on the chart.\n - The *dataLimit* determines the total number of slices displayed in the chart.\n \n ### Using the sort parameter\n \n - You can sort by the alias of any groupings or measures, or by any fields that are not directly referenced in the chart as long as they are of type Number (Integer), Number (Decimal), Date, Date and Time, Time, or Boolean. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#stacked-column-chart-of-cases-by-status-and-priority) for an example of sorting by a field not referenced in the chart.\n - When configuring sort in Design Mode, you must use the alias of any groupings or measures to sort by the fields in the chart. In Expression Mode, you can use the alias or the field name if the alias is not provided.\n \n ### Using dynamic links and aliases\n \n - When a dynamic link is added to the *link* parameter, the current selected data is available using `fv!selection`. This variable returns a map that contains each of the field aliases as the key and the unformatted value as the value. Since the alias is used for the key, aliases are required for each grouping and measure when using a link. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#configure-chart-links) for an example of how to configure a link."}, {"doc": "Editable_Grid_Component.md", "content": "---\n layout: function\n title: Editable Grid Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a tabular layout of SAIL components to provide quick inline editing\n   of fields. For an example of how to configure an editable grid, see the Add, Edit,\n   and Remove Data in an Inline Editable Grid SAIL Recipe.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gridLayout\n fncsubcat: Grids and Lists\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the grid label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this grid.\n - keyword: headerCells\n   name: Header Cells\n   types: List of Variant\n   description: Array of column headers created with a!gridLayoutHeaderCell().\n - keyword: columnConfigs\n   name: Column Configurations\n   types: List of GridColumnConfiguration\n   description: Array of column configurations created with a!gridLayoutColumnConfig().\n - keyword: rows\n   name: Rows\n   types: List of Variant\n   description: Array of grid rows created with a!gridRowLayout().\n - keyword: validations\n   name: Validations\n   types: List of Variant\n   description: Validation errors to display below the grid.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.'\n - keyword: selectable\n   name: Selectable\n   types: Boolean\n   description: 'Determines if the selection column is displayed. Default: false.\n \n     '\n - keyword: selectionDisabled\n   name: Selection disabled\n   types: Boolean\n   description: 'Determines if selection is disabled on all rows. Default: false.\n \n     '\n - keyword: selectionRequired\n   name: Selection required\n   types: Boolean\n   description: 'Determines if a selection is required to submit the form. Default:\n     false.\n \n     '\n - keyword: selectionValue\n   name: Selection Value\n   types: List of Variant\n   description: Identifiers of selected rows.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: One or more variables that are updated with the selected identifiers\n     when the user changes selections. Use a!save() to save a modified or alternative\n     value to a variable.\n - keyword: addRowLink\n   name: Add Row Link\n   types: Any Type\n   description: Link for adding a row to the grid. Create link using a!dynamicLink().\n - keyword: totalCount\n   name: Total Count\n   types: Number (Integer)\n   description: Number of rows of data displayed in the grid.\n - keyword: emptyGridMessage\n   name: Empty Grid Message\n   types: Text\n   description: Text to display in the grid when no data is available. Default is `\"No\n     items available\"`.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: shadeAlternateRows\n   name: Shade alternate rows\n   types: Boolean\n   description: 'Determines whether alternate rows are shaded. Default: true.\n \n     '\n - keyword: spacing\n   name: Spacing\n   types: Text\n   description: 'Determines the spacing within grid cells. Valid values: `\"STANDARD\"`\n     (web default), `\"DENSE\"` (mobile default).\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the grid. Valid values: `\"SHORT\"`, `\"SHORT_PLUS\"`,\n     `\"MEDIUM\"`, `\"MEDIUM_PLUS\"`, `\"TALL\"`, `\"TALL_PLUS\"`, `\"EXTRA_TALL\"`, `\"AUTO\"`\n     (default). All grid heights besides AUTO have fixed headers that will remain at\n     the top of the grid when scrolling.\n \n     '\n - keyword: borderStyle\n   name: Border Style\n   types: Text\n   description: 'Determines the style of the grid border. Valid values: `\"STANDARD\"`\n     (default), `\"LIGHT\"`.\n \n     '\n - keyword: selectionStyle\n   name: Selection Style\n   types: Text\n   description: 'Determines the style when a row is selected. Valid values: `\"CHECKBOX\"`\n     (default), `\"ROW_HIGHLIGHT\"`.\n \n     '\n - keyword: rowHeader\n   name: Row Header\n   types: Number (Integer)\n   description: 'Index of the column to be used as the row header. Screen readers will\n     announce the value in each row header when navigating to other cells within that\n     row. Used only for accessibility; produces no visible change.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n reftype: sailcomponent\n scdisplayname: Editable Grid\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gridLayout \n  function syntax: a!gridLayout (label,instructions,headerCells,columnConfigs,rows,validations,validationGroup,selectable,selectionDisabled,selectionRequired,selectionValue,selectionSaveInto,addRowLink,totalCount,emptyGridMessage,helpTooltip,labelPosition,showWhen,shadeAlternateRows,spacing,height,borderStyle,selectionStyle,rowHeader,accessibilityText)\n \n Displays a tabular layout of SAIL components to provide quick inline editing of fields. For an example of how to configure an editable grid, see the Add, Edit, and Remove Data in an Inline Editable Grid SAIL Recipe.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the grid label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this grid.\"}, {\"keyword\": \"headerCells\", \"name\": \"Header Cells\", \"types\": \"List of Variant\", \"description\": \"Array of column headers created with a!gridLayoutHeaderCell().\"}, {\"keyword\": \"columnConfigs\", \"name\": \"Column Configurations\", \"types\": \"List of GridColumnConfiguration\", \"description\": \"Array of column configurations created with a!gridLayoutColumnConfig().\"}, {\"keyword\": \"rows\", \"name\": \"Rows\", \"types\": \"List of Variant\", \"description\": \"Array of grid rows created with a!gridRowLayout().\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Variant\", \"description\": \"Validation errors to display below the grid.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.'\"}, {\"keyword\": \"selectable\", \"name\": \"Selectable\", \"types\": \"Boolean\", \"description\": \"Determines if the selection column is displayed. Default: false.\\n\"}, {\"keyword\": \"selectionDisabled\", \"name\": \"Selection disabled\", \"types\": \"Boolean\", \"description\": \"Determines if selection is disabled on all rows. Default: false.\\n\"}, {\"keyword\": \"selectionRequired\", \"name\": \"Selection required\", \"types\": \"Boolean\", \"description\": \"Determines if a selection is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"List of Variant\", \"description\": \"Identifiers of selected rows.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the selected identifiers when the user changes selections. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"addRowLink\", \"name\": \"Add Row Link\", \"types\": \"Any Type\", \"description\": \"Link for adding a row to the grid. Create link using a!dynamicLink().\"}, {\"keyword\": \"totalCount\", \"name\": \"Total Count\", \"types\": \"Number (Integer)\", \"description\": \"Number of rows of data displayed in the grid.\"}, {\"keyword\": \"emptyGridMessage\", \"name\": \"Empty Grid Message\", \"types\": \"Text\", \"description\": \"Text to display in the grid when no data is available. Default is `\\\"No items available\\\"`.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"shadeAlternateRows\", \"name\": \"Shade alternate rows\", \"types\": \"Boolean\", \"description\": \"Determines whether alternate rows are shaded. Default: true.\\n\"}, {\"keyword\": \"spacing\", \"name\": \"Spacing\", \"types\": \"Text\", \"description\": \"Determines the spacing within grid cells. Valid values: `\\\"STANDARD\\\"` (web default), `\\\"DENSE\\\"` (mobile default).\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the grid. Valid values: `\\\"SHORT\\\"`, `\\\"SHORT_PLUS\\\"`, `\\\"MEDIUM\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"TALL\\\"`, `\\\"TALL_PLUS\\\"`, `\\\"EXTRA_TALL\\\"`, `\\\"AUTO\\\"` (default). All grid heights besides AUTO have fixed headers that will remain at the top of the grid when scrolling.\\n\"}, {\"keyword\": \"borderStyle\", \"name\": \"Border Style\", \"types\": \"Text\", \"description\": \"Determines the style of the grid border. Valid values: `\\\"STANDARD\\\"` (default), `\\\"LIGHT\\\"`.\\n\"}, {\"keyword\": \"selectionStyle\", \"name\": \"Selection Style\", \"types\": \"Text\", \"description\": \"Determines the style when a row is selected. Valid values: `\\\"CHECKBOX\\\"` (default), `\\\"ROW_HIGHLIGHT\\\"`.\\n\"}, {\"keyword\": \"rowHeader\", \"name\": \"Row Header\", \"types\": \"Number (Integer)\", \"description\": \"Index of the column to be used as the row header. Screen readers will announce the value in each row header when navigating to other cells within that row. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}]\n \n ## Usage considerations\n \n ### Performance and data\n \n - Performance is affected by the number of components in an interface. If your interface contains an editable grid with many cells, the interface may feel slow. See also: [Interface Evaluation Lifecycle](SAIL_Performance.md)\n - When using a datasubset obtained using *a!queryEntity()* as the source of data for the editable grid, make sure to set its *fetchTotalCount* parameter to `true`. Otherwise, the `totalCount` field on the resulting datasubset may be invalid (i.e. set to -1). This is relevant for the `totalCount` parameter on the editable grid. See also: [a!queryEntity() Function](fnc_system_a_queryentity.md).\n \n ### Component behavior in grid cells\n \n - When an interface component is placed into a grid cell, the following component configurations are ignored:\n   - label\n   - instructions\n   - label position \n - Validation messages on the component within the grid cell are displayed when the component's value is not null.\n - The components placed within a grid cell can be different across the rows in one column.\n \n ### Using images in editable grids\n \n - When placing an Image Field component inside an editable grid, there are some additional restrictions that do not apply when an image component is outside of a grid.\n - The image component behaves slightly differently when it is placed inside of a Grid Layout component than when it is outside of a Grid Layout.\n   - Inside an editable grid, the image size `FIT` is not allowed.\n   - Inside an editable grid, the default size for an image component is `ICON`. Other valid image sizes include `SMALL`, `MEDIUM`, and `LARGE`.\n   - Inside an editable grid, you can only have 0 or 1 images in an image component. Multiple images in the same grid cell are not supported.\n   - All image components in the same column must have the same size.\n - The Grid Text Column and Grid Image Column components cannot be used in an editable grid.  \n \n ### Grid height and headers\n \n - Grid heights behave as a fixed height on web but a maximum height on mobile.\n - Setting the height of the grid to <code>SHORT</code>, <code>MEDIUM</code>, or <code>TALL</code> will freeze the grid's header and footer. See the [Short Editable Grid with Weighted Columns](#short-editable-grid-with-weighted-columns) example below.\n - For accessibility purposes, every grid should have a row header configured. The first column containing text is usually the correct choice for row header. See the [SAIL Design System](sail/ux-grids.md#accessibility) for more information.\n \n ## Examples\n \n *Copy and paste an example into an interface object in **EXPRESSION MODE** to see it displayed.*\n \n ### Editable grid with two rows\n \n ```sail\n a!localVariables(\n   local!items: {\n     {item: \"Item 1\", qty: 1, unitPrice: 10},\n     {item: \"Item 2\", qty: 2, unitPrice: 20}\n   },\n   a!gridLayout(\n     label: \"Products\",\n     instructions: \"Update the item name, quantity, or unit price.\",\n     headerCells: {\n       a!gridLayoutHeaderCell(label: \"Item\"),\n       a!gridLayoutHeaderCell(label: \"Qty\"),\n       a!gridLayoutHeaderCell(label: \"Unit Price\"),\n       a!gridLayoutHeaderCell(label: \"Total\", align: \"RIGHT\")\n     },\n     rows: {\n       a!gridRowLayout(\n         contents: {\n           a!textField(\n             value: local!items[1].item,\n             saveInto: local!items[1].item\n           ),\n           a!integerField(\n             value: local!items[1].qty,\n             saveInto: local!items[1].qty\n           ),\n           a!floatingPointField(\n             value: local!items[1].unitPrice,\n             saveInto: local!items[1].unitPrice\n           ),\n           a!textField(\n             value: a!currency(\n               isoCode: \"USD\",\n               value: tointeger(local!items[1].qty) * todecimal(local!items[1].unitPrice)\n             ),\n             readOnly: true,\n             align: \"RIGHT\"\n           )\n         }\n       ),\n       a!gridRowLayout(\n         contents: {\n           a!textField(\n             value: local!items[2].item,\n             saveInto: local!items[2].item\n           ),\n           a!integerField(\n             value: local!items[2].qty,\n             saveInto: local!items[2].qty\n           ),\n           a!floatingPointField(\n             value: local!items[2].unitPrice,\n             saveInto: local!items[2].unitPrice\n           ),\n           a!textField(\n             value: a!currency(\n               isoCode: \"USD\",\n               value: tointeger(local!items[2].qty) * todecimal(local!items[2].unitPrice)\n             ),\n             readOnly: true,\n             align: \"RIGHT\"\n           )\n         }\n       )\n     },\n     rowHeader: 1\n   )\n )\n ```\n \n Displays the following:\n \n ![gridLayout with two Rows](images/gridLayout_twoRows.png){:.screenshot}\n \n ### Editable grid with two rows using looping\n \n *See  [Add, Edit, and Remove Data in an Inline Editable Grid](recipe-add-edit-and-remove-data-in-an-inline-editable-grid.md) recipe for more help using [a!forEach](fnc_looping_a_foreach.md) with the editable grid.*\n \n ```sail\n a!localVariables(\n   local!items: {\n     {item: \"Item 1\", qty: 1, unitPrice: 10},\n     {item: \"Item 2\", qty: 2, unitPrice: 20}\n   },\n   a!gridLayout(\n     label: \"Products\",\n     instructions: \"Update the item name, quantity, or unit price.\",\n     headerCells: {\n       a!gridLayoutHeaderCell(label: \"Item\"),\n       a!gridLayoutHeaderCell(label: \"Qty\"),\n       a!gridLayoutHeaderCell(label: \"Unit Price\"),\n       a!gridLayoutHeaderCell(label: \"Total\", align: \"RIGHT\")\n     },\n     rows: a!forEach(\n       items: local!items,\n       expression: a!gridRowLayout(\n         contents: {\n           a!textField(\n             value: fv!item.item,\n             saveInto: fv!item.item\n           ),\n           a!integerField(\n             value: fv!item.qty,\n             saveInto: fv!item.qty\n           ),\n           a!floatingPointField(\n             value: fv!item.unitPrice,\n             saveInto: fv!item.unitPrice\n           ),\n           a!textField(\n             value: a!currency(\n               isoCode: \"USD\",\n               value: tointeger(fv!item.qty) * todecimal(fv!item.unitPrice)\n             ),\n             readOnly: true,\n             align: \"RIGHT\"\n           )\n         }\n       )  \n     ),\n     rowHeader: 1\n   )\n )\n ```\n \n Displays the following:\n \n ![gridLayout with two Rows](images/gridLayout_twoRows.png){:.screenshot}\n \n ### Editable grid with validations\n \n ```sail\n a!localVariables(\n   local!items: {\n     {item: \"Item 1\", qty: 10, unitPrice: 10},\n     {item: \"Item 2\", qty: 2,  unitPrice: 20}\n   },\n   a!gridLayout(\n     label: \"Products\",\n     instructions: \"Update the item name, quantity, or unit price.\",\n     headerCells: {\n       a!gridLayoutHeaderCell(label: \"Item\"),\n       a!gridLayoutHeaderCell(label: \"Qty\"),\n       a!gridLayoutHeaderCell(label: \"Unit Price\"),\n       a!gridLayoutHeaderCell(label: \"Total\", align: \"RIGHT\")\n     },\n     rows: a!forEach(\n       items: local!items,\n       expression: a!gridRowLayout(\n         contents: {\n           a!textField(\n             value: fv!item.item,\n             saveInto: fv!item.item\n           ),\n           a!integerField(\n             value: fv!item.qty,\n             saveInto: fv!item.qty\n           ),\n           a!floatingPointField(\n             value: fv!item.unitPrice,\n             saveInto: fv!item.unitPrice\n           ),\n           a!textField(\n             value: a!currency(\n               isoCode: \"USD\",\n               value: tointeger(fv!item.qty) * todecimal(fv!item.unitPrice)\n             ),\n             readOnly: true,\n             align: \"RIGHT\"\n           )\n         }\n       )  \n     ),\n     validations: {\n       if(\n         sum(tointeger(local!items.qty) * todecimal(local!items.unitPrice))>100,\n         \"Total must not exceed $100\",\n         null\n       ),\n       if(\n         length(local!items)<3,\n         a!validationMessage(\n           message: \"Enter at least 3 items\",\n         ),\n         null\n       )\n     },\n     rowHeader: 1\n   )\n )\n ```\n \n Displays the following:\n \n ![gridLayout with validation](images/gridLayout_validation2.png){:.screenshot style=\"width:100%;\" style=\"height:75%\"}\n \n ### Editable grid with selection\n \n ```sail\n a!localVariables(\n   local!items: {\n     {item: \"Item 1\", qty: 1, unitPrice: 10},\n     {item: \"Item 2\", qty: 2, unitPrice: 20}\n   },\n   local!selected: tointeger({}),\n   a!gridLayout(\n     label: \"Products\",\n     instructions: \"Selected: \" & local!selected,\n     headerCells: {\n       a!gridLayoutHeaderCell(label: \"Item\"),\n       a!gridLayoutHeaderCell(label: \"Qty\"),\n       a!gridLayoutHeaderCell(label: \"Unit Price\"),\n       a!gridLayoutHeaderCell(label: \"Total\", align: \"RIGHT\")\n     },\n     rows: a!forEach(\n       items: local!items,\n       expression: a!gridRowLayout(\n         id: fv!index,\n         contents: {\n           a!textField(\n             value: fv!item.item,\n             saveInto: fv!item.item\n           ),\n           a!integerField(\n             value: fv!item.qty,\n             saveInto: fv!item.qty\n           ),\n           a!floatingPointField(\n             value: fv!item.unitPrice,\n             saveInto: fv!item.unitPrice\n           ),\n           a!textField(\n             value: a!currency(\n               isoCode: \"USD\",\n               value: tointeger(fv!item.qty) * todecimal(fv!item.unitPrice)\n             ),\n             readOnly: true,\n             align: \"RIGHT\"\n           )\n         }\n       )  \n     ),\n     selectable: true,\n     selectionValue: local!selected,\n     /* Flatten the selected values so the result is easier to work with */\n     /* when the select/deselect all option is used in an editable grid  */\n     selectionSaveInto: a!save(local!selected, a!flatten(save!value)),\n     rowHeader: 1\n   )\n )\n ```\n \n Displays the following:\n \n ![gridLayout with selection](images/gridLayout_selection.png){:.screenshot}\n \n ### Editable grid with weighted columns\n \n ```sail\n a!localVariables(\n   local!items: {\n     {item: \"Item 1\", qty: 10, unitPrice: 10},\n     {item: \"Item 2\", qty: 2,  unitPrice: 20}\n   },\n   a!gridLayout(\n     label: \"Products\",\n     instructions: \"This is a grid layout with column weights: 5, 1, 1, 2\",\n     headerCells: {\n       a!gridLayoutHeaderCell(label: \"Item\"),\n       a!gridLayoutHeaderCell(label: \"Qty\"),\n       a!gridLayoutHeaderCell(label: \"Unit Price\"),\n       a!gridLayoutHeaderCell(label: \"Total\", align: \"RIGHT\")\n     },\n     columnConfigs: {\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\", weight: 5),\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\"),\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\"),\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\", weight: 2)\n     },\n     rows: a!forEach(\n       items: local!items,\n       expression: a!gridRowLayout(\n         contents: {\n           a!textField(\n             value: fv!item.item,\n             saveInto: fv!item.item\n           ),\n           a!integerField(\n             value: fv!item.qty,\n             saveInto: fv!item.qty\n           ),\n           a!floatingPointField(\n             value: fv!item.unitPrice,\n             saveInto: fv!item.unitPrice\n           ),\n           a!textField(\n             value: a!currency(\n               isoCode: \"USD\",\n               value: tointeger(fv!item.qty) * todecimal(fv!item.unitPrice)\n             ),\n             readOnly: true,\n             align: \"RIGHT\"\n           )\n         }\n       )  \n     ),\n     rowHeader: 1\n   )\n )\n ```\n \n Displays the following: ![gridLayout with weighted columns](images/gridLayout_weighted.png){:.screenshot}\n \n ### Short editable grid with weighted columns\n \n ```sail\n a!localVariables(\n   local!items: {\n     {item: \"Item 1\", qty: 1, unitPrice: 10},\n     {item: \"Item 2\", qty: 2, unitPrice: 20},\n     {item: \"Item 3\", qty: 3, unitPrice: 30},\n     {item: \"Item 4\", qty: 4, unitPrice: 40},\n     {item: \"Item 5\", qty: 5, unitPrice: 50},\n     {item: \"Item 6\", qty: 6, unitPrice: 60},\n     {item: \"Item 7\", qty: 7, unitPrice: 70},\n     {item: \"Item 8\", qty: 8, unitPrice: 80},\n     {item: \"Item 9\", qty: 9, unitPrice: 90},\n     {item: \"Item 10\", qty: 10, unitPrice: 100}\n   },\n   a!gridLayout(\n     label: \"Products\",\n     instructions: \"Update the item name, quantity, or unit price.\",\n     headerCells: {\n       a!gridLayoutHeaderCell(label: \"Item\"),\n       a!gridLayoutHeaderCell(label: \"Qty\"),\n       a!gridLayoutHeaderCell(label: \"Unit Price\"),\n       a!gridLayoutHeaderCell(label: \"Total\", align: \"RIGHT\")\n     },\n     columnConfigs: {\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\", weight: 5),\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\"),\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\"),\n       a!gridLayoutColumnConfig(width: \"DISTRIBUTE\", weight: 2)\n     },\n     rows: a!forEach(\n       items: local!items,\n       expression: a!gridRowLayout(\n         contents: {\n           a!textField(\n             value: fv!item.item,\n             saveInto: fv!item.item\n           ),\n           a!integerField(\n             value: fv!item.qty,\n             saveInto: fv!item.qty\n           ),\n           a!floatingPointField(\n             value: fv!item.unitPrice,\n             saveInto: fv!item.unitPrice\n           ),\n           a!textField(\n             value: a!currency(\n               isoCode: \"USD\",\n               value: tointeger(fv!item.qty) * todecimal(fv!item.unitPrice)\n             ),\n             readOnly: true,\n             align: \"RIGHT\"\n           )\n         }\n       )  \n     ),\n     height: \"SHORT\",\n     rowHeader: 1\n   )\n )\n ```\n Displays the following:\n \n ![gridLayout short](images/gridLayout_short.gif){:.screenshot}"}, {"doc": "Section_Layout.md", "content": "---\n layout: function\n title: Section Layout Component\n category: function_page\n compatibility: -crf\n excerpt: This layout requires Appian for Mobile Devices version 17.2 or later. Displays\n   any arrangement of layouts and components beneath a section title on an interface.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!sectionLayout\n fncsubcat: Layouts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: 'Text to display as the section''s title.\n \n     '\n - keyword: contents\n   name: Contents\n   types: Any Type\n   description: Components and layouts to display in the section body.\n - keyword: validations\n   name: Validations\n   types: List of Variant\n   description: Validation errors to display above the section.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: isCollapsible\n   name: Collapsible\n   types: Boolean\n   description: Determines if an expand/collapse control appears in the section label.\n     Default is false.\n - keyword: isInitiallyCollapsed\n   name: Initially Collapsed\n   types: Boolean\n   description: Determines if the section is collapsed when the interface first loads.\n     Default is false.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.'\n - keyword: divider\n   name: Divider Line\n   types: Text\n   description: 'Determines where a divider appears within the section. Valid values:\n     `\"NONE\"` (default), `\"ABOVE\"`, `\"BELOW\"`.\n \n     '\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: labelIcon\n   name: Label Icon\n   types: Text\n   description: 'Icon to display next to the label. For a list of available icons,\n     see the [Styled Icon component](Styled_Icon_Component.md#available-icons).\n \n     '\n - keyword: iconAltText\n   name: Icon Alternative Text\n   types: Text\n   description: Equivalent alternate text for use by screen readers.\n - keyword: labelSize\n   name: Label Size\n   types: Text\n   description: 'Determines the label size. Valid values: `\"LARGE_PLUS\"`, `\"LARGE\"`,\n     `\"MEDIUM_PLUS\"`, `\"MEDIUM\"` (default), `\"SMALL\"`, `\"EXTRA_SMALL\"`.\n \n     '\n - keyword: labelHeadingTag\n   name: Accessibility Heading Tag\n   types: Text\n   description: 'Determines the heading tag associated with the label for use by screen\n     readers; produces no visible change. Valid values: `\"H1\"`, `\"H2\"`, `\"H3\"`, `\"H4\"`,\n     `\"H5\"`, `\"H6\"`. The default is dependent on the chosen label size. For more information\n     on header tags, see our [header accessibility guidance](sail/ux-accessibility.md#use-accessible-headers).\n \n     '\n - keyword: labelColor\n   name: Label Color\n   types: Text\n   description: 'Determines the label color. Valid values: Any valid hex color or `\"ACCENT\"`\n     (default), `\"STANDARD\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`, `\"SECONDARY\"`.\n \n     '\n - keyword: dividerColor\n   name: Divider Color\n   types: Text\n   description: 'Determines the divider line color. Valid values: Any valid hex color\n     or `\"SECONDARY\"` (default), `\"STANDARD\"`, `\"ACCENT\"`.\n \n     '\n - keyword: dividerWeight\n   name: Divider Weight\n   types: Text\n   description: 'Determines the divider line thickness. Valid values: `\"THIN\"` (default),\n     `\"MEDIUM\"`, `\"THICK\"`.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Section Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!sectionLayout \n  function syntax: a!sectionLayout (label,contents,validations,validationGroup,isCollapsible,isInitiallyCollapsed,showWhen,divider,marginBelow,accessibilityText,labelIcon,iconAltText,labelSize,labelHeadingTag,labelColor,dividerColor,dividerWeight,marginAbove)\n \n This layout requires Appian for Mobile Devices version 17.2 or later. Displays any arrangement of layouts and components beneath a section title on an interface.\n \n **See also**:\n \n - [Dashboard](Dashboard_Layout.md)\n - [Form](Form_Layout.md)\n - [Columns](Columns_Layout.md)\n - [Section Layout design guidance](sail/ux-section-layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the section's title.\\n\"}, {\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type\", \"description\": \"Components and layouts to display in the section body.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Variant\", \"description\": \"Validation errors to display above the section.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"isCollapsible\", \"name\": \"Collapsible\", \"types\": \"Boolean\", \"description\": \"Determines if an expand/collapse control appears in the section label. Default is false.\"}, {\"keyword\": \"isInitiallyCollapsed\", \"name\": \"Initially Collapsed\", \"types\": \"Boolean\", \"description\": \"Determines if the section is collapsed when the interface first loads. Default is false.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\"}, {\"keyword\": \"divider\", \"name\": \"Divider Line\", \"types\": \"Text\", \"description\": \"Determines where a divider appears within the section. Valid values: `\\\"NONE\\\"` (default), `\\\"ABOVE\\\"`, `\\\"BELOW\\\"`.\\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"labelIcon\", \"name\": \"Label Icon\", \"types\": \"Text\", \"description\": \"Icon to display next to the label. For a list of available icons, see the [Styled Icon component](Styled_Icon_Component.md#available-icons).\\n\"}, {\"keyword\": \"iconAltText\", \"name\": \"Icon Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text for use by screen readers.\"}, {\"keyword\": \"labelSize\", \"name\": \"Label Size\", \"types\": \"Text\", \"description\": \"Determines the label size. Valid values: `\\\"LARGE_PLUS\\\"`, `\\\"LARGE\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"SMALL\\\"`, `\\\"EXTRA_SMALL\\\"`.\\n\"}, {\"keyword\": \"labelHeadingTag\", \"name\": \"Accessibility Heading Tag\", \"types\": \"Text\", \"description\": \"Determines the heading tag associated with the label for use by screen readers; produces no visible change. Valid values: `\\\"H1\\\"`, `\\\"H2\\\"`, `\\\"H3\\\"`, `\\\"H4\\\"`, `\\\"H5\\\"`, `\\\"H6\\\"`. The default is dependent on the chosen label size. For more information on header tags, see our [header accessibility guidance](sail/ux-accessibility.md#use-accessible-headers).\\n\"}, {\"keyword\": \"labelColor\", \"name\": \"Label Color\", \"types\": \"Text\", \"description\": \"Determines the label color. Valid values: Any valid hex color or `\\\"ACCENT\\\"` (default), `\\\"STANDARD\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, `\\\"SECONDARY\\\"`.\\n\"}, {\"keyword\": \"dividerColor\", \"name\": \"Divider Color\", \"types\": \"Text\", \"description\": \"Determines the divider line color. Valid values: Any valid hex color or `\\\"SECONDARY\\\"` (default), `\\\"STANDARD\\\"`, `\\\"ACCENT\\\"`.\\n\"}, {\"keyword\": \"dividerWeight\", \"name\": \"Divider Weight\", \"types\": \"Text\", \"description\": \"Determines the divider line thickness. Valid values: `\\\"THIN\\\"` (default), `\\\"MEDIUM\\\"`, `\\\"THICK\\\"`.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Validations \n \n - Sections that contain validation messages are not collapsible regardless of the *collapsible* parameter's value. For example, if a validation is triggered when the form loads, then that section is expanded even if you have specified `true` for the *isInitiallyCollapsed* parameter.\n - If you have nested section layouts, any validations on an inner section will also appear in the outer section.\n \n ### Section headers\n \n - The *labelHeadingTag* parameter allows you to add a descriptive tag to a section heading so that screen readers can more easily convey page structure to the user. For more information and examples, see our design guidance on [Accessible Headers](sail/ux-accessibility.md#use-accessible-headers).\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Two columns within one section\n \n ```sail \n a!sectionLayout(\n   label: \"Customers for Review\",\n   labelHeadingTag: \"H1\",\n   contents: {\n     a!columnsLayout(\n       columns: {\n         a!columnLayout(\n           contents: {\n             a!textField(\n               label: \"Customer\",\n               value: \"John Smith\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Status\",\n               value: \"Prospective\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Priority\",\n               value: \"High\",\n               readOnly: true\n             )\n           }\n         ),\n         a!columnLayout(\n           contents: {\n             a!textField(\n               label: \"Customer\",\n               value: \"Michael Johnson\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Status\",\n               value: \"Prospective\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Priority\",\n               value: \"Medium\",\n               readOnly: true\n             )\n           }\n         )\n       }\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of two columns in a section layout](images/Sectionlayout_simple_75.png){:.screenshot}\n \n ### Nested sections\n \n ```sail \n {\n   a!sectionLayout(\n     label: \"Patient Profile\",\n     labelSize: \"LARGE\",\n     labelHeadingTag: \"H1\",\n     labelColor: \"STANDARD\",\n     contents: {\n       a!sectionLayout(\n         label: \"Personal Details\",\n         labelHeadingTag: \"H2\",\n         contents: {\n           a!columnsLayout(\n             columns: {\n               a!columnLayout(\n                 contents: {\n                   a!sectionLayout(\n                     label: \"Contact Information\",\n                     labelSize: \"SMALL\",\n                     labelHeadingTag: \"H3\",\n                     labelColor: \"SECONDARY\",\n                     contents: {\n                       a!textField(\n                         label: \"Name\",\n                         labelPosition: \"ADJACENT\",\n                         value: \"Katherine Johnson\",\n                         readOnly: true\n                       ),\n                       a!textField(\n                         label: \"Phone\",\n                         labelPosition: \"ADJACENT\",\n                         value: \"(202) 555-7513\",\n                         readOnly: true\n                       )\n                     }\n                   )\n                 }\n               ),\n               a!columnLayout(\n                 contents: {\n                   a!sectionLayout(\n                     label: \"Work Information\",\n                     labelSize: \"SMALL\",\n                     labelHeadingTag: \"H3\",\n                     labelColor: \"SECONDARY\",\n                     contents: {\n                       a!textField(\n                         label: \"Position\",\n                         labelPosition: \"ADJACENT\",\n                         value: \"Full-time remote\",\n                         readOnly: true\n                       ),\n                       a!textField(\n                         label: \"Department\",\n                         labelPosition: \"ADJACENT\",\n                         value: \"Information Technology\",\n                         readOnly: true\n                       )\n                     }\n                   )\n                 }\n               )\n             }\n           ),\n           a!sectionLayout(\n             label: \"COVID-19 Health Information\",\n             labelHeadingTag: \"H2\",\n             contents: {\n               a!columnsLayout(\n                 columns: {\n                   a!columnLayout(\n                     contents: {\n                       a!sectionLayout(\n                         label: \"Vaccination Status\",\n                         labelSize: \"SMALL\",\n                         labelHeadingTag: \"H3\",\n                         labelColor: \"SECONDARY\",\n                         contents: {\n                           a!textField(\n                             label: \"Status\",\n                             labelPosition: \"ADJACENT\",\n                             value: \"Partially Validated\",\n                             readOnly: true\n                           ),\n                           a!textField(\n                             label: \"Vaccine\",\n                             labelPosition: \"ADJACENT\",\n                             value: \"Pfizer-BioNTech COVID-19 Vaccine\",\n                             readOnly: true\n                           )\n                         }\n                       )\n                     }\n                   ),\n                   a!columnLayout(\n                     contents: {\n                       a!sectionLayout(\n                         label: \"History\",\n                         labelSize: \"SMALL\",\n                         labelHeadingTag: \"H3\",\n                         labelColor: \"SECONDARY\",\n                         contents: {\n                           a!textField(\n                             label: \"Have you ever tested positive for COVID-19?\",\n                             labelPosition: \"ADJACENT\",\n                             value: \"No\",\n                             readOnly: true\n                           )\n                         }\n                       )\n                     }\n                   )\n                 }\n               )\n             }\n           )\n         }\n       )\n     }\n   )\n }\n ```\n \n Displays the following:\n \n ![screenshot of nested section layouts with patient information](images/section_nesting_example.png){:.screenshot}"}, {"doc": "Bar_Chart_Config_Component.md", "content": "---\n layout: function\n title: Bar Chart Configuration\n category: function_page\n compatibility: -crf\n excerpt: Contains configuration for how to display data in a bar chart.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples\n fncname: a!barChartConfig\n fncsubcat: Charts\n fncsyntax: a!barChartConfig(primaryGrouping, secondaryGrouping, measures, sort, dataLimit,\n   link, showIntervalsWithNoData)\n parameters:\n - keyword: primaryGrouping\n   name: Primary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display on the axis in the chart, configured\n     using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: secondaryGrouping\n   name: Secondary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display in the stacking or grouped bars\n     in the chart, configured using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: measures\n   name: Measures\n   types: Measure\n   description: 'Defines the numerical calculations for data in the chart, configured\n     using [a!measure()](Measure_Component.md). If no measure is provided, a count\n     of records shows as the measurement in the chart.\n \n     '\n - keyword: sort\n   name: Sort\n   types: SortInfo\n   description: 'Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending\n     or descending order. Use the alias of any groupings or measures to sort by the\n     values in the chart. Use a record field or related record field reference to sort\n     by data that is not referenced in the chart.\n \n     '\n - keyword: dataLimit\n   name: Data Limit\n   types: Integer\n   description: 'Maximum number of data points to display on the chart. Default: 100.\n     Valid values: 1-5000.\n \n     '\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to execute when a user selects a data point on the chart. Use\n     `fv!selection` to pass context from the selection made on the chart to the link.\n     Create a link using [`a!dynamicLink()](Dynamic_Link_Component.md).\n \n     '\n - keyword: showIntervalsWithNoData\n   name: Show time intervals with no data\n   types: Boolean\n   description: 'Determines whether the axis in the chart displays date or time values\n     that do not have a value associated with them. For example, show January, February,\n     and March, even if February has no data. This parameter is only available when\n     a Date, Time, or Date and Time field is used as the primary grouping. Default:\n     _false_.\n \n     '\n reftype: sailcomponent\n scdisplayname: Bar Chart Configuration\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!barChartConfig \n  function syntax: a!barChartConfig (primaryGrouping,secondaryGrouping,measures,sort,dataLimit,link,showIntervalsWithNoData)\n \n Contains configuration for how to display data in a bar chart. See the [Bar Chart Component](Bar_Chart_Component.md) page for examples on using this configuration supporting function.\n \n **See also**:\n \n - [Chart Configuration Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"primaryGrouping\", \"name\": \"Primary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display on the axis in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"secondaryGrouping\", \"name\": \"Secondary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display in the stacking or grouped bars in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"measures\", \"name\": \"Measures\", \"types\": \"Measure\", \"description\": \"Defines the numerical calculations for data in the chart, configured using [a!measure()](Measure_Component.md). If no measure is provided, a count of records shows as the measurement in the chart.\\n\"}, {\"keyword\": \"sort\", \"name\": \"Sort\", \"types\": \"SortInfo\", \"description\": \"Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart.\\n\"}, {\"keyword\": \"dataLimit\", \"name\": \"Data Limit\", \"types\": \"Integer\", \"description\": \"Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to execute when a user selects a data point on the chart. Use `fv!selection` to pass context from the selection made on the chart to the link. Create a link using [`a!dynamicLink()](Dynamic_Link_Component.md).\\n\"}, {\"keyword\": \"showIntervalsWithNoData\", \"name\": \"Show time intervals with no data\", \"types\": \"Boolean\", \"description\": \"Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: _false_.\\n\"}]\n \n ## Usage considerations\n \n ### Using a!barChartConfig()\n \n - `a!barChartConfig()` is always used within a bar chart component.\n - This configuration is used when a record type is defined as the data source for a bar chart.\n - If no measure is provided, the chart displays a count of records. Also, the label displays as `Count of <primary key field name>`.\n \n ### Using groups and data limits\n \n - The *primaryGrouping* is required to display data on the chart. The data values returned from the grouping display on the vertical axis.\n - The *secondaryGrouping* is optional; if this parameter is provided, the data values for the secondary grouping will display in the legend and / or tooltips if they are enabled.\n - The *dataLimit* determines the total number of data points displayed in the chart. When both a primary and secondary grouping are provided, there is a data point for each unique combination of values: with 3 values in your primary grouping and 4 values in your secondary grouping, you will have 12 values on your chart.\n \n ### Using dynamic links and aliases\n \n - When a dynamic link is added to the *link* parameter, the current selected data is available using `fv!selection`. This variable returns a map that contains each of the field aliases as the key and the unformatted value as the value. Since the alias is used for the key, aliases are required for each grouping and measure when using a link. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#configure-chart-links) for an example of how to configure a link.\n \n ### Using the sort parameter\n \n - You can sort by the alias of any groupings or measures, or by any fields that are not directly referenced in the chart as long as they are of type Number (Integer), Number (Decimal), Date, Date and Time, Time, or Boolean. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#stacked-column-chart-of-cases-by-status-and-priority) for an example of sorting by a field not referenced in the chart.\n - When configuring sort in Design Mode, you must use the alias of any groupings or measures to sort by the fields in the chart. In Expression Mode, you can use the alias or the field name if the alias is not provided.\n \n ### Using the showIntervalsWithNoData parameter\n - To use the *showIntervalsWithNoData* parameter, the *primaryGrouping* must be a Date, Time, or Date and Time field, and have a [time interval](Grouping_Component.md#interval) set to a value other than `\"AUTO\"`.  For example:\n   \n   {% include zoompic.html url=\"images/bar-chart-show-no-data.png\" %}\n \n - When you configure your chart in Design Mode, the *showIntervalsWithNoData* parameter will automatically be set to `true` when you select a time interval for your primary grouping.\n - When *showIntervalsWithNoData* is `true`, the sort must be on the *primaryGrouping* field.\n - The *dataLimit* applies to this parameter, so any dates without data will be counted in the total number of data points that can be displayed in the chart."}, {"doc": "Web_Image_Component.md", "content": "---\n layout: function\n title: Web Image\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays an image from the web.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!webImage\n fncsubcat: Display\n parameters:\n - keyword: source\n   name: Source\n   types: SafeURI\n   description: Location of the image. See [SafeURI](Appian_Data_Types.md#safeuri).\n - keyword: altText\n   name: Alternate Text\n   types: Text\n   description: Alternate text of the image used for the image s alt attribute and\n     read by screen readers; see accessibility considerations for more information.\n - keyword: caption\n   name: Caption\n   types: Text\n   description: Optional text to display in the mouseover text for the image and when\n     the images is viewed in slideshow mode.\n - keyword: link\n   name: Link\n   types: Link\n   description: \"Link that determines the behavior of an image when clicked. Create\n     links with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  -\n     [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n\n     \\ - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n\n     \\ - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n\n     \\ - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the image is displayed in the component. When set\n     to false, the image is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Web Image\n scsubcat: Image_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!webImage \n  function syntax: a!webImage (source,altText,caption,link,showWhen)\n \n Displays an image from the web for use in an [image](Image_Component.md) field, [rich text](Rich_Text_Component.md) field, [tree browser](Tree_Browser_Component.md) field, [billboard](Billboard_Layout.md) layout or [grid column](Grid_Column_Component.md) in a Read-Only Grid.\n \n ## Parameters\n \n [{\"keyword\": \"source\", \"name\": \"Source\", \"types\": \"SafeURI\", \"description\": \"Location of the image. See [SafeURI](Appian_Data_Types.md#safeuri).\"}, {\"keyword\": \"altText\", \"name\": \"Alternate Text\", \"types\": \"Text\", \"description\": \"Alternate text of the image used for the image s alt attribute and read by screen readers; see accessibility considerations for more information.\"}, {\"keyword\": \"caption\", \"name\": \"Caption\", \"types\": \"Text\", \"description\": \"Optional text to display in the mouseover text for the image and when the images is viewed in slideshow mode.\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Link\", \"description\": \"Link that determines the behavior of an image when clicked. Create links with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the image is displayed in the component. When set to false, the image is hidden and is not evaluated. Default: true.\\n\"}]"}, {"doc": "card_layout.md", "content": "---\n layout: function\n title: Card Layout Component\n category: function_page\n compatibility: -crf\n excerpt: Displays any arrangement of layouts and components within a card on an interface.\n   Can be styled or linked.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!cardLayout\n fncsubcat: Layouts\n parameters:\n - keyword: contents\n   name: Contents\n   types: Any Type\n   description: Components and layouts to display within the card.\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to apply to the card. Create a link with `a!documentDownloadLink()`,\n     `a!dynamicLink()`, `a!newsEntryLink()`, `a!processTaskLink()`, `a!recordLink()`,\n     `a!reportLink()`, `a!safeLink()`, `a!startProcessLink()`, `a!submitLink()`, `a!userRecordLink()`,\n     or `a!authorizationLink().`\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the card height. Valid values: `\"EXTRA_SHORT\"`, `\"SHORT\"`,\n     `\"SHORT_PLUS\"`, `\"MEDIUM\"`, `\"MEDIUM_PLUS\"`, `\"TALL\"`, `\"TALL_PLUS\"`, `\"EXTRA_TALL\"`,\n     `\"AUTO\"`(default).\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Determines the card background color. Valid values: Any valid hex\n     color or `\"NONE\"` (default), `\"TRANSPARENT\"`, `\"STANDARD\"`, `\"ACCENT\"`, `\"SUCCESS\"`,\n     `\"INFO\"`, `\"WARN\"`, `\"ERROR\"`, `\"CHARCOAL_SCHEME\"`, `\"NAVY_SCHEME\"`, `\"PLUM_SCHEME\"`.\n \n     '\n - keyword: showBorder\n   name: Show Border\n   types: Boolean\n   description: 'Determines whether the layout has an outer border. Default: true.\n \n     '\n - keyword: showShadow\n   name: Show Shadow\n   types: Boolean\n   description: 'Determines whether the layout has an outer shadow. Default: false.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: Text to display on mouseover.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: padding\n   name: Padding\n   types: Text\n   description: 'Determines the space between the card edges and its contents. Valid\n     values: `\"NONE\"`, `\"EVEN_LESS\"`, `\"LESS\"` (default), `\"STANDARD\"`, `\"MORE\"`, `\"EVEN_MORE\"`.\n \n     '\n - keyword: shape\n   name: Shape\n   types: Text\n   description: 'Determines the card shape. Valid values: `\"SQUARED\"` (default), `\"SEMI_ROUNDED\"`,\n     `\"ROUNDED\"`.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: decorativeBarPosition\n   name: Decorative Bar Position\n   types: Text\n   description: 'Determines where the decorative bar displays. Valid values: `\"TOP\"`,\n     `\"BOTTOM\"`, `\"START\"`, `\"END\"`, `\"NONE\"` (default).\n \n     '\n - keyword: decorativeBarColor\n   name: Decorative Bar Color\n   types: Text\n   description: 'Determines the decorative bar color. Valid values: Any valid hex color\n     or `\"ACCENT\"` (default), `\"POSITIVE\"`, `\"WARN\"`, `\"NEGATIVE\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Card Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!cardLayout \n  function syntax: a!cardLayout (contents,link,height,style,showBorder,showShadow,tooltip,showWhen,marginBelow,accessibilityText,padding,shape,marginAbove,decorativeBarPosition,decorativeBarColor)\n \n Displays any arrangement of layouts and components within a card on an interface. Can be styled or linked.\n \n ## Parameters\n \n [{\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type\", \"description\": \"Components and layouts to display within the card.\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to apply to the card. Create a link with `a!documentDownloadLink()`, `a!dynamicLink()`, `a!newsEntryLink()`, `a!processTaskLink()`, `a!recordLink()`, `a!reportLink()`, `a!safeLink()`, `a!startProcessLink()`, `a!submitLink()`, `a!userRecordLink()`, or `a!authorizationLink().`\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the card height. Valid values: `\\\"EXTRA_SHORT\\\"`, `\\\"SHORT\\\"`, `\\\"SHORT_PLUS\\\"`, `\\\"MEDIUM\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"TALL\\\"`, `\\\"TALL_PLUS\\\"`, `\\\"EXTRA_TALL\\\"`, `\\\"AUTO\\\"`(default).\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines the card background color. Valid values: Any valid hex color or `\\\"NONE\\\"` (default), `\\\"TRANSPARENT\\\"`, `\\\"STANDARD\\\"`, `\\\"ACCENT\\\"`, `\\\"SUCCESS\\\"`, `\\\"INFO\\\"`, `\\\"WARN\\\"`, `\\\"ERROR\\\"`, `\\\"CHARCOAL_SCHEME\\\"`, `\\\"NAVY_SCHEME\\\"`, `\\\"PLUM_SCHEME\\\"`.\\n\"}, {\"keyword\": \"showBorder\", \"name\": \"Show Border\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout has an outer border. Default: true.\\n\"}, {\"keyword\": \"showShadow\", \"name\": \"Show Shadow\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout has an outer shadow. Default: false.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display on mouseover.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"padding\", \"name\": \"Padding\", \"types\": \"Text\", \"description\": \"Determines the space between the card edges and its contents. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"` (default), `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}, {\"keyword\": \"shape\", \"name\": \"Shape\", \"types\": \"Text\", \"description\": \"Determines the card shape. Valid values: `\\\"SQUARED\\\"` (default), `\\\"SEMI_ROUNDED\\\"`, `\\\"ROUNDED\\\"`.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"decorativeBarPosition\", \"name\": \"Decorative Bar Position\", \"types\": \"Text\", \"description\": \"Determines where the decorative bar displays. Valid values: `\\\"TOP\\\"`, `\\\"BOTTOM\\\"`, `\\\"START\\\"`, `\\\"END\\\"`, `\\\"NONE\\\"` (default).\\n\"}, {\"keyword\": \"decorativeBarColor\", \"name\": \"Decorative Bar Color\", \"types\": \"Text\", \"description\": \"Determines the decorative bar color. Valid values: Any valid hex color or `\\\"ACCENT\\\"` (default), `\\\"POSITIVE\\\"`, `\\\"WARN\\\"`, `\\\"NEGATIVE\\\"`.\\n\"}]\n \n ## Usage considerations\n \n ### Using the decorativeBarPosition and decorativeBarColor parameters {#decorative-bar}\n \n - The *decorativeBarColor* is ignored unless the *decorativeBarPosition* is set.\n - To create a consistent and orderly UI, use the same *decorativeBarPosition* for all cards on an interface.\n \n ### Using the style parameter with color schemes and header content layouts\n \n - If you're using a predefined or custom color scheme for your interface, use the card layout's *style* parameter to select matching or complimentary card colors.\n   - If you use a [header content layout](Header_Layout.md) with a [predefined color scheme](sail/ux-header-content-layout.md#color-schemes) for your background, make sure that your header content layout and cards are using the same predefined color scheme.\n   - If you use a dark custom background color for your header content layout, make your cards a lighter color. For more information on backgrounds, check out our [header content layout design guidance](sail/ux-header-content-layout.md#color-schemes).\n   - If you need your card to blend into the background of your interface, use the `\"TRANSPARENT\"` style. This style is great for cards that will appear on multiple different interfaces and be reused throughout an application."}, {"doc": "Document_Image_Component.md", "content": "---\n layout: function\n title: Document Image\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays an image from document management.\n category: function_page\n compatibility: -crf\n fncname: a!documentImage\n fncsubcat: Display\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scsubcat: Image_Types\n scdisplayname: Document Image\n parameters:\n - keyword: document\n   name: Document\n   types: Document\n   description: The image to display.\n - keyword: altText\n   name: Alternate Text\n   types: Text\n   description: Alternate text of the image used for the image's alt attribute and\n     read by screen readers; see accessibility considerations for more information.\n - keyword: caption\n   name: Caption\n   types: Text\n   description: Optional text to display in the mouseover text for the image and when\n     the images is viewed in slideshow mode.\n - keyword: link\n   name: Link\n   types: Link\n   description: \"Link that determines the behavior of an image when clicked. Create\n     links with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  -\n     [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n\n     \\ - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n\n     \\ - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n\n     \\ - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\n     \\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the image is displayed in the component. When set\n     to false, the image is hidden and is not evaluated. Default: true.\n \n     '\n ---\n \n ## Function\n \n function name: a!documentImage \n  function syntax: a!documentImage (document,altText,caption,link,showWhen)\n \n Displays an image from document management for use in an [image](Image_Component.md) field, [rich text](Rich_Text_Component.md) field, [tree browser](Tree_Browser_Component.md) field, [billboard](Billboard_Layout.md) layout or [grid column](Grid_Column_Component.md) in a Read-Only Grid.\n \n ## Parameters\n \n [{\"keyword\": \"document\", \"name\": \"Document\", \"types\": \"Document\", \"description\": \"The image to display.\"}, {\"keyword\": \"altText\", \"name\": \"Alternate Text\", \"types\": \"Text\", \"description\": \"Alternate text of the image used for the image's alt attribute and read by screen readers; see accessibility considerations for more information.\"}, {\"keyword\": \"caption\", \"name\": \"Caption\", \"types\": \"Text\", \"description\": \"Optional text to display in the mouseover text for the image and when the images is viewed in slideshow mode.\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Link\", \"description\": \"Link that determines the behavior of an image when clicked. Create links with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md) \\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the image is displayed in the component. When set to false, the image is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into an interface object in **EXPRESSION MODE** to see it displayed.*\n \n ### Displaying a document image using a constant\n \n To test this example, replace `cons!MY_PNG` with a constant that points to a document in your environment.\n \n Note that this uses the `document()` function to access the name of the document to display in the interface.\n \n ```sail\n a!imageField(\n   label: document(\n     documentId: cons!MY_PNG,\n     property: \"name\"\n   ),\n   labelPosition: \"ABOVE\",\n   images: {\n     a!documentImage(\n       document: cons!MY_PNG\n     )\n   }\n )\n ```"}, {"doc": "Gauge_Component.md", "content": "---\n layout: function\n title: Gauge Component\n category: function_page\n compatibility: -crf\n excerpt: Displays completion percentage in a circular style with optional text.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gaugeField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: percentage\n   name: Percentage\n   types: Number (Decimal)\n   description: Number to display between 0 and 100.\n - keyword: primaryText\n   name: Primary Text\n   types: Text\n   description: 'Optional text to display on the first line inside the gauge. Create\n     using plain text, [a!gaugeIcon()](Gauge_Icon_Component.md), [a!gaugePercentage()](Gauge_Percentage_Component.md),\n     or [a!gaugeFraction()](Gauge_Fraction_Component.md).\n \n     '\n - keyword: secondaryText\n   name: Secondary Text\n   types: Text\n   description: Optional text to display on the second line inside the gauge.\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Determines the color. Access the percentage using fv!percentage. Valid\n     values: Any valid hex color or `\"ACCENT\"` (default), `\"POSITIVE\"`, `\"NEGATIVE\"`,\n     `\"WARN\"`.\n \n     '\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the size of the gauge. Valid values: `SMALL`, `MEDIUM`\n     (default), `LARGE`.\n \n     '\n - keyword: align\n   name: Align\n   types: Text\n   description: 'Determines alignment of the gauge. Valid values: `START`, `CENTER`\n     (default), `END`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: Text to display as a tooltip on the gauge.\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Gauge\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gaugeField \n  function syntax: a!gaugeField (label,labelPosition,instructions,helpTooltip,percentage,primaryText,secondaryText,color,size,align,accessibilityText,showWhen,tooltip,marginAbove,marginBelow)\n \n Displays a completion percentage in a circular style similar to the [Progress Bar](Progress_Bar_Component.html). Best used for showing progress when there is a target value, such as the number of completed surveys out of 360 total surveys, or number of hired employees out of 20 total open positions.\n \n **See also**:\n \n - [Gauge Icon](Gauge_Icon_Component.md)\n - [Gauge Percentage](Gauge_Percentage_Component.md)\n - [Gauge Fraction](Gauge_Fraction_Component.md)\n - [Gauge design guidance](sail/ux-gauge.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"percentage\", \"name\": \"Percentage\", \"types\": \"Number (Decimal)\", \"description\": \"Number to display between 0 and 100.\"}, {\"keyword\": \"primaryText\", \"name\": \"Primary Text\", \"types\": \"Text\", \"description\": \"Optional text to display on the first line inside the gauge. Create using plain text, [a!gaugeIcon()](Gauge_Icon_Component.md), [a!gaugePercentage()](Gauge_Percentage_Component.md), or [a!gaugeFraction()](Gauge_Fraction_Component.md).\\n\"}, {\"keyword\": \"secondaryText\", \"name\": \"Secondary Text\", \"types\": \"Text\", \"description\": \"Optional text to display on the second line inside the gauge.\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Determines the color. Access the percentage using fv!percentage. Valid values: Any valid hex color or `\\\"ACCENT\\\"` (default), `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, `\\\"WARN\\\"`.\\n\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the size of the gauge. Valid values: `SMALL`, `MEDIUM` (default), `LARGE`.\\n\"}, {\"keyword\": \"align\", \"name\": \"Align\", \"types\": \"Text\", \"description\": \"Determines alignment of the gauge. Valid values: `START`, `CENTER` (default), `END`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display as a tooltip on the gauge.\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Using the percentage parameter\n \n - If the *percentage* value is negative or null, the gauge shows with 0% of the circle complete.\n - If the *percentage* value is greater than 100, the gauge shows with 100% of the circle complete.\n \n ### Editing the gauge primary text\n \n The gauge configuration pane contains a step-by-step designer to help you quickly try out all Primary Text formats. We recommend you use this designer to select the format that works best for your gauge.\n ![gif of editing the value in the middle of the gauge using design mode](images/Gauge_Design.gif){:.screenshot}\n \n ### Formatting primary text width and color\n \n - If custom primaryText or secondaryText does not fit within the gauge, it is truncated.\n - If the primaryText is formatted using [a!gaugeIcon()](Gauge_Icon_Component.md), [a!gaugePercentage()](Gauge_Percentage_Component.md), or [a!gaugeFraction()](Gauge_Fraction_Component.md), it will resize to fit within the circle.\n - To conditionally set the color of the gauge, use `fv!percentage` as shown in the \"Gauge Setting Color Based on Percentage\" example below.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Gauge showing fraction complete\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n =a!gaugeField(\n   label: \"Evaluations Completed\",\n   percentage: (25 / 26) * 100,\n   primaryText: a!gaugeFraction(denominator: 26)\n )\n {% endsailbox %}\n \n \n ### Gauge showing percent complete\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n a!gaugeField(\n   label: \"Evaluations Completed\",\n   percentage: (25 / 26) * 100,\n   primaryText: a!gaugePercentage()\n )\n {% endsailbox %}\n \n ### Gauge showing icon with secondary text\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n a!gaugeField(\n   label: \"Evaluations Completed\",\n   percentage: (25 / 26) * 100,\n   primaryText: a!gaugeIcon(icon: \"PENCIL\"),\n   secondaryText: \"25 of 26\"\n )\n {% endsailbox %}\n \n ### Gauge setting color based on percentage\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n a!gaugeField(\n   label: \"Evaluations Completed\",\n   percentage: (25 / 26) * 100,\n   primaryText: a!gaugepercentage(),\n   color: if(fv!percentage > 50, \"POSITIVE\", \"NEGATIVE\")\n   )\n {% endsailbox %}"}, {"doc": "Dropdown_Component.md", "content": "---\n layout: function\n title: Dropdown Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a list of choices for the user to select one item and saves a value\n   based on the selected choice.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!dropdownField\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label\n     alongside the component starting at the edge of the page.\\n  - `\\\"COLLAPSED\\\"`\n     Hides the label. The label will still be read by screen readers; see [accessibility\n     considerations](building_accessible_applications.md) for more information.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: choiceValues\n   name: Choice Values\n   types: List of Variant\n   description: Array of values associated with the available choices.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display when nothing is selected and the value is null.\n - keyword: value\n   name: Selected Value\n   types: Any Type\n   description: Value of the choice to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Selection To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice value when\n     the user changes the selection. Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md)\n     for more information about how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: searchDisplay\n   name: Search Display\n   types: Text\n   description: 'Determines when a search box displays above the options. Valid values:\n     `\"AUTO\"` (default), `\"ON\"`, `\"OFF\"`. When set to `\"AUTO\"`, the search box displays\n     if there are more than 11 options.\n \n     '\n reftype: sailcomponent\n scdisplayname: Dropdown\n space: sail_component\n ---\n \n ## Function\n \n function name: a!dropdownField \n  function syntax: a!dropdownField (label,labelPosition,instructions,required,disabled,choiceLabels,choiceValues,placeholder,value,validations,saveInto,validationGroup,requiredMessage,helpTooltip,accessibilityText,showWhen,searchDisplay)\n \n Displays a list of choices for the user to select one item and saves a value based on the selected choice.\n \n If the user may select none, one, or many of the choices, use either the [checkbox component](Checkbox_Component.md) or a [multiple dropdown component](Multiple_Dropdown_Component.md).\n \n If there aren't many choices and users would benefit from easily seeing them all at once, consider using [radio buttons](Radio_Button_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"choiceValues\", \"name\": \"Choice Values\", \"types\": \"List of Variant\", \"description\": \"Array of values associated with the available choices.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display when nothing is selected and the value is null.\"}, {\"keyword\": \"value\", \"name\": \"Selected Value\", \"types\": \"Any Type\", \"description\": \"Value of the choice to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice value when the user changes the selection. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md) for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"searchDisplay\", \"name\": \"Search Display\", \"types\": \"Text\", \"description\": \"Determines when a search box displays above the options. Valid values: `\\\"AUTO\\\"` (default), `\\\"ON\\\"`, `\\\"OFF\\\"`. When set to `\\\"AUTO\\\"`, the search box displays if there are more than 11 options.\\n\"}]\n \n ## Usage considerations\n \n ### Using the placeholder parameter\n \n - To allow users on web to clear the selected value, text must be specified for the `placeholder` parameter. Users can always clear the value on the Appian for Mobile application.\n - Passing a null value to the dropdown's *Selected Value* parameter causes the placeholder text to appear selected. The *Placeholder* and *Selected Value* parameter cannot both be null.\n \n ### Using the choiceLabels and choiceValues parameters\n \n - Options display in the same order as defined in the *Choice Labels* parameter. The *Choice Labels* parameter cannot be null.\n - *Choice Values* cannot contain nulls or duplicate values.\n - The *Choice Labels* list and *Choice Values* list must be the same length.\n \n ### Dropdowns vs pickers\n \n - If you are trying to decide whether to use a dropdown with search or a [picker component](Custom_Picker_Component.md), keep in mind that the dropdown search runs client-side and the performance cost of loading options happens on initial load whereas the picker search runs server-side and the performance cost of loading options happens while the user is searching. For small sets of options, we recommend using the dropdown component.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Dropdown with the first choice selected by default and search on auto\n \n Since the `searchDisplay` parameter is set to `AUTO` and the number of `choiceValues`  is less than 12, no search box will be displayed.\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: \"en_US\",\n   a!dropdownField(\n     label: \"Language\",\n     instructions: \"In which language are you most proficient?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language,\n     placeholder: \"Select a language\",\n     searchDisplay: \"AUTO\"\n   )\n )\n {% endsailbox %}\n \n Since the `searchDisplay` parameter is set to `AUTO` and the number of `choiceValues`  is more than 11, a search box will be displayed.\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: \"en_US\",\n   a!dropdownField(\n     label: \"Language\",\n     instructions: \"In which language are you most proficient?\",\n     choiceLabels: {\n       \"English (US)\",\n       \"Arabic\",\n       \"Chinese (Simplified)\",\n       \"Chinese (Traditional)\",\n       \"Spanish\",\n       \"French\",\n       \"German\",\n       \"Japanese\",\n       \"Korean\",\n       \"Polish\",\n       \"Portuguese\",\n       \"Russian\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"ar\",\n       \"zh_CN\",\n       \"zh_HK\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\",\n       \"ja\",\n       \"ko\",\n       \"pl\",\n       \"pt\",\n       \"ru\"\n     },\n     value: local!language,\n     saveInto: local!language,\n     placeholder: \"Select a language\",\n     searchDisplay: \"AUTO\"\n   )\n )\n {% endsailbox %}\n \n \n ### Dropdown with no choice selected by default and search on\n \n Since the `searchDisplay` parameter is set to `ON`, even though the number of `choiceValues`  is less than 12, a search box will be displayed.\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: null,\n   a!dropdownField(\n     label: \"Language\",\n     instructions: \"In which language are you most proficient?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language,\n     placeholder: \"Select a language\",\n     searchDisplay: \"ON\"\n   )\n )\n {% endsailbox %}"}, {"doc": "Tree_Browser_Node_Component.md", "content": "---\n layout: function\n title: Hierarchy Browser Node (Tree) Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Returns a Tree Node, used in the Node Configurations parameter of the Tree\n   Browser Component to determine how items in the hierarchy are displayed.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!hierarchyBrowserFieldTreeNode\n fncsubcat: Browsers\n parameters:\n - keyword: id\n   name: Identifier\n   types: Any Type\n   description: Required unique identifier of the node. This value only needs to be\n     unique within the nodes level.\n - keyword: label\n   name: Label\n   types: Text\n   description: Required text to display in the node.\n - keyword: description\n   name: Description\n   types: Text\n   description: Text to display below the node label.\n - keyword: details\n   name: Details\n   types: Text\n   description: Text to display below the node description.\n - keyword: image\n   name: Image\n   types: Image\n   description: \"Required image to display in the node, created with: \\n  - [a!documentImage()](Document_Image_Component.md)\\n\n     \\ - [a!userImage()](User_Image_Component.md) \\n  - [a!webImage()](Web_Image_Component.md)\\n\"\n - keyword: link\n   name: Link\n   types: Array of Links\n   description: \"Optional link to display in the node  s label title. Create links\n     with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n\n     \\ - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n\n     \\ - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n\n     \\ - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n\n     \\ - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n\n     \\ - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: isDrillable\n   name: Node is drillable\n   types: Boolean\n   description: \"If true, clicking the node will drill into it, saving the tree browsers\n     navigation path and revealing another level to the user. If false, clicking the\n     node's will not reveal another level, but the navigation path will still be saved\n     (default: true). \\n\"\n - keyword: nextLevelCount\n   name: Next Level Count\n   types: Integer\n   description: Optional count of nodes that would be displayed in the next level were\n     this node in the navigation path.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Hierarchy Browser Node (Tree)\n scsubcat: Hierarchy_Browser_Elements\n space: sail_component\n ---\n \n This component is used within the [Tree Browser Component](Tree_Browser_Component.md).\n \n {% comment %}\n For an interface recipe using the hierarchy browser tree, see the [Contact Management application page](Hierarchy_Browser_Tree_-_Contact_Management.md). \n {% endcomment %}\n \n For more information on how the hierarchy browser tree works, see the [detailed explanation](Tree_Browser_Component.md#breakdown).\n \n ## Function\n \n function name: a!hierarchyBrowserFieldTreeNode \n  function syntax: a!hierarchyBrowserFieldTreeNode (id,label,description,details,image,link,isDrillable,nextLevelCount,showWhen)\n \n Returns a Tree Node, used in the Node Configurations parameter of the [Tree Browser Component](Tree_Browser_Component.md) to determine how items in the hierarchy are displayed.\n \n ## Parameters\n \n [{\"keyword\": \"id\", \"name\": \"Identifier\", \"types\": \"Any Type\", \"description\": \"Required unique identifier of the node. This value only needs to be unique within the nodes level.\"}, {\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Required text to display in the node.\"}, {\"keyword\": \"description\", \"name\": \"Description\", \"types\": \"Text\", \"description\": \"Text to display below the node label.\"}, {\"keyword\": \"details\", \"name\": \"Details\", \"types\": \"Text\", \"description\": \"Text to display below the node description.\"}, {\"keyword\": \"image\", \"name\": \"Image\", \"types\": \"Image\", \"description\": \"Required image to display in the node, created with: \\n  - [a!documentImage()](Document_Image_Component.md)\\n  - [a!userImage()](User_Image_Component.md) \\n  - [a!webImage()](Web_Image_Component.md)\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Array of Links\", \"description\": \"Optional link to display in the node  s label title. Create links with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"isDrillable\", \"name\": \"Node is drillable\", \"types\": \"Boolean\", \"description\": \"If true, clicking the node will drill into it, saving the tree browsers navigation path and revealing another level to the user. If false, clicking the node's will not reveal another level, but the navigation path will still be saved (default: true). \\n\"}, {\"keyword\": \"nextLevelCount\", \"name\": \"Next Level Count\", \"types\": \"Integer\", \"description\": \"Optional count of nodes that would be displayed in the next level were this node in the navigation path.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n \n ## Usage considerations\n \n ### Drillable and non-drillable elements  \n \n You can see some of these terms and parameters labeled in the following screenshot.\n \n ![screenshot of a tree browser with annotated nodes](images/HierarchyBrowserTreeNodes.png){:.screenshot}\n \n ### Using links and data\n \n - The hierarchy browser tree component does not permit links in images in node configurations.\n - The *identifier* field can be any value, but using long strings or large data types could cause performance problems. We recommended using a data type's primary key, if available.\n \n ### Using the nodeConfigs parameter\n \n - The variable `fv!nodeValue` is only available when the node is used in either the *nodeConfigs* or *nextColumnValues* parameters of the browser.\n - A hierarchy browser tree node can only be displayed if passed to the *nodeConfigs* parameter of the hierarchy browser tree.\n \n ## Examples\n \n *For an example of how to configure a hierarchy browser tree node, see the example in the [Tree Browser Component](Tree_Browser_Component.md) page.*"}, {"doc": "Record_Link_Component.md", "content": "---\n layout: function\n title: Record Link Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Defines a link to a record view configured in the record type.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!recordLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text displayed as the link name the user clicks on.\n - keyword: recordType\n   name: Record Type\n   types: RecordType\n   description: The record type of the linked record view. Use the `recordType!` domain\n     to reference the record type.\n - keyword: identifier\n   name: Identifier\n   types: Any Type\n   description: \"The record ID (identifier) identifies the individual record within\n     the record type. \\n  - For entity-backed records, record ID is the primary key\n     in the data store entity. \\n  - For process-backed records, record ID is the ID\n     for the process. \\n  - For service-backed records, record ID is the value returned\n     to the ID field of the DataSubset produced by the record's source expression.\\n\"\n - keyword: dashboard\n   name: Dashboard\n   types: Text\n   description: \"The URL of the dashboard to open for the record. Default is `\\\"summary\\\"`.\n     The URL Stub for each configured record view can be found on the record type object's\n     Views page.  \\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: openLinkIn\n   name: Open Link In\n   types: Text\n   description: '(Browser-Only) Determines where the linked content should open. Valid\n     values: `\"SAME_TAB\"` (default), `\"NEW_TAB\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Record Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!recordLink \n  function syntax: a!recordLink (label,recordType,identifier,dashboard,showWhen,openLinkIn)\n \n Defines a link to a record view configured in the record type. Links can be used in tags, charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [Record Type](Appian_Data_Types.md#record-type)\n - [Link](Link_Component.md)\n - [Read-Only Grid](Paging_Grid_Component.md)\n - [Images](Image_Component.md)\n - [Tag Item](Tag_Item_Component.md)\n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text displayed as the link name the user clicks on.\"}, {\"keyword\": \"recordType\", \"name\": \"Record Type\", \"types\": \"RecordType\", \"description\": \"The record type of the linked record view. Use the `recordType!` domain to reference the record type.\"}, {\"keyword\": \"identifier\", \"name\": \"Identifier\", \"types\": \"Any Type\", \"description\": \"The record ID (identifier) identifies the individual record within the record type. \\n  - For entity-backed records, record ID is the primary key in the data store entity. \\n  - For process-backed records, record ID is the ID for the process. \\n  - For service-backed records, record ID is the value returned to the ID field of the DataSubset produced by the record's source expression.\\n\"}, {\"keyword\": \"dashboard\", \"name\": \"Dashboard\", \"types\": \"Text\", \"description\": \"The URL of the dashboard to open for the record. Default is `\\\"summary\\\"`. The URL Stub for each configured record view can be found on the record type object's Views page.  \\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"openLinkIn\", \"name\": \"Open Link In\", \"types\": \"Text\", \"description\": \"(Browser-Only) Determines where the linked content should open. Valid values: `\\\"SAME_TAB\\\"` (default), `\\\"NEW_TAB\\\"`.\\n\"}]\n \n ## Usage considerations\n \n ### Using record link with other components\n \n Record links can be used inside:\n \n - [links](Link_Component.md)\n - [grid text columns](Grid_Text_Column_Component.md)\n - [document images](Document_Image_Component.md)\n - [user images](User_Image_Component.md)\n - [web images](Web_Image_Component.md)\n - [chart series](Chart_Series_Component.md)\n - [tag items](Image_Component.md)\n - [rich text](Rich_Text_Component.md)\n - [styled icons](Styled_Icon_Component.md)\n - [card layouts](card_layout.md)\n - [milestones](Milestone_Component.md)\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n Record type object references are specific to each environment. If you copy and paste these examples into your interface, they will not evaluate. Use them as a references only.\n \n ### Record link that links to the summary dashboard of an entity-backed record\n \n ```sail \n   a!recordLink(\n   label: \"Employee\",\n   /* For the \"recordType\" parameter below, replace the record type reference (recordType!Employee) with a \n    * valid record type reference in your environment. \n    */\n    recordType: recordType!Employee,\n    identifier: \"5\"\n )\n ```\n \n ### Record link that links to the specific dashboard of a process-backed record\n \n ```sail \n   a!recordLink(\n   label: \"Employee\",\n   /* For the \"recordType\" parameter below, replace the record type reference (recordType!Process) with a \n    * valid record type reference in your environment. \n    */\n    recordType: recordType!Process, \n    identifier: \"268435504\",\n    dashboard: \" _KcRefg\"\n )\n ```"}, {"doc": "Tag_Component.md", "content": "---\n layout: function\n title: Tag Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a list of short text labels with colored background to highlight\n   important attributes.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!tagField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: tags\n   name: Tags\n   types: List of Variant\n   description: 'List of tags to display. Configured using [a!tagItem()](Tag_Item_Component.md).\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the image(s). Valid values: `\"START\"`, `\"CENTER\"`,\n     `\"END\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the size of the tags. Valid values: `\"SMALL\"`, `\"STANDARD\"`\n     (default).\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Tag Component\n space: sail_component\n ---\n \n ## Function\n \n function name: a!tagField \n  function syntax: a!tagField (label,labelPosition,instructions,helpTooltip,tags,align,accessibilityText,size,showWhen,marginAbove,marginBelow)\n \n Displays a list of short text labels with colored background to highlight important attributes.\n \n **See also**: [Tag Item](Tag_Item_Component.md), [Tag design guidance](sail/ux-tags.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"tags\", \"name\": \"Tags\", \"types\": \"List of Variant\", \"description\": \"List of tags to display. Configured using [a!tagItem()](Tag_Item_Component.md).\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the image(s). Valid values: `\\\"START\\\"`, `\\\"CENTER\\\"`, `\\\"END\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the size of the tags. Valid values: `\\\"SMALL\\\"`, `\\\"STANDARD\\\"` (default).\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Using the tag parameter with text values\n \n - If the *tags* parameter is null, contains an empty array, or only contains tag items with no *text* value, then the label and instructions render with no tags displayed.\n - If multiple tags are displayed in a narrow container, tags can wrap onto multiple lines. An individual tag will never be split onto two lines.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Display tags with custom colors\n \n {% sailbox 600 %}\n a!tagField(\n   labelPosition: \"COLLAPSED\",\n   tags: {\n     a!tagItem(\n       text: \"Silver Member\",\n       backgroundColor: \"#aaa9ad\",\n       textColor: \"#ffffff\"\n     ),\n     a!tagItem(\n       text: \"Corporate Partner\",\n       backgroundColor: \"#990099\"\n     )\n   },\n   size: \"STANDARD\"\n )\n {% endsailbox %}\n \n \n ### Display multiple tags using looping\n \n {% sailbox 600 %} \n a!localVariables(\n   local!skills: {\"Problem-Solving\", \"Communication\", \"Creativity\", \"Project Management\"},\n   a!tagField(\n     label: \"Skills\",\n     labelPosition: \"ABOVE\",\n     tags: a!forEach(\n       items: local!skills,\n       expression: a!tagItem(\n         text: fv!item,\n         backgroundColor: \"ACCENT\"\n       )\n     ),\n     size: \"STANDARD\"\n   )\n )\n {% endsailbox %}"}, {"doc": "Document_and_Folder_Browser_Component.md", "content": "---\n layout: function\n title: Document and Folder Browser Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays the contents of a folder and allows users to navigate through a\n   series of folders to find and select a folder or document.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!documentAndFolderBrowserFieldColumns\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: 'Determines where the label appears. Valid values: `\"ABOVE\"` (default),\n     `\"ADJACENT\"`, `\"JUSTIFIED\"`,`\"COLLAPSED\"`.\n \n     '\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: rootFolder\n   name: Root Folder\n   types: Any Type\n   description: The contents of the specified folder or knowledge center are displayed\n     in the first column of the browser.\n - keyword: navigationValue\n   name: Navigation Folder Value\n   types: Document or Folder\n   description: The folder that has been navigated to whose contents are displayed\n     in the rightmost column.\n - keyword: navigationSaveInto\n   name: Save Navigation Folder To\n   types: List of Save\n   description: Variable or list of variables to update when the navigation folder\n     changes.\n - keyword: selectionValue\n   name: Selection Value\n   types: Document or Folder\n   description: The document or folder to show as selected.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: Variable or list of variables to update when a document or folder is\n     clicked.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines whether selection is enabled. Default: false.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the component. Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n reftype: sailcomponent\n scdisplayname: Document and Folder Browser\n space: sail_component\n ---\n \n ## Function\n \n function name: a!documentAndFolderBrowserFieldColumns \n  function syntax: a!documentAndFolderBrowserFieldColumns (label,labelPosition,instructions,helpTooltip,rootFolder,navigationValue,navigationSaveInto,selectionValue,selectionSaveInto,showWhen,readOnly,height,accessibilityText)\n \n Displays the contents of a folder and allows users to navigate through a series of folders to find and select a folder or document.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: `\\\"ABOVE\\\"` (default), `\\\"ADJACENT\\\"`, `\\\"JUSTIFIED\\\"`,`\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"rootFolder\", \"name\": \"Root Folder\", \"types\": \"Any Type\", \"description\": \"The contents of the specified folder or knowledge center are displayed in the first column of the browser.\"}, {\"keyword\": \"navigationValue\", \"name\": \"Navigation Folder Value\", \"types\": \"Document or Folder\", \"description\": \"The folder that has been navigated to whose contents are displayed in the rightmost column.\"}, {\"keyword\": \"navigationSaveInto\", \"name\": \"Save Navigation Folder To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when the navigation folder changes.\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"Document or Folder\", \"description\": \"The document or folder to show as selected.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a document or folder is clicked.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines whether selection is enabled. Default: false.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the component. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}]\n \n ## Usage considerations\n \n ### Displaying values and offline use\n \n - Each column displays items in alphabetical order, with folders always listed first.\n - Avoid using this component for offline mobile forms because tapping on a folder does not display its contents.\n \n ### Permissions\n \n - The current user must have permission to view the selected items.\n - Within a folder or knowledge center, the user can only see contents for which they have permission to view.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Document and folder browser with document and folder picker\n \n ```sail \n a!localVariables(\n   local!selection,\n   local!navigation,\n   local!rootFolder: cons!REPORTS_FOLDER,\n   a!sectionLayout(\n     label: \"System Report Picker\",\n     contents: {\n       a!documentAndFolderBrowserFieldColumns(\n         rootfolder: local!rootFolder,\n         navigationvalue: local!navigation,\n         navigationsaveinto: local!navigation,\n         selectionvalue: local!selection,\n         selectionsaveinto: local!selection,\n         \n       ),\n       a!pickerFieldDocumentsAndFolders(\n         label: \"Selection\",\n         labelPosition: \"JUSTIFIED\",\n         maxselections: 1,\n         folderfilter: local!rootFolder,\n         value: local!selection,\n         saveInto: local!selection\n       )\n     }\n   )\n )\n ```\n \n A document and folder browser similar to the one pictured below displays. Note that your folder contents may differ from the example:\n \n ![An example of the document browser component](images/doc-and-folder-browser-example.png){:.screenshot}"}, {"doc": "Multiple_Dropdown_By_Index_Component_20r2.md", "content": "---\n layout: function\n title: a!multipleDropdownFieldByIndex_20r2() Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays a long list of choices from which the user may select none, one,\n   or many items and saves the indices of the selected choices.\n category: function_page\n compatibility: -crf\n fncname: a!multipleDropdownFieldByIndex_20r2\n fncsubcat: Selection\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scdisplayname: Multiple Dropdown By Index\n evolved_fncname: a!multipleDropdownFieldByIndex\n evolved_reason: Added an optional search box.\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.'\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.'\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty.\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: value\n   name: Selected Indices\n   types: List of Number (Integer)\n   description: Indices of choices to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the choice indexes when\n     the user changes the selections. Use a!save() to save a modified or alternative\n     value to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.'\n ---\n \n ## Multiple dropdown by index\n \n **Function**: `a!multipleDropdownFieldByIndex_20r2()`\n \n Displays a long list of choices from which the user may select none, one, or many items and saves the indices of the selected choices. To save a value instead of the index, use [multiple dropdown](Multiple_Dropdown_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty.\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"value\", \"name\": \"Selected Indices\", \"types\": \"List of Number (Integer)\", \"description\": \"Indices of choices to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice indexes when the user changes the selections. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\"}]\n \n **Notes**\n \n - If you set *Label Position* to `\"ADJACENT\"` or `\"ABOVE\"`, but do not give a value for *Label*, a space still displays to the left-side or above, respectively, of the component as if there was a label displayed. To ensure the component appears to the far left when *Label* has no value, use `\"COLLAPSED\"` for *Label Position*.\n - Choices display in the same order as defined in the *Choice Labels* parameter. The *Choice Labels* argument cannot be null.\n - If a single item is selected, the system saves a single-item array.\n - If no selection is made, the system saves a null value into the component's *Save Selection To* field. If a single item is selected, the system saves a single-item array.\n - Choice index numbers start at 1. Indices passed *Selected Indices* cannot be less than 1 or greater than the length of the *Choice Labels* array.\n - The choices at the indices passed to the *Selected Indices* parameter display as selected by default. If null is passed to *Selected Indices*, none of the options are selected. However, if a list is passed to *Selected Indices*, it cannot contain a null value."}, {"doc": "Event_Data_Component.md", "content": "---\n layout: function\n title: Event Data Component\n category: function_page\n excerpt: This function determines the event data to display for a single record type\n   in the [Event History List component](Event_History_List_Component.md).\n fnccat: Interface_Component\n fncsubcat: Grids and Lists\n fncexample: Click on the function name for examples.\n fncname: a!eventData\n compatibility: -crf, -om, -portal\n parameters:\n - keyword: recordType\n   types: Record Type\n   name: Record Type\n   description: \"A reference to a record type, configured using the `recordType!` domain.\n     For example, `recordType!Order`. If you configured [record events](record-events.md),\n     use the Event History record type. \\n\"\n - keyword: filters\n   types: Any Type\n   name: Filters\n   description: 'A single logical expression or a list of query filters, which are\n     applied together with an `AND` operation, can be provided to apply additional\n     filters to the record set. Queries also inherit the [record-level security](record-level-security.md)\n     or [default filters](records-filter-source-data.md#default-filters) defined on\n     the referenced record type. When filtering, use only record fields or related\n     record fields from the referenced record type. Record types sourced from a web\n     service or other expression only support this parameter if data sync is enabled.\n \n     '\n - keyword: timestamp\n   types: Record Field\n   name: Timestamp\n   description: 'A record field of type Date and Time, Date, or Time that displays\n     the timestamp when an event occurred. The list of event data will be sorted in\n     descending order by this field. If you generated an Event History record type,\n     use the `timestamp` field from that record type. For example, `recordType!Order\n     Event History.fields.timestamp`.\n \n     '\n - keyword: user\n   types: Any Type\n   name: User\n   description: 'A record field of type User that displays who completed the event.\n     If you generated an Event History record type, use the `user` field from that\n     record type. For example, `recordType!Order Event History.fields.user`.\n \n     '\n - keyword: eventTypeName\n   types: Any Type\n   name: Event Type Name\n   description: 'A record field of type Text that displays the type of event that occurred.\n     If you generated an Event Type Lookup record type, use the `eventType` relationship\n     on the Event History record type to select the `name` field. You must use the\n     `fv!data` prefix to access the data in this field. For example, `fv!data[recordType!Order\n     Event History.relationships.eventType.fields.name]`.\n \n     '\n - keyword: details\n   types: Text\n   name: Additional Details\n   description: 'Any additional information about the event. If you generated an Event\n     History record type, this field is not automatically included, but can be manually\n     added by a developer. You must use the `fv!data` prefix to access the data in\n     this field. For example, `fv!data[recordType!Order Event History.fields.details]`.\n \n     '\n - keyword: recordTypeForTag\n   types: Record Type\n   name: Record Type for Tag\n   description: \"The record type linked in the tag for an event. \\n\"\n - keyword: recordIdentifier\n   types: Record Field\n   name: Record Identifier for Tag\n   description: \"The record identifier that links your Event History record type to\n     your base record type. \\n\"\n reftype: sailcomponent\n scdisplayname: Event Data\n scsubcat: Event_History_List_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!eventData \n  function syntax: a!eventData (recordType,filters,timestamp,user,eventTypeName,details,recordTypeForTag,recordIdentifier)\n \n This function determines the event data to display for a single record type in the [Event History List component](Event_History_List_Component.md).\n \n **See also**: [Configure Record Events](record-events.md)\n \n ## Parameters\n \n [{\"keyword\": \"recordType\", \"types\": \"Record Type\", \"name\": \"Record Type\", \"description\": \"A reference to a record type, configured using the `recordType!` domain. For example, `recordType!Order`. If you configured [record events](record-events.md), use the Event History record type. \\n\"}, {\"keyword\": \"filters\", \"types\": \"Any Type\", \"name\": \"Filters\", \"description\": \"A single logical expression or a list of query filters, which are applied together with an `AND` operation, can be provided to apply additional filters to the record set. Queries also inherit the [record-level security](record-level-security.md) or [default filters](records-filter-source-data.md#default-filters) defined on the referenced record type. When filtering, use only record fields or related record fields from the referenced record type. Record types sourced from a web service or other expression only support this parameter if data sync is enabled.\\n\"}, {\"keyword\": \"timestamp\", \"types\": \"Record Field\", \"name\": \"Timestamp\", \"description\": \"A record field of type Date and Time, Date, or Time that displays the timestamp when an event occurred. The list of event data will be sorted in descending order by this field. If you generated an Event History record type, use the `timestamp` field from that record type. For example, `recordType!Order Event History.fields.timestamp`.\\n\"}, {\"keyword\": \"user\", \"types\": \"Any Type\", \"name\": \"User\", \"description\": \"A record field of type User that displays who completed the event. If you generated an Event History record type, use the `user` field from that record type. For example, `recordType!Order Event History.fields.user`.\\n\"}, {\"keyword\": \"eventTypeName\", \"types\": \"Any Type\", \"name\": \"Event Type Name\", \"description\": \"A record field of type Text that displays the type of event that occurred. If you generated an Event Type Lookup record type, use the `eventType` relationship on the Event History record type to select the `name` field. You must use the `fv!data` prefix to access the data in this field. For example, `fv!data[recordType!Order Event History.relationships.eventType.fields.name]`.\\n\"}, {\"keyword\": \"details\", \"types\": \"Text\", \"name\": \"Additional Details\", \"description\": \"Any additional information about the event. If you generated an Event History record type, this field is not automatically included, but can be manually added by a developer. You must use the `fv!data` prefix to access the data in this field. For example, `fv!data[recordType!Order Event History.fields.details]`.\\n\"}, {\"keyword\": \"recordTypeForTag\", \"types\": \"Record Type\", \"name\": \"Record Type for Tag\", \"description\": \"The record type linked in the tag for an event. \\n\"}, {\"keyword\": \"recordIdentifier\", \"types\": \"Record Field\", \"name\": \"Record Identifier for Tag\", \"description\": \"The record identifier that links your Event History record type to your base record type. \\n\"}]\n \n ## Usage considerations\n \n ### Where to use this function\n \n This function can only be used to configure the [Event History List component](Event_History_List_Component.md). For the fastest configuration, we recommend using Design Mode to configure this component.\n \n ### Recommended record types\n \n You can select any record type in the *recordType* parameter, but this function works best when you select an Event History record type that's used in your [record events](record-events.md) configuration. \n \n If you [generated an Event History record type](record-events.md#generated-event-history-record-type), you can easily map those generated fields to the parameters in this function. \n \n For example, let's say you configured record events on an Order record type by generating an Event History record type and an Event Type Lookup record type. To configure this function to display the order event history, you'd select the following fields:\n \n |Parameter|Example Event History Record Field|\n |-|-|\n |*timestamp*| `recordType!Order Event History.fields.timestamp`.|\n |*user*| `recordType!Order Event History.fields.user`|\n |*eventTypeLookup*|`recordType!Order Event History.relationships.eventType.fields.name`|\n \n ## Examples\n \n See the [Event History List component](Event_History_List_Component.md) for examples using this function."}, {"doc": "Record_Picker_Component.md", "content": "---\n layout: function\n title: Record Picker Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for the selection of one or more records,\n   filtered by a single record type. Suggestions and picker tokens use the title of\n   the record.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldRecords\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n \n     '\n - keyword: recordType\n   name: Record Type\n   types: RecordType\n   description: 'Required, singular. Filters picker to select records of this type.\n \n     '\n - keyword: filters\n   name: Filters\n   types: Any Type\n   description: 'A single [logical expression](fnc_system_a_querylogicalexpression.md)\n     or a list of [query filters](fnc_system_a_queryfilter.md) can be provided to apply\n     additional filters to the record set. Queries inherit the default filters defined\n     on the referenced record type. Service-backed record types can only be filtered\n     using a logical expression if data sync is enabled.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: 'Array of currently selected records. This will be either a List of\n     Text or a List of Number (Integer), depending on the recordType selected.\n \n     '\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected records\n     when the user selects or removes a record. Use a!save() to save a modified or\n     alternative value to a variable.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: showRecordLinks\n   name: Show Record Links\n   types: Boolean\n   description: \"Determines whether selected records display links to their summary\n     views. Default: true.     \\n\"\n reftype: sailcomponent\n scdisplayname: Record Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldRecords \n  function syntax: a!pickerFieldRecords (label,labelPosition,instructions,helpTooltip,placeholder,maxSelections,recordType,filters,value,saveInto,required,requiredMessage,readOnly,disabled,validations,validationGroup,accessibilityText,showWhen,showRecordLinks)\n \n Displays an autocompleting input for the selection of one or more records, filtered by a single record type. Suggestions and picker tokens use the title of the record.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\\n\"}, {\"keyword\": \"recordType\", \"name\": \"Record Type\", \"types\": \"RecordType\", \"description\": \"Required, singular. Filters picker to select records of this type.\\n\"}, {\"keyword\": \"filters\", \"name\": \"Filters\", \"types\": \"Any Type\", \"description\": \"A single [logical expression](fnc_system_a_querylogicalexpression.md) or a list of [query filters](fnc_system_a_queryfilter.md) can be provided to apply additional filters to the record set. Queries inherit the default filters defined on the referenced record type. Service-backed record types can only be filtered using a logical expression if data sync is enabled.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"Array of currently selected records. This will be either a List of Text or a List of Number (Integer), depending on the recordType selected.\\n\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected records when the user selects or removes a record. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"showRecordLinks\", \"name\": \"Show Record Links\", \"types\": \"Boolean\", \"description\": \"Determines whether selected records display links to their summary views. Default: true.     \\n\"}]\n \n ## Usage considerations\n \n ### Suggestions and permissions\n \n - Suggestions are based on the fields used in the record title. However, if you use a service-backed record type without data sync enabled, the search is based on the search property configured in the [source expression](configure-record-data-source.md#record-data-source-(sync-enabled)). \n - Only records that the viewing user has permissions to see appear in the suggestions list, as determined by the [record-level security](record-level-security.md) or the default filters in the record type.\n \n ### Selections and placeholders\n \n - Any nulls in the array passed to selected records are not displayed. A `[Not Available]` token is displayed for any invalid identifiers in the selected records array.\n - The component always saves an array regardless of how many selections have been made.\n - By default, all selected record tokens include a link to the record unless *showRecordLinks* is false. Consider setting *showRecordLinks* to false when selecting reference data from the picker. See [Select a record from a record type without a link to the record](#select-a-record-from-a-record-type-without-a-link-to-the-record) for an example.\n - This picker cannot be used to selected records of a rule-backed record type (deprecated).\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Service-backed record types\n \n If you want to use a [record picker](Record_Picker_Component.md) with a service-backed record type, it should work as expected, without the need to change your record definition. But, in case something is not working as desired, here are a few notes on how the record picker works and how you can tweak your record design to optimize for a record picker.\n \n - When a user types text into the picker field, it is equivalent to a user typing text into the search bar of the record list. The difference is that every new letter in the picker is a new call to the web service, whereas in the record list, the user must hit enter before any calls are made. This means increased load on the web service.\n - Once a record is picked, the component makes one call to the web service for every picked item to get the information displayed in the label. This could be problematic because there is often overhead in web service calls. For that reason, only use the record picker when the number of items you expect users to pick at one time is low.\n - Filters applied in the component are processed in the same way that default filters and user filters are processed. This means that any new filters in the picker needed to be handled accordingly in your source expression and data retrieval rule.\n \n If this picker does not meet your needs, use a [custom picker](Custom_Picker_Component.md).\n \n For more information about records, see [Appian Records](Record_Type_Object.md).\n \n ## Examples\n \n *Record type object references are specific to each environment. If you copy and paste these examples into an interface, they will not evaluate. Use them as a references only.*\n \n ### Select a record from a record type \n \n ```sail \n a!localVariables(\n   local!storedRecord,\n   a!pickerFieldRecords(\n     label: \"Choose an Employee Record\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Employee)  \n      * with a valid record type reference in your environment. \n      */\n     recordType: recordType!Employee,\n     value: local!storedRecord,\n     saveInto: local!storedRecord\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a record picker with a record from a record type selected](images/Record_picker_example_172.png){:.screenshot}\n \n ### Select a record from a record type with filters\n \n ```sail \n a!localVariables(\n   local!storedRecord,\n   a!pickerFieldRecords(\n     label: \"Choose an Employee Record\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Employee)  \n      * with a valid record type reference in your environment. \n      */\n     recordType: recordType!Employee,\n     filters: a!queryLogicalExpression(\n         operator: \"AND\",\n         filters: {\n           a!queryFilter(\n             field: recordType!Employee.fields.department,\n             operator: \"=\",\n             value: \"Engineering\"\n           ),\n           a!queryFilter(\n             field: recordType!Employee.fields.startDate,\n             operator: \">\",\n             value: date(2022, 1, 1)\n           )\n         }\n       ),\n     value: local!storedRecord,\n     saveInto: local!storedRecord\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a record picker with a filter and a record selected](images/Record_Picker_w_Filter_172.png){:.screenshot}\n \n ### Select a record from a record type without a link to the record\n \n ```sail\n a!localVariables(\n   local!storedRecord,\n     a!pickerFieldRecords(\n       label: \"Choose a Case Priority\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Priority)  \n      * with a valid record type reference in your environment. \n      */\n       recordType: recordType!Priority,\n       value: local!storedRecord,\n       saveInto: local!storedRecord,\n     /* Since the Priority record type only contains reference data (the different case priority levels), \n      * we can hide the record links to prevent users from navigating to their summary views.\n      */\n       showRecordLinks: false,\n     )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a record picker without a link to the selected record](images/Record_Picker_without_Link.png){:.screenshot}"}, {"doc": "User_and_Group_Picker_Component.md", "content": "---\n layout: function\n title: User and Group Picker Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for selecting one or more users or groups.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldUsersAndGroups\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n \n     '\n - keyword: groupFilter\n   name: Group Filter\n   types: Group\n   description: 'When present, only users or groups which are members of this group\n     are suggested.\n \n     '\n - keyword: value\n   name: Display Value\n   types: List of User or Group\n   description: Array of currently selected users or groups.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected users\n     or groups when the user selects or removes a user or group. Use a!save() to save\n     a modified or alternative value to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: User and Group Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldUsersAndGroups \n  function syntax: a!pickerFieldUsersAndGroups (label,instructions,required,readOnly,disabled,maxSelections,groupFilter,value,validations,saveInto,validationGroup,requiredMessage,labelPosition,placeholder,helpTooltip,accessibilityText,showWhen)\n \n Displays an autocompleting input for selecting one or more users or groups.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\\n\"}, {\"keyword\": \"groupFilter\", \"name\": \"Group Filter\", \"types\": \"Group\", \"description\": \"When present, only users or groups which are members of this group are suggested.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of User or Group\", \"description\": \"Array of currently selected users or groups.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected users or groups when the user selects or removes a user or group. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Saving and displaying values and placeholders\n \n - Any nulls in the array passed to *Selected Users or Groups* are not displayed.\n - The component always saves an array regardless of how many selections have been made.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Filtering and permissions\n \n - All user members are suggested when *groupfilter* is used, including users who are members of member groups. Both direct and indirect group members (groups that are members of groups that are members of the filter group) are suggested. The filter group is never suggested.\n - The user viewing the picker must have access to view users and groups passed to the value. Only users and groups that the viewing user has permissions to see appear in the suggestions list. When *groupFilter* is not null, the viewing user must have permission to view members of the filter group for any suggestions to be made."}, {"doc": "Event_History_List_Component.md", "content": "---\n layout: function\n title: Event History List\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays the event history for one or more record types.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!eventHistoryList\n fncsubcat: Grids and Lists\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the list label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values:\\n  - `ABOVE` (default)\n     Displays the label above the component.\\n  - `ADJACENT` Displays the label to\n     the left of the component.\\n  - `COLLAPSED` Hides the label. The label will still\n     be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `JUSTIFIED` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this list.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: emptyListMessage\n   name: Empty List Message\n   types: Text\n   description: Text to display in the list when no data is available. Default is `\"No\n     events to display\"`.\n - keyword: eventData\n   name: Event Data\n   types: List of Event Data\n   description: 'The record event data that populates the list, created using one or\n     more instances of [a!eventData()](Event_Data_Component.md).\n \n     '\n - keyword: eventStyle\n   name: Event Style\n   types: Text\n   description: 'Determines how the component displays. Valid values include: `\"PREVIEW_LIST\"`\n     (default), `\"FULL_LIST\"`, `\"TIMELINE\"`. The `\"PREVIEW_LIST\"` and `\"FULL_LIST\"`\n     styles are sometimes referred to collectively as the \"list styles.\" See the [UX\n     Design System](sail/ux-event-history-list.md) for best practices on when to use\n     which style.\n \n     '\n - keyword: formatTimestamp\n   name: Date Display\n   types: Text\n   description: 'Determines how the component formats the event data timestamp. Valid\n     values include: `\"NULL\"`, `\"DATE\"`, `\"DATE_TIME\"` (default), `\u201cDATE_TIME_TIMEZONE\u201d`.\n \n     '\n - keyword: displayUser\n   name: User Image Style\n   types: Text\n   description: 'Determines if and how to display user avatars. Valid values include:\n     `\"NONE\"`, `\"INITIALS\"` (default), `\"IMAGE\"`.\n \n     '\n - keyword: displayUserColorScheme\n   name: User Color Scheme\n   types: Any Type\n   description: 'If no profile picture is available, determines which color scheme\n     to use for users in the event history list. Valid values: `\"PARACHUTE\"` (default),\n     `\"VIBRANT\"`, `\"CLASSIC\"` or define a custom color scheme using [a!colorSchemeCustom()](Chart_Custom_Color_Scheme_Component.md).\n     See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: previewListPageSize\n   name: Preview List Page Size\n   types: Number (Integer)\n   description: 'The maximum number of rows to display in each page of the initial\n     list when the `\"PREVIEW_LIST\"` event style is selected. To set the paging for\n     the **View All** dialog, see *pageSize*. Valid values include 1-10. Default: 5.\n \n     '\n - keyword: pageSize\n   name: Page Size\n   types: Number (Integer)\n   description: 'The maximum number of rows to display in each page of the list when\n     the `\"FULL_LIST\"` or `\"TIMELINE\"` event style is selected. When the `\"PREVIEW_LIST\"`\n     event style is selected, this parameter applies to the list as it appears in the\n     **View More** dialog. Valid values include 1-100. Default: 10.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to `false`, the component is hidden and is not evaluated. Default: `true`.\n \n     '\n - keyword: refreshAlways\n   name: Refresh after each user interaction\n   types: Boolean\n   description: 'When true, *eventData* will be refreshed after each user interaction\n     and each interval refresh. Default: `false`.\n \n     '\n - keyword: refreshAfter\n   name: Refresh after record action completes\n   types: List of Text String\n   description: 'Refreshes *eventData* data each time a specified action completes.\n     Valid values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: refreshInterval\n   name: Refresh after an interval of time\n   types: Number (Decimal)\n   description: 'How often grid data gets refreshed in minutes. When null, *eventData*\n     will not be refreshed on an interval. Valid values: `\"0.5\"`, `\"1\"`, `\"2\"`, `\"3\"`,\n     `\"4\"`, `\"5\"`, `\"10\"`, `\"30\"`, and `\"60\"`.\n \n     '\n - keyword: refreshOnReferencedVarChange\n   name: Refresh after referenced variable changes\n   types: Boolean\n   description: 'When true, grid data will be refreshed each time the value of any\n     variable referenced in the _eventData_ parameter is updated. To refresh grid data\n     when another variable that is not used in the _eventData_ parameter changes, use\n     *refreshOnVarChange*. Default: `true`.\n \n     '\n - keyword: refreshOnVarChange\n   name: Refresh after variable changes\n   types: Any Type\n   description: 'Refreshes data each time any of these specific variables change. This\n     allows you to refresh the data when a variable that is not referenced in the _eventData_\n     parameter is updated. You can define a single variable (for example, `refreshOnVarChange:\n     local!var1`) or a list of variables (for example, `refreshOnVarChange: {local!var1,\n     local!var2}`).\n \n     '\n - keyword: userFilters\n   name: User Filters\n   types: List of Variant\n   description: 'List of user filter references to display, configured using the `recordType!`\n     domain. For example, `recordType!Order.filters.status`. You may only reference\n     user filters defined on the record type used for the *eventData*. This parameter\n     only applies when there is only one instance of [a!eventData()](Event_Data_Component.md).\n \n     '\n - keyword: eventFilters\n   name: Component Filters\n   types: List of Text\n   description: 'Determines which out-of-the-box filters to show. These filters exist\n     only on the component, not on the record type. Use any combination of the following\n     values {`\"USER\"`, `\"EVENT_TYPE\"`, `\"DATE_RANGE\"`}.\n \n     '\n - keyword: CollapseDetailsByDefault\n   name: Initially collapse event details\n   types: Boolean\n   description: 'Determines if the event details are collapsed when the interface first\n     loads. Default: `true`.\n \n     '\n - keyword: showSearchBox\n   name: Show search box\n   types: Boolean\n   description: 'Determines if the record search box should be shown. Default: `true`.\n \n     '\n - keyword: showReverseSortButton\n   name: Show reverse sort button\n   types: Boolean\n   description: 'Determines if the list should include a button to reverse the event\n     data sort. Default: `true`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Event History List\n space: sail_component\n ---\n \n ## Function\n \n function name: a!eventHistoryList \n  function syntax: a!eventHistoryList (label,labelPosition,instructions,helpTooltip,emptyListMessage,eventData,eventStyle,formatTimestamp,displayUser,displayUserColorScheme,previewListPageSize,pageSize,showWhen,refreshAlways,refreshAfter,refreshInterval,refreshOnReferencedVarChange,refreshOnVarChange,userFilters,eventFilters,CollapseDetailsByDefault,showSearchBox,showReverseSortButton)\n \n Displays the event history for one or more record types. If you configured [record events](record-events.md) on your record type, we recommend using the Event History record type to populate this list.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the list label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values:\\n  - `ABOVE` (default) Displays the label above the component.\\n  - `ADJACENT` Displays the label to the left of the component.\\n  - `COLLAPSED` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `JUSTIFIED` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this list.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"emptyListMessage\", \"name\": \"Empty List Message\", \"types\": \"Text\", \"description\": \"Text to display in the list when no data is available. Default is `\\\"No events to display\\\"`.\"}, {\"keyword\": \"eventData\", \"name\": \"Event Data\", \"types\": \"List of Event Data\", \"description\": \"The record event data that populates the list, created using one or more instances of [a!eventData()](Event_Data_Component.md).\\n\"}, {\"keyword\": \"eventStyle\", \"name\": \"Event Style\", \"types\": \"Text\", \"description\": \"Determines how the component displays. Valid values include: `\\\"PREVIEW_LIST\\\"` (default), `\\\"FULL_LIST\\\"`, `\\\"TIMELINE\\\"`. The `\\\"PREVIEW_LIST\\\"` and `\\\"FULL_LIST\\\"` styles are sometimes referred to collectively as the \\\"list styles.\\\" See the [UX Design System](sail/ux-event-history-list.md) for best practices on when to use which style.\\n\"}, {\"keyword\": \"formatTimestamp\", \"name\": \"Date Display\", \"types\": \"Text\", \"description\": \"Determines how the component formats the event data timestamp. Valid values include: `\\\"NULL\\\"`, `\\\"DATE\\\"`, `\\\"DATE_TIME\\\"` (default), `\\u201cDATE_TIME_TIMEZONE\\u201d`.\\n\"}, {\"keyword\": \"displayUser\", \"name\": \"User Image Style\", \"types\": \"Text\", \"description\": \"Determines if and how to display user avatars. Valid values include: `\\\"NONE\\\"`, `\\\"INITIALS\\\"` (default), `\\\"IMAGE\\\"`.\\n\"}, {\"keyword\": \"displayUserColorScheme\", \"name\": \"User Color Scheme\", \"types\": \"Any Type\", \"description\": \"If no profile picture is available, determines which color scheme to use for users in the event history list. Valid values: `\\\"PARACHUTE\\\"` (default), `\\\"VIBRANT\\\"`, `\\\"CLASSIC\\\"` or define a custom color scheme using [a!colorSchemeCustom()](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"previewListPageSize\", \"name\": \"Preview List Page Size\", \"types\": \"Number (Integer)\", \"description\": \"The maximum number of rows to display in each page of the initial list when the `\\\"PREVIEW_LIST\\\"` event style is selected. To set the paging for the **View All** dialog, see *pageSize*. Valid values include 1-10. Default: 5.\\n\"}, {\"keyword\": \"pageSize\", \"name\": \"Page Size\", \"types\": \"Number (Integer)\", \"description\": \"The maximum number of rows to display in each page of the list when the `\\\"FULL_LIST\\\"` or `\\\"TIMELINE\\\"` event style is selected. When the `\\\"PREVIEW_LIST\\\"` event style is selected, this parameter applies to the list as it appears in the **View More** dialog. Valid values include 1-100. Default: 10.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to `false`, the component is hidden and is not evaluated. Default: `true`.\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh after each user interaction\", \"types\": \"Boolean\", \"description\": \"When true, *eventData* will be refreshed after each user interaction and each interval refresh. Default: `false`.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh after record action completes\", \"types\": \"List of Text String\", \"description\": \"Refreshes *eventData* data each time a specified action completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh after an interval of time\", \"types\": \"Number (Decimal)\", \"description\": \"How often grid data gets refreshed in minutes. When null, *eventData* will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`.\\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh after referenced variable changes\", \"types\": \"Boolean\", \"description\": \"When true, grid data will be refreshed each time the value of any variable referenced in the _eventData_ parameter is updated. To refresh grid data when another variable that is not used in the _eventData_ parameter changes, use *refreshOnVarChange*. Default: `true`.\\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh after variable changes\", \"types\": \"Any Type\", \"description\": \"Refreshes data each time any of these specific variables change. This allows you to refresh the data when a variable that is not referenced in the _eventData_ parameter is updated. You can define a single variable (for example, `refreshOnVarChange: local!var1`) or a list of variables (for example, `refreshOnVarChange: {local!var1, local!var2}`).\\n\"}, {\"keyword\": \"userFilters\", \"name\": \"User Filters\", \"types\": \"List of Variant\", \"description\": \"List of user filter references to display, configured using the `recordType!` domain. For example, `recordType!Order.filters.status`. You may only reference user filters defined on the record type used for the *eventData*. This parameter only applies when there is only one instance of [a!eventData()](Event_Data_Component.md).\\n\"}, {\"keyword\": \"eventFilters\", \"name\": \"Component Filters\", \"types\": \"List of Text\", \"description\": \"Determines which out-of-the-box filters to show. These filters exist only on the component, not on the record type. Use any combination of the following values {`\\\"USER\\\"`, `\\\"EVENT_TYPE\\\"`, `\\\"DATE_RANGE\\\"`}.\\n\"}, {\"keyword\": \"CollapseDetailsByDefault\", \"name\": \"Initially collapse event details\", \"types\": \"Boolean\", \"description\": \"Determines if the event details are collapsed when the interface first loads. Default: `true`.\\n\"}, {\"keyword\": \"showSearchBox\", \"name\": \"Show search box\", \"types\": \"Boolean\", \"description\": \"Determines if the record search box should be shown. Default: `true`.\\n\"}, {\"keyword\": \"showReverseSortButton\", \"name\": \"Show reverse sort button\", \"types\": \"Boolean\", \"description\": \"Determines if the list should include a button to reverse the event data sort. Default: `true`.\\n\"}]\n \n ## Usage considerations\n \n ### Using the eventStyle parameter\n \n The *eventStyle* parameter allows you to display your event history using three different styles:\n \n |Style|Description|\n |-|-|\n |`\"PREVIEW_LIST\"`|Displays a short list of events with the ability to view all events in a dialog. The dialog will display a longer list of events that users can search and filter on. This option is best when you want to display your event history in a record view or alongside other components. Note that you cannot use this style when the component displays in a dialog.|\n |`\"FULL_LIST\"`|Displays a long list of events that users can search and filter on. This option is best when you want to display your event history as a single page in a site.|\n |`\"TIMELINE\"`|Displays a timeline of events where events are organized by the timestamp field. This option is best if you want to analyze events based on time rather than event type.|\n \n ## Examples\n \n The following examples illustrate how to configure different styles of the event history list component. \n \n *Record type object references are specific to each environment. If you copy and paste these examples into your interface, they will not evaluate. Use them as a references only.*\n \n ### Preview list of events\n \n {% include zoompic.html url=\"images/previewList_eventHistory.png\" %}\n \n The expression looks like this:\n \n ```sail\n a!eventHistoryListField(\n     label: \"Event History Preview List\",\n     labelPosition: \"COLLAPSED\",\n     eventData: {\n       a!eventData(\n         recordType: recordType!Order Event History,\n         filters: null,\n         timestamp: recordType!Order Event History.fields.timestamp,\n         user: recordType!Order Event History.fields.user,\n         eventTypeName: fv!data[recordType!Order Event History.relationships.eventType.fields.eventName],\n         details: if(\n           isNullOrEmpty(fv!data[recordType!Order Event History.fields.details]),\n           \"No additional details\",\n           fv!data[recordType!Order Event History.fields.details]\n         ),\n         recordTypeForTag: recordType!Order,\n         recordIdentifier: recordType!Order Event History.fields.recordId\n       )\n     },\n     refreshAfter: \"RECORD_ACTION\",\n     eventStyle: \"PREVIEW_LIST\",\n     previewListPageSize: 5,\n     pageSize: 10,\n     formatTimestamp: \"DATE_TIME\",\n     collapseDetailsByDefault: false,\n     displayUser: \"IMAGE\",\n     showSearchBox: true,\n     eventFilters: { \"EVENT_TYPE\", \"DATE_RANGE\" },\n     showReverseSortButton: true\n   )\n ```\n \n ### Full list of events\n \n {% include zoompic.html url=\"images/fullList_eventHistory.png\" %}\n \n The expression looks like this:\n \n ```sail\n a!eventHistoryListField(\n     label: \"Event History Full List\",\n     labelPosition: \"COLLAPSED\",\n     eventData: {\n       a!eventData(\n         recordType: recordType!Order Event History,\n         filters: null,\n         timestamp: recordType!Order Event History.fields.timestamp,\n         user: recordType!Order Event History.fields.user,\n         eventTypeName: fv!data[recordType!Order Event History.relationships.eventType.fields.eventName],\n         details: if(\n           isNullOrEmpty(fv!data[recordType!Order Event History.fields.details]),\n           \"No additional details\",\n           fv!data[recordType!Order Event History.fields.details]\n         ),\n         recordTypeForTag: recordType!Order,\n         recordIdentifier: recordType!Order Event History.fields.recordId\n       )\n     },\n     refreshAfter: \"RECORD_ACTION\",\n     eventStyle: \"FULL_LIST\",\n     pageSize: 10,\n     formatTimestamp: \"DATE_TIME\",\n     collapseDetailsByDefault: true,\n     displayUser: \"IMAGE\",\n     showSearchBox: true,\n     eventFilters: { \"EVENT_TYPE\", \"DATE_RANGE\" },\n     showReverseSortButton: true\n   )\n ```\n \n ### Timeline of events\n \n {% include zoompic.html url=\"images/timeline_eventHistory.png\" alt=\"image\" border=\"-nb\" style=\"width:67%;\" %}\n \n The expression looks like this:\n \n ```sail\n a!eventHistoryListField(\n     label: \"Event History Timeline\",\n     labelPosition: \"COLLAPSED\",\n     eventData: {\n       a!eventData(\n         recordType: recordType!Order Event History,\n         filters: null,\n         timestamp: recordType!Order Event History.fields.timestamp,\n         user: recordType!Order Event History.fields.user,\n         eventTypeName: fv!data[recordType!Order Event History.relationships.eventType.fields.eventName],\n         recordTypeForTag: recordType!Order,\n         recordIdentifier: recordType!Order Event History.fields.recordId\n       )\n     },\n     refreshAfter: \"RECORD_ACTION\",\n     eventStyle: \"TIMELINE\",\n     previewListPageSize: 5,\n     pageSize: 5,\n     formatTimestamp: \"DATE_TIME\",\n     collapseDetailsByDefault: true,\n     displayUser: \"IMAGE\",\n     showSearchBox: true,\n     eventFilters: { \"EVENT_TYPE\", \"DATE_RANGE\" },\n     showReverseSortButton: true\n   )\n ```"}, {"doc": "Columns_Browser_Node_Component.md", "content": "---\n layout: function\n title: Hierarchy Browser Node (Columns) Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Returns a Hierarchy Browser Field Columns Node, used in the Node Configurations\n   parameter of the Columns Browser to determine how items in the hierarchy are displayed.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!hierarchyBrowserFieldColumnsNode\n fncsubcat: Browsers\n parameters:\n - keyword: id\n   name: Identifier\n   types: Any Type\n   description: Required unique identifier of the node. This value only needs to be\n     unique within the nodes column.\n - keyword: label\n   name: Label\n   types: Text\n   description: Required text to display in the node.\n - keyword: image\n   name: Image\n   types: Image\n   description: \"Required image to display in the node, created with: \\n  - [a!documentImage()](Document_Image_Component.md)\\n\n     \\ - [a!userImage()](User_Image_Component.md) \\n  - [a!webImage()](Web_Image_Component.md)\\n\"\n - keyword: link\n   name: Link\n   types: Array of Links\n   description: \"Optional link to display in the node  s label title. Create links\n     with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n\n     \\ - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n\n     \\ - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n\n     \\ - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n\n     \\ - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n\n     \\ - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: isSelectable\n   name: Node is selectable\n   types: Boolean\n   description: \"If true, clicking the node will save the columns browser's selection\n     value and navigation path. If false, clicking the node will not save the selection\n     value. It may still save the navigation path if the node is drillable. On hover,\n     a selectable node will have a unique display. (default: true) \\n\"\n - keyword: isDrillable\n   name: Node is drillable\n   types: Boolean\n   description: \"If true, clicking the node will save the columns browser's navigation\n     path, revealing another column to the user. If false, clicking the node will not\n     reveal another column. It may still save the navigation path if the node is selectable.\n     On hover, a drillable node will have a unique display. (default: true) \\n\"\n - keyword: nextColumnCount\n   name: Next Column Count\n   types: Integer\n   description: The number of nodes that would be displayed if the user drilled into\n     this node. This value is optional and is displayed on mobile only.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Hierarchy Browser Node (Columns)\n scsubcat: Hierarchy_Browser_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!hierarchyBrowserFieldColumnsNode \n  function syntax: a!hierarchyBrowserFieldColumnsNode (id,label,image,link,isSelectable,isDrillable,nextColumnCount,showWhen)\n \n Returns a Browser Field Columns Node, used in the Node Configurations parameter of the [Columns](Columns_Browser_Component.md) Browser to determine how items in the hierarchy are displayed.\n \n ## Parameters\n \n [{\"keyword\": \"id\", \"name\": \"Identifier\", \"types\": \"Any Type\", \"description\": \"Required unique identifier of the node. This value only needs to be unique within the nodes column.\"}, {\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Required text to display in the node.\"}, {\"keyword\": \"image\", \"name\": \"Image\", \"types\": \"Image\", \"description\": \"Required image to display in the node, created with: \\n  - [a!documentImage()](Document_Image_Component.md)\\n  - [a!userImage()](User_Image_Component.md) \\n  - [a!webImage()](Web_Image_Component.md)\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Array of Links\", \"description\": \"Optional link to display in the node  s label title. Create links with: \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"isSelectable\", \"name\": \"Node is selectable\", \"types\": \"Boolean\", \"description\": \"If true, clicking the node will save the columns browser's selection value and navigation path. If false, clicking the node will not save the selection value. It may still save the navigation path if the node is drillable. On hover, a selectable node will have a unique display. (default: true) \\n\"}, {\"keyword\": \"isDrillable\", \"name\": \"Node is drillable\", \"types\": \"Boolean\", \"description\": \"If true, clicking the node will save the columns browser's navigation path, revealing another column to the user. If false, clicking the node will not reveal another column. It may still save the navigation path if the node is selectable. On hover, a drillable node will have a unique display. (default: true) \\n\"}, {\"keyword\": \"nextColumnCount\", \"name\": \"Next Column Count\", \"types\": \"Integer\", \"description\": \"The number of nodes that would be displayed if the user drilled into this node. This value is optional and is displayed on mobile only.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Drillable and selectable nodes\n \n You can see some of these terms and parameters (*isDrillable* and *isSelectable*) labeled in the following screenshot.\n \n ![screenshot of the columns browsers with annotated nodes](images/ColumnsBrowserNodeConfigs.png){:.screenshot}\n \n ### Using the nodeConfigs  and identifier parameters\n \n - A columns browser node can only be displayed if passed to the *nodeConfigs* parameter of the columns browser.\n - The variable `fv!nodeValue` is only available when the columns browser node is used in either the *nodeConfigs* or *nextColumnValues* parameters of the columns browser.\n - The *identifier* field can be any value, but using long strings or large data types could cause performance problems. We recommended using a data type's primary key, if available.\n \n ### Using links with the columns browser\n \n - The columns browser component does not support dynamic links nor submit links node configurations.\n - The columns browser component does not permit links in images in node configurations.\n \n ## Examples\n \n *For an example of how to configure a columns browser node, see the example in the [Columns Browser](Columns_Browser_Component.md).*"}, {"doc": "Video_Component.md", "content": "---\n layout: function\n title: Video Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Creates a Video component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!videoField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: videos\n   name: Videos\n   types: Any Type\n   description: 'Array of videos to display, created with a!webVideo().\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Video\n space: sail_component\n ---\n \n ## Function\n \n function name: a!videoField \n  function syntax: a!videoField (label,labelPosition,instructions,videos,helpTooltip,accessibilityText,showWhen,marginAbove,marginBelow)\n \n Creates a Video component.\n \n **See also**: [Web Video](Web_Video_Component.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"videos\", \"name\": \"Videos\", \"types\": \"Any Type\", \"description\": \"Array of videos to display, created with a!webVideo().\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Supported formats\n \n - The video formats supported by this component vary by device and browser. Videos of a format not supported by a device/browser will not play in the device/browser.\n   - WebM and Ogg are supported on Chrome and Firefox.\n   - MP4, 3gp, mov, and mpv are supported on iOS devices.\n   - MP4, 3gp, webm, and mkv are supported on Android devices.\n - Videos served over HTTP and HTTPS are both supported. For videos that require authentication, we strongly recommend that you set up single sign-on between Appian and the server that hosts the video so that the video can play without requiring the user to authenticate a second time.\n \n ### Appian Documents\n \n `a!videoField()` cannot be used to display videos stored as Appian documents.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 900 %}\n a!videoField(\n   label: \"Video Example\",\n   videos: {\n     a!webVideo(\n       source: \"https://www.w3schools.com/html/mov_bbb.mp4\"\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Form_Layout_171.md", "content": "---\n layout: function\n title: a!formLayout_17r1 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays up to two columns of components beneath a title and above buttons.\n   Use this as the top-level layout of start and task forms.\n category: function_page\n compatibility: -crf\n fncname: a!formLayout_17r1\n fncsubcat: Layouts\n fncexample: Click on the function name for examples.\n fncsyntax: '**a!formLayout_17r1**( [*label*] , [*instructions*], [*firstColumnContents*],\n   [*secondColumnContents*], [*buttons*], [*validations*], [*validationGroup*], [*skipAutoFocus*]\n   )'\n fnccat: Interface_Component\n scdisplayname: Form Layout 17.1\n evolved_fncname: a!formLayout\n evolved_reason: Replaced _firstColumnContents_ and _secondColumnContents_ with `contents`.\n   Now supports greater than two-column layout.\n ---\n \n ## Form 17.1\n \n Displays up to two columns of components beneath a title and above buttons. Use this as the top-level layout of start and task forms.\n \n **See Also**: [Dashboard](Dashboard_Layout.md)\n \n \n **Function**: `a!formLayout_17r1()`\n \n **Parameters**\n \n <table class=\"appianTable\">\n   <tr>\n     <th> Name </th>\n     <th> Keyword </th>\n     <th> Type </th>\n     <th> Description </th>\n   </tr>\n   <tr>\n     <td> Label </td>\n     <td> label </td>\n     <td> Text </td>\n     <td> Optional text to display as the interface's title. </td>\n   </tr>\n   <tr>\n     <td> Instructions </td>\n     <td> instructions </td>\n     <td> Text </td>\n     <td> Optional text displayed below the field's label. </td>\n   </tr>\n   <tr>\n     <td> Column 1 Contents </td>\n     <td> firstColumnContents </td>\n     <td> Any Type Array </td>\n     <td> Values that define the contents for the first column in the interface. </td>\n   </tr>\n   <tr>\n     <td> Column 2 Contents </td>\n     <td> secondColumnContents </td>\n     <td> Any Type Array </td>\n     <td> Values that define the contents for the second column in the interface. </td>\n   </tr>\n   <tr>\n     <td> Buttons </td>\n     <td> buttons </td>\n     <td> Button Layout </td>\n     <td> Buttons to display at the bottom of the form, arranged using <code>a!buttonLayout()</code>. </td>\n   </tr>\n   <tr>\n     <td> Validations </td>\n     <td> validations </td>\n     <td> Text or <a href=\"Validation_Message.html\">Validation Message</a> Array </td>\n     <td> Validation errors displayed above the form buttons. Configured using a text array or an array with a mix of text and Validation Message using <code>a!validationMessage(message, validateAfter)</code>. </td>\n   </tr>\n   <tr>\n     <td> Validation Group </td>\n     <td> validationGroup </td>\n     <td> Text </td>\n     <td> When present, the form is only validated when a button in the same validation group is clicked. </td>\n   </tr>\n   <tr>\n     <td> Don\u2019t automatically focus on first input </td>\n     <td> skipAutoFocus </td>\n     <td> Boolean </td>\n     <td> Determines whether the first input will receive focus when a form loads. Default is false. </td>\n   </tr>\n   <tr>\n     <td> Visibility </td>\n     <td> showWhen </td>\n     <td> Boolean </td>\n     <td> Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. </td>\n   </tr>\n </table>\n \n **Notes**\n \n - A button layout must be present for a back button to appear for activity-chained tasks.\n - If the *Column 2 Contents* parameter is null, the content for the first column displays as in a single-column layout with no space left for where the second column would display.\n - Use form validation messages for problems that are not specific to a single component.\n - Focus will automatically be applied on initial load to the first component in a form that meets the following conditions:\n   - The component is one of the following: checkbox, decimal, dropdown, encrypted text, integer, paragraph, radio button, text\n   - The component is neither read-only nor disabled\n   - The component is not in an initially collapsed section\n \n **Examples**\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ***Two-Column Form***\n \n ```sail \n =a!formLayout_17r1(\n   label: \"Customers for Review\",\n   instructions: \"Review the profiles for the customers below and contact as needed\",\n   firstColumnContents: {\n     a!textField(\n       label: \"Customer\",\n       value: \"John Smith\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Status\",\n       value: \"Prospective\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Priority\",\n       value: \"High\",\n       readOnly: true\n     )\n   },\n   secondColumnContents: {\n     a!textField(\n       label: \"Customer\",\n       value: \"Michael Johnson\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Status\",\n       value: \"Prospective\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Priority\",\n       value: \"Medium\",\n       readOnly: true\n     )\n   },\n   buttons: a!buttonLayout(\n     primaryButtons: {\n       a!buttonWidget(\n         label: \"Submit\",\n         submit: true()\n       )\n     }\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a two-column form](images/Formlayout_simple_172.png){:.screenshot}"}, {"doc": "Text_Component.md", "content": "---\n layout: function\n title: Text Component\n category: function_page\n compatibility: -crf\n excerpt: Displays and allows entry of a single line of text.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!textField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Text\n   description: Text to display in the text field.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the text when the user\n     changes it. Use a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: Text\n   description: 'Determines when the interface is refreshed with the saved value from\n     the text field. Valid values are `\"KEYPRESS\"` to refresh after every character\n     typed into the field and `\"UNFOCUS\"` (the default value) to refresh when the user\n     deselects the field after changing its value.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the text value. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: masked\n   name: Masked\n   types: Boolean\n   description: 'Determines if the value is obscured from view. Default: false.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: inputPurpose\n   name: Input Purpose\n   types: Text\n   description: 'Indicates the intent of input for accessibility improvements, like\n     autocomplete, used by browsers and assistive technologies. Valid values are `\"NAME\"`,\n     `\"EMAIL\"`, `\"PHONE_NUMBER\"`, `\"STREET_ADDRESS\"`, `\"POSTAL_CODE\"`, `\"CREDIT_CARD_NUMBER\"`,\n     and `\"OFF\"`.\n \n     '\n - keyword: characterLimit\n   name: Character Limit\n   types: Number (Integer)\n   description: 'Determines the maximum number of characters. Depending on the language,\n     some characters may count as more than one.\n \n     '\n - keyword: showCharacterCount\n   name: Show Character Limit Count\n   types: Boolean\n   description: 'Determines if the character count displays on the text field. Only\n     applicable if the character limit is set. Default: true.\n \n     '\n reftype: sailcomponent\n related_patterns_mods: 'or, title: Text, sr-tags: Formatting'\n scdisplayname: Text\n space: sail_component\n ---\n \n ## Function\n \n function name: a!textField \n  function syntax: a!textField (label,instructions,required,readOnly,disabled,value,validations,saveInto,refreshAfter,validationGroup,requiredMessage,align,labelPosition,placeholder,helpTooltip,masked,accessibilityText,showWhen,inputPurpose,characterLimit,showCharacterCount)\n \n Displays and allows entry of a single line of text. For a multiple line of text, use a [paragraph](Paragraph_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Text\", \"description\": \"Text to display in the text field.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the text when the user changes it. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"Text\", \"description\": \"Determines when the interface is refreshed with the saved value from the text field. Valid values are `\\\"KEYPRESS\\\"` to refresh after every character typed into the field and `\\\"UNFOCUS\\\"` (the default value) to refresh when the user deselects the field after changing its value.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the text value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"masked\", \"name\": \"Masked\", \"types\": \"Boolean\", \"description\": \"Determines if the value is obscured from view. Default: false.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"inputPurpose\", \"name\": \"Input Purpose\", \"types\": \"Text\", \"description\": \"Indicates the intent of input for accessibility improvements, like autocomplete, used by browsers and assistive technologies. Valid values are `\\\"NAME\\\"`, `\\\"EMAIL\\\"`, `\\\"PHONE_NUMBER\\\"`, `\\\"STREET_ADDRESS\\\"`, `\\\"POSTAL_CODE\\\"`, `\\\"CREDIT_CARD_NUMBER\\\"`, and `\\\"OFF\\\"`.\\n\"}, {\"keyword\": \"characterLimit\", \"name\": \"Character Limit\", \"types\": \"Number (Integer)\", \"description\": \"Determines the maximum number of characters. Depending on the language, some characters may count as more than one.\\n\"}, {\"keyword\": \"showCharacterCount\", \"name\": \"Show Character Limit Count\", \"types\": \"Boolean\", \"description\": \"Determines if the character count displays on the text field. Only applicable if the character limit is set. Default: true.\\n\"}]\n \n ## Usage considerations \n \n ### Displaying different data types and placeholder text\n \n - This component is useful for displaying values of another type that require formatting other than the original type\u2019s default formatting.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Using the characterLimit parameter\n \n - Emojis and characters in some languages (for example, Chinese and Arabic) may be counted by *characterLimit* as more than one character.\n - The *characterLimit* parameter and character limits set on CDT fields must be independently maintained to ensure that the two limits match.\n - If you set *readOnly* to `true`, the component's character limit won't be displayed.\n \n ### Using the readOnly parameter\n \n - If *readOnly* is set to `true`, the component's value displays without a box around it.\n - If you pass the same local variable to *value* and *saveInto* when *readOnly* is set to `false`, you can use the user's input in the component to modify the interface, such as filtering a grid.\n \n ### Using inputPurpose parameter\n \n - When using *inputPurpose*, there is no visible change in the form factor preview.\n - If *inputPurpose* is set to `\"OFF\"`, autocomplete may be disabled depending on your browser settings. The default behavior allows for autocomplete, but does not require you to specify inputs.\n - *inputPurpose* is not supported if the *masked* parameter is set to `true`. \n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Text with only a label\n \n \n {% sailbox 600 %}\n a!textField(\n   label: \"Title\",\n   value: \"Expenses could not be submitted\",\n   readOnly: true\n )\n {% endsailbox %}\n \n \n ### Text with label and instructions\n \n {% sailbox 600 %}\n a!textField(\n   label: \"Title\",\n   instructions: \"The ticket title is exactly as entered by the creator\",\n   value: \"Expenses could not be submitted\",\n   readOnly: true\n )\n {% endsailbox %}\n \n ### Time with 24-hour formatting\n \n {% sailbox 600 %}\n a!textField(\n   label: \"Daily Meeting Time\",\n   value: text(time(13, 20), \"hh:mm\"),\n   readOnly: true\n )\n {% endsailbox %}\n \n \n ### Integer with no formatting or with special formatting\n \n This example shows an integer with no thousand separators.\n \n {% sailbox 600 %}\n a!textField(\n   label: \"Reference Number\",\n   value: 12345,\n   readOnly: true\n )\n {% endsailbox %}\n \n \n ### Integer formatted as currency\n \n ```sail\n a!textField(\n   label: \"Amount\",\n   value: a!currency(\n     isoCode: \"USD\",\n     value: 12345\n   ),\n   readOnly: true\n )\n ```\n \n Displays the following:\n \n ![integer as currency](images/text_comp_integer_currency.png){:.screenshot style=\"width:33%;\"}\n \n ### Date with \"m/dd/yy\" formatting\n \n {% sailbox 600 %}\n a!textField(\n   label: \"Created On\",\n   value: text(date(2013,1,12), \"m/dd/yy\"),\n   readOnly: true\n )\n {% endsailbox %}\n \n \n ### Date and time with \"m/dd/yy h:mm a\" formatting\n \n {% sailbox 600 %}\n a!textField(\n   label: \"Created On\",\n   value: text(datetime(2013,1,12, 11, 20), \"m/dd/yy h:mm a\"),\n   readOnly: true\n )\n {% endsailbox %}\n \n ### Text with character limit\n \n This example uses the *characterLimit* parameter to validate that a user's entry meets a particular limit.\n \n {% sailbox 600 %}\n a!localVariables(\n   local!storedPhoneNumber: \"555-456-7890-876\",\n   a!textField(\n     label: \"Phone Number\",\n     instructions: \"Include only dashes and numbers. For example, 555-456-7890.\",\n     value: local!storedPhoneNumber,\n     saveInto: local!storedPhoneNumber,\n     characterLimit: 12,\n     showCharacterCount: true\n   )\n )\n {% endsailbox %}"}, {"doc": "Inline_Image_Component.md", "content": "---\n layout: function\n title: Inline Image\n category: function_page\n compatibility: -crf\n excerpt: Displays an image within a rich text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextImage\n fncsubcat: Display\n parameters:\n - keyword: image\n   name: Image\n   types: Image\n   description: 'Required image to display in the node, created with [a!documentImage()](Document_Image_Component.md),[a!userImage()](User_Image_Component.md),\n     and [a!webImage()](Web_Image_Component.md).\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Inline Image\n scsubcat: Rich_Text_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextImage \n  function syntax: a!richTextImage (image,showWhen)\n \n Displays an image within a [rich text](Rich_Text_Component.md) component.\n \n To show styled icons within rich text, see [Styled Icon](Styled_Icon_Component.md).\n \n **See also**: [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"image\", \"name\": \"Image\", \"types\": \"Image\", \"description\": \"Required image to display in the node, created with [a!documentImage()](Document_Image_Component.md),[a!userImage()](User_Image_Component.md), and [a!webImage()](Web_Image_Component.md).\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Examples\n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Inline icons\n ```sail \n a!richTextDisplayField(\n   labelPosition: \"COLLAPSED\",\n   value: {\n     \"Happy Face \",\n     a!richTextImage(\n       image: a!documentImage(\n         document: a!iconIndicator(\n           icon: \"FACE_HAPPY\"\n         )\n       )\n     ),\n     \"Indifferent Face \",\n     a!richTextImage(\n       image: a!documentImage(\n         document: a!iconIndicator(\n           icon: \"FACE_INDIFFERENT\"\n         )\n       )\n     ),\n     \"Sad Face \",\n     a!richTextImage(\n       image: a!documentImage(\n         document: a!iconIndicator(\n           icon: \"FACE_SAD\"\n         )\n       )\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of icons in embedded in a line of text](images/richtext-inline-images.png){:.screenshot}"}, {"doc": "File_Upload_Component.md", "content": "---\n layout: function\n title: File Upload Component\n category: function_page\n compatibility: -crf\n excerpt: Allows users to upload one or more files. To upload files outside of a [start\n   form](process-model-object.md#process-start-form-tab) or [task](Tasks.html), use\n   [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md) in the *saveInto*\n   parameter of a submit [button](Button_Component.md) or [link](Link_Component.md).\n   Uploaded documents are not accessible until after form submission.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!fileUploadField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: target\n   name: Target Folder\n   types: Document or Folder\n   description: Determines the eventual location of the uploaded files.\n - keyword: fileNames\n   name: File Names\n   types: Text\n   description: 'Determines the names for the files. When not provided, the uploaded\n     filenames are used. Access name, size, and extension of each file using the variables\n     fv!file.name, fv!file.size, and fv!file.extension. Access the index of each file\n     using the variable fv!index.\n \n     '\n - keyword: fileDescriptions\n   name: File Descriptions\n   types: Text\n   description: 'Determines the descriptions for the files. When not provided, the\n     descriptions of the new files are empty. Access name, size, and extension of each\n     file using the variables fv!file.name, fv!file.size, and fv!file.extension. Access\n     the index of each file using the variable fv!index.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed files. Once this number is reached, further\n     uploads are blocked until a file is removed.\n \n     '\n - keyword: value\n   name: Display Value\n   types: List of Document\n   description: The files associated with this field.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the files when the user\n     uploads files. Removing all uploaded files saves a null document. Use a!save()\n     to save a modified or alternative value to a variable.\n \n     '\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. When files are present in this state, they may not be deleted. Default:\n     false.\n \n     '\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: 'Validation errors to display below the field when the value is not\n     null. Access the names, sizes, and extensions of the uploaded files using the\n     variables fv!files.name, fv!files.size, and fv!files.extension.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: buttonStyle\n   name: Button Style\n   types: Text\n   description: \"Determines the style of the upload button. Valid values:\\n  - `\\\"NORMAL\\\"`\n     Displays the label and border in the accent color.\\n  - `\\\"PRIMARY\\\"` Displays\n     the label in white on an accent color background.\\n  - `\\\"SECONDARY\\\"` (default)\n     Displays the label and border in gray.\\n  - `\\\"LINK\\\"` Displays the label in the\n     accent color and has no border until focused.\\n\"\n - keyword: buttonSize\n   name: Button Size\n   types: Text\n   description: 'Determines the size of the upload button. Valid values:  `\"SMALL\"`\n     (default), `\"STANDARD\"`, `\"LARGE\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: uploadMethods\n   name: Upload Methods (Mobile only)\n   types: List of Text\n   description: '(Mobile only) Determines which mobile upload methods are displayed\n     to users. If one method is specified, the upload button will be customized. Multiple\n     may be applied. If value is null, all methods are provided. Valid values include:\n     null (Default),`\"SIGNATURE\"`, `\"CAMERA\"`, `\"CHOOSE_PHOTO\"`, `\"CHOOSE_FILE\"`.\n \n     '\n - keyword: buttonDisplay\n   name: Button Display\n   types: Text\n   description: 'Determines if the file upload will display a button with a label or\n     an icon. Valid values: `\"LABEL\"`, `\"ICON\"`, and `\"LABEL_AND_ICON\"`. Default behavior\n     displays `\"LABEL\"` on web and `\"LABEL_AND_ICON\"` on mobile.\n \n     '\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: 'Text to display when no file is uploaded. Default: `\"Drop files here\"`.\n \n     '\n - keyword: showVirusScanMessage\n   name: Show scanning for viruses message\n   types: Boolean\n   description: 'Determines whether the `\"Scanning for viruses\"` message appears during\n     file upload. When set to false, the message is hidden, but the file is still scanned\n     for viruses. An error message will still appear if [real-time virus scanning is\n     enabled](Appian_Administration_Console.md#file-upload) and the uploaded file contains\n     a virus. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: File Upload\n space: sail_component\n ---\n \n ## Function\n \n function name: a!fileUploadField \n  function syntax: a!fileUploadField (label,labelPosition,instructions,helpTooltip,target,fileNames,fileDescriptions,maxSelections,value,saveInto,required,requiredMessage,disabled,validations,validationGroup,buttonStyle,buttonSize,accessibilityText,showWhen,uploadMethods,buttonDisplay,placeholder,showVirusScanMessage)\n \n Allows users to upload one or more files. To upload files outside of a [start form](process-model-object.md#process-start-form-tab) or [task](Tasks.html), use [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md) in the *saveInto* parameter of a submit [button](Button_Component.md) or [link](Link_Component.md). Uploaded documents are not accessible until after form submission.\n \n Permitted file extensions can be controlled via the [File Upload](Appian_Administration_Console.md#file-upload) settings in the Admin Console.\n \n **See Also:**\n \n - [Document](Appian_Data_Types.md#document)\n - [Document or Folder](Appian_Data_Types.md#document-or-folder)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"target\", \"name\": \"Target Folder\", \"types\": \"Document or Folder\", \"description\": \"Determines the eventual location of the uploaded files.\"}, {\"keyword\": \"fileNames\", \"name\": \"File Names\", \"types\": \"Text\", \"description\": \"Determines the names for the files. When not provided, the uploaded filenames are used. Access name, size, and extension of each file using the variables fv!file.name, fv!file.size, and fv!file.extension. Access the index of each file using the variable fv!index.\\n\"}, {\"keyword\": \"fileDescriptions\", \"name\": \"File Descriptions\", \"types\": \"Text\", \"description\": \"Determines the descriptions for the files. When not provided, the descriptions of the new files are empty. Access name, size, and extension of each file using the variables fv!file.name, fv!file.size, and fv!file.extension. Access the index of each file using the variable fv!index.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed files. Once this number is reached, further uploads are blocked until a file is removed.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Document\", \"description\": \"The files associated with this field.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the files when the user uploads files. Removing all uploaded files saves a null document. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. When files are present in this state, they may not be deleted. Default: false.\\n\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null. Access the names, sizes, and extensions of the uploaded files using the variables fv!files.name, fv!files.size, and fv!files.extension.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"buttonStyle\", \"name\": \"Button Style\", \"types\": \"Text\", \"description\": \"Determines the style of the upload button. Valid values:\\n  - `\\\"NORMAL\\\"` Displays the label and border in the accent color.\\n  - `\\\"PRIMARY\\\"` Displays the label in white on an accent color background.\\n  - `\\\"SECONDARY\\\"` (default) Displays the label and border in gray.\\n  - `\\\"LINK\\\"` Displays the label in the accent color and has no border until focused.\\n\"}, {\"keyword\": \"buttonSize\", \"name\": \"Button Size\", \"types\": \"Text\", \"description\": \"Determines the size of the upload button. Valid values:  `\\\"SMALL\\\"` (default), `\\\"STANDARD\\\"`, `\\\"LARGE\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"uploadMethods\", \"name\": \"Upload Methods (Mobile only)\", \"types\": \"List of Text\", \"description\": \"(Mobile only) Determines which mobile upload methods are displayed to users. If one method is specified, the upload button will be customized. Multiple may be applied. If value is null, all methods are provided. Valid values include: null (Default),`\\\"SIGNATURE\\\"`, `\\\"CAMERA\\\"`, `\\\"CHOOSE_PHOTO\\\"`, `\\\"CHOOSE_FILE\\\"`.\\n\"}, {\"keyword\": \"buttonDisplay\", \"name\": \"Button Display\", \"types\": \"Text\", \"description\": \"Determines if the file upload will display a button with a label or an icon. Valid values: `\\\"LABEL\\\"`, `\\\"ICON\\\"`, and `\\\"LABEL_AND_ICON\\\"`. Default behavior displays `\\\"LABEL\\\"` on web and `\\\"LABEL_AND_ICON\\\"` on mobile.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display when no file is uploaded. Default: `\\\"Drop files here\\\"`.\\n\"}, {\"keyword\": \"showVirusScanMessage\", \"name\": \"Show scanning for viruses message\", \"types\": \"Boolean\", \"description\": \"Determines whether the `\\\"Scanning for viruses\\\"` message appears during file upload. When set to false, the message is hidden, but the file is still scanned for viruses. An error message will still appear if [real-time virus scanning is enabled](Appian_Administration_Console.md#file-upload) and the uploaded file contains a virus. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Submitting files\n \n When files are uploaded in the file upload component, they are saved to a temporary folder. They are not saved to the target until they are submitted.\n \n In start forms and tasks, on the button used to submit the form, make sure that the *submit* parameter set to `true`. When this button is clicked, the uploaded files will be saved to the target.\n \n Outside of start forms and tasks, use `a!submitUploadedFiles()` in the *saveInto* parameter of a button or link. This button or link could be used to submit the files, as in [this a!submitUploadedFiles() example](fnc_system_a_submituploadedfiles.md#using-the-documents-parameter-with-more-than-one-file-upload-component), or the entire form, as in [this example](#file-upload-outside-a-start-form-or-task). When this button is clicked, the uploaded files will be saved to the target folder.\n \n ### Give end users Editor permissions to the target\n \n In order to submit an uploaded file, users must have at least **Editor** permissions to the target folder or document.\n \n For portals, give the [portal service account](portals-service-accounts.md#required-permissions-for-portal-service-accounts) **Editor** permissions to the target folder or document.\n \n Any error saving the new document or version causes submission to be canceled and an error to be displayed to the user.\n \n ### Avoid saving unnecessary files\n \n #### In a start form or task\n \n For a start form or task, both the cancel and submit buttons will usually have the *submit* parameter set to `true`. As soon as one of these buttons are clicked, any uploaded files will be saved to their target.\n \n To avoid saving files from a canceled form, configure the [cancel flow](Process_Modeling_Tutorial.md#add-a-cancel-flow) in the process model to handle the unnecessary files. If the target is a folder, [delete](Delete_Document_Smart_Service.md) any uploaded files. If the target is a document, revert the file upload via a new version of the document.\n \n #### Outside of a start form or task\n \n If you are using the file upload component outside of a start form or task, use `a!submitUploadedFiles()` in the *saveInto* parameter of a button or link. Do not use it in the file upload component's *saveinto* parameter. This ensures that the file is only saved to the target when the user is ready to submit it.\n \n See [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md#only-use-this-function-in-the-saveinto-parameter-of-a-button-or-link) for more information.\n \n ### For portals, test the file upload in a published portal\n \n To make sure files will be uploaded correctly in a portal, publish the portal and test the file upload on the portal website. The file may seem to submit correctly when you test it in the interface object, but it may not work in the portal itself. For example, if the portal service account doesn't have **Editor** permissions to the target folder, you will see an error in the portal, but not in the interface object.\n \n See [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.html#testing-and-troubleshooting-asubmituploadedfiles-in-portals) for more information on testing and troubleshooting uploading documents in portals.\n \n ### Uploading new versions of multiple files\n \n The file upload component may not be used to upload new versions of multiple files. To accomplish that, use one component for each file to replace.\n \n ### Using the uploadMethods parameter\n \n The *uploadMethods* parameter is only supported within the Appian Mobile application. This parameter allows you to limit the upload methods a mobile user has access to when tapping an upload button.\n \n For example, this can be helpful to ensure users do not upload photos of a signature instead of drawing their signature within the application.\n \n ### Uploaded file size limit\n \n In portals, the size limit for uploaded files is 10 MB. Everywhere else, the file size limit is 1GB.\n \n ### Saving a task as a draft with an uploaded file\n \n If a user has uploaded a file to a task, they won't be able to save the task as a draft unless it is an [offline-enabled task](enable-offline-actions-and-tasks.md) that they are viewing on Appian Mobile. They can remove the file or files to save the task as a draft.\n \n ### Uploaded files are stored as temporary documents until submission\n \n When a file is uploaded, the component updates with a temporary document representing the uploaded file. Between the upload and the submission, the file on the server is an inactive temporary file and not accessible except through `fv!` variables described in the *File Name*, *File Description*, and *Validations* parameters. This is the only way to access file metadata before the file upload is submitted.\n \n If a file is uploaded but is never submitted, the temporary file is automatically deleted after 30 days.\n \n ### If enabled in Admin Console, uploaded files are scanned for viruses\n \n If [real-time virus scanning is enabled](Appian_Administration_Console.md#file-upload) for file uploads in the Admin Console, the uploaded file will always be scanned for viruses, regardless of whether the virus scanning message is shown.\n \n ### Some characters in file names are replaced\n \n If any of the following characters appear in a filename, they are replaced by underscores after submitting the file upload: `\\ / \" ; : | ? ' < > *`.\n \n ## Examples\n \n *Copy and paste an example into an interface object in **EXPRESSION MODE** to see it displayed.*\n \n ### File upload in a start form or task\n \n This example shows how to use the file upload component in an interface that will be used in a [start form](process-model-object.md#process-start-form-tab) or [task](Tasks.html).\n \n Keep in mind that if you don't use this interface in a start form or task, on the **Submit** button, you would need to replace `submit: true` with `saveInto: a!submitUploadedFiles()`. See [File upload outside a start form or task](#file-upload-outside-a-start-form-or-task) for more information.\n \n ```sail\n a!localVariables(\n   local!file,\n   a!formLayout(\n     label: \"File Upload Form\",\n     instructions: \"Use this example in a start form or task\",\n     contents: {\n       a!fileUploadField(\n         label: \"Upload File\",\n         /* Replace this with a constant of type Folder in your environment */\n         target: cons!FOLDER_CONSTANT,\n         value: local!file,\n         saveInto: local!file\n       )\n     },\n     buttons: a!buttonLayout(\n       primaryButtons: {\n         a!buttonWidget(\n           label: \"Submit\",\n           /* If you don't set the submit parameter to true, the signature will not be uploaded */\n           submit: true,\n           style: \"PRIMARY\",\n           loadingIndicator: true\n         )\n       },\n       secondaryButtons: {\n         a!buttonWidget(\n           label: \"Cancel\",\n           value: true,\n           saveInto: {},\n           submit: true,\n           style: \"NORMAL\",\n           validate: false\n         )\n       }\n     )\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a file upload for a start form or task](images/file_upload_start_form.png){:.screenshot style=\"width:65%\"}\n \n ### File upload outside a start form or task\n \n This example shows how to use the file upload component outside of a start form or task using `a!submitUploadedFiles()` in the *saveInto* parameter of a button. See [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md#examples) for more examples.\n \n Keep in mind that if you use this interface in a start form or task, on the **Submit** button you would need to replace `saveInto: a!submitUploadedFiles()` with `submit: true`. See [File upload in a start form or task](#file-upload-in-a-start-form-or-task) for more information.\n \n ```sail\n a!localVariables(\n   local!file,\n   local!submissionSuccessful,\n   local!errorCode,\n   {\n     a!fileUploadField(\n       label: \"File Upload\",\n       labelPosition: \"ABOVE\",\n       saveInto: local!file,\n       value: local!file,\n       /* Replace this with a constant of type Folder in your environment */\n       target: cons!AS_DOCUMENTS_FOLDER_POINTER\n     ),\n     a!buttonArrayLayout(\n       buttons: {\n         a!buttonWidget(\n           label: \"Submit\",\n           style: \"PRIMARY\",\n           /* If you don't use a!submitUploadedFiles(), the signature will not be uploaded */\n           saveInto: a!submitUploadedFiles(\n             onSuccess: a!save(local!submissionSuccessful, true),\n             onError: {\n               a!save(local!submissionSuccessful, false),\n               a!save(local!errorCode, fv!error)\n             }\n           )\n         )\n       },\n       align: \"END\"\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![file upload component used outside a start form or task](images/file_upload_no_start_form.png){:.screenshot style=\"width:65%\"}\n \n ### File upload with the icon style and no files\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n To test out different file upload styles and placeholder texts, change the value of the *buttonDisplay* parameter to `\"LABEL_AND_ICON\"` and enter a different text value for the *placeholder* parameter.\n \n {% sailbox 580 %}\n {\n   a!fileUploadField(\n     label: \"Upload Cover Letter\",\n     labelPosition: \"ABOVE\",\n     placeholder: \"Drop cover letter here to upload\",\n     saveInto: {},\n     validations: {},\n     buttonDisplay: \"ICON\",\n     showVirusScanMessage: false\n   )\n }\n {% endsailbox %}\n \n \n ### Single file upload\n \n ```sail\n a!localVariables(\n   local!coverLetter,\n   a!fileUploadField(\n     label: \"Cover Letter\",\n     /* Replace this with a constant of type Folder in your environment */\n     target: cons!FOLDER_CONSTANT,\n     maxSelections: 1,\n     value: local!coverLetter,\n     saveInto: local!coverLetter\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a single file upload with a single file](images/file-upload-single-172.png){:.screenshot style=\"width:65%\"}\n \n ### Signature-capture only field on the Appian Mobile application\n \n ```sail\n a!localVariables(\n   local!signature,\n   a!fileUploadField(\n     label: \"Signature\",\n     /* Replace this with a constant of type Folder in your environment */\n     target: cons!FOLDER_CONSTANT,\n     maxSelections: 1,\n     value: local!signature,\n     saveInto: local!signature,\n     uploadMethods: \"SIGNATURE\"\n   )\n )\n ```\n \n Resulting behavior:\n Users in the Appian Mobile application, when tapping on the \"Signature\" file upload button, are instantly prompted to draw their signature and cannot use other upload methods such as taking a photo.\n \n ### Using fv! variables\n \n These examples demonstrate how to use the `fv!` variables available in the File Name, File Description, and Validations parameters to set file metadata or create complex validations.\n \n Add one of the following parameter configurations to a file upload component to achieve the desired behavior.\n \n #### Swap spaces for underscores in file names\n \n ```sail\n fileNames: substitute(fv!file.name, \" \", \"_\")\n ```\n \n #### Set file descriptions to a value plus file index\n \n ```sail\n fileDescriptions: \"Application ABC-123 attachment \" & fv!index\n ```\n \n #### All files must be PDFs\n \n ```sail\n validations: a!localVariables(\n   local!invalidExtensions: difference(upper(fv!files.extension), \"PDF\"),\n   if(\n     length(local!invalidExtensions) > 0, \n     \"Attachments must be pdf files. Remove: \" & \n       index(fv!files, \"name\", wherecontains(local!invalidExtensions, upper(fv!files.extension)), {}), \n     \"\"\n   )\n )\n ```\n \n #### No files may be PDFs\n \n ```sail\n validations: if(\n   contains(upper(fv!files.extension), \"PDF\"), \n   \"Attachments must not be pdf files. Remove: \" & \n     index(fv!files, \"name\", wherecontains(\"PDF\", upper(fv!files.extension))), \n   \"\"\n )\n ```\n \n #### Files may only be PNG or JPG\n \n ```sail\n validations: a!localVariables(\n   local!invalidExtensions: difference(upper(fv!files.extension), { \"PNG\", \"JPG\" }),\n   if(\n     length(local!invalidExtensions) > 0, \n     \"Attachments must be images. Remove: \" & \n       index(fv!files, \"name\", wherecontains(local!invalidExtensions, upper(fv!files.extension)), {}), \n     \"\"\n   )\n )\n ```\n \n #### Files must be larger than 5MB\n \n ```sail\n validations: if(\n   or(fv!files.size < 5000000),\n   \"Attachments must be at least 5MB. Remove: \" &\n     index(fv!files, \"name\", where(fv!files.size < 5000000), {}),\n   \"\"\n )\n ```\n \n #### Files must be smaller than 5MB\n \n ```sail\n validations: if(\n   or(fv!files.size > 5000000), \n   \"Attachments may not exceed 5MB. Remove: \" & \n     index(fv!files, \"name\", where(fv!files.size > 5000000), {}), \n   \"\"\n )\n ```\n \n #### Up to five files are allowed\n \n ```sail\n validations: if(length(fv!files) > 5, \"Only 5 attachments are allowed\", \"\")\n ```\n \n #### Exactly five files are required\n \n ```sail\n validations: if(not(length(fv!files) = 5), \"5 files must be attached\", \"\")\n ```\n \n #### At least five files are required\n \n ```sail\n validations: if(length(fv!files) < 5, \"There must be at least 5 attachments\", \"\")\n ```"}, {"doc": "Column_Chart_Component.md", "content": "---\n layout: function\n title: Column Chart Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays numerical data as vertical bars. Use a column chart to graphically\n   display data that changes over time.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!columnChartField\n fncsubcat: Charts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: categories\n   name: Categories\n   types: List of Text String\n   description: Text to display on the X-Axis next to each column.\n - keyword: series\n   name: Series\n   types: List of ColumnChartSeries\n   description: Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\n - keyword: xAxisTitle\n   name: X-Axis Title\n   types: Text\n   description: Title for the independent (horizontal) axis.\n - keyword: yAxisTitle\n   name: Y-Axis Title\n   types: Text\n   description: Title for the dependent (vertical) axis.\n - keyword: yAxisMin\n   name: Min Y-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the vertical axis.\n - keyword: yAxisMax\n   name: Max Y-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the vertical axis.\n - keyword: stacking\n   name: Stacking\n   types: Text\n   description: 'Determines if series values display as separate bars, stacked within\n     one bar to show the sum of series values, or stacked to a height of 100% to show\n     the contribution to the whole within each category. Valid values: `\"NONE\"` (default),\n     `\"NORMAL\"`, `\"PERCENT_TO_TOTAL\"`.\n \n     '\n - keyword: referenceLines\n   name: Reference Lines\n   types: List of Variant\n   description: Array of reference line values for each threshold to be defined on\n     the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\n - keyword: showLegend\n   name: Show legend\n   types: Boolean\n   description: 'Determines if a color legend displays below the chart. Default: _true_.\n \n     '\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: 'Determines if data values are displayed on each column. Default: _false_.\n \n     '\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for a column. Default:\n     _true_.\n \n     '\n - keyword: allowDecimalAxisLabels\n   name: Allow decimal axis labels\n   types: Boolean\n   description: 'Allows dependent (vertical) values to display as decimal numbers instead\n     of integers. Default: _false_.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: _true_.\n \n     '\n - keyword: colorScheme\n   name: Color scheme\n   types: Any type\n   description: 'Determines which color scheme to use in the chart. Use one of the\n     following valid values: `\"CLASSIC\"` (default), `\"MIDNIGHT\"`, `\"OCEAN\"`, `\"MOSS\"`,\n     `\"BERRY\"`, `\"PARACHUTE\"`, `\"RAINFOREST\"`, `\"SUNSET\"` or define a custom color\n     scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See\n     [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the chart height. Valid values: `\"MICRO\"`, `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`. See [Chart Heights](Chart_Heights.md) for guidance on using\n     the `\"MICRO\"` size.\n \n     '\n - keyword: xAxisStyle\n   name: X-Axis Style\n   types: Text\n   description: 'Determines how to display the labels and axis separators for the X-Axis.\n     Valid values: `\"STANDARD\"` (default), `\"NONE\"`.\n \n     '\n - keyword: yAxisStyle\n   name: Y-Axis Style\n   types: Text\n   description: 'Determines how to display the labels, axis separators, and grid lines\n     for the Y-Axis. Valid values: `\"STANDARD\"` (default), `\"MINIMAL\"`, `\"NONE\"`.\n \n     '\n - keyword: data\n   name: Data\n   types: Any type\n   description: Reference to the record type used for the source of this chart. Can\n     accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\n - keyword: config\n   name: Chart Configuration\n   types: ColumnChartConfig\n   description: 'Configures how to display data on the chart, including fields used\n     for calculations and grouping, using [a!columnChartConfig()](Column_Chart_Config_Component.md).\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, chart data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes chart data each time a specified event completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: \"How often chart data gets refreshed in minutes. When null, chart data\n     will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`,\n     `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: \"When true, chart data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh chart data\n     when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_. \\n\"\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: \"Refreshes chart data each time any of these specific variables change.\n     This allows you to refresh the chart data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n     \\n\"\n reftype: sailcomponent\n scdisplayname: Column Chart\n space: sail_component\n ---\n \n ## Function\n \n function name: a!columnChartField \n  function syntax: a!columnChartField (label,instructions,categories,series,xAxisTitle,yAxisTitle,yAxisMin,yAxisMax,stacking,referenceLines,showLegend,showDataLabels,showTooltips,allowDecimalAxisLabels,labelPosition,helpTooltip,accessibilityText,showWhen,colorScheme,height,xAxisStyle,yAxisStyle,data,config,refreshAlways,refreshAfter,refreshInterval,refreshOnReferencedVarChange,refreshOnVarChange)\n \n Displays numerical data as vertical bars. Use a column chart to graphically display data that changes over time. If trend is more important than specific values, consider using a [line chart](Line_Chart_Component.md).\n \n **See also**:\n \n - [Configure Charts Using Records](Chart_Configuration_Using_Records.md)\n - [Chart Color Schemes](Chart_Color_Scheme.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"categories\", \"name\": \"Categories\", \"types\": \"List of Text String\", \"description\": \"Text to display on the X-Axis next to each column.\"}, {\"keyword\": \"series\", \"name\": \"Series\", \"types\": \"List of ColumnChartSeries\", \"description\": \"Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\"}, {\"keyword\": \"xAxisTitle\", \"name\": \"X-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the independent (horizontal) axis.\"}, {\"keyword\": \"yAxisTitle\", \"name\": \"Y-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the dependent (vertical) axis.\"}, {\"keyword\": \"yAxisMin\", \"name\": \"Min Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the vertical axis.\"}, {\"keyword\": \"yAxisMax\", \"name\": \"Max Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the vertical axis.\"}, {\"keyword\": \"stacking\", \"name\": \"Stacking\", \"types\": \"Text\", \"description\": \"Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: `\\\"NONE\\\"` (default), `\\\"NORMAL\\\"`, `\\\"PERCENT_TO_TOTAL\\\"`.\\n\"}, {\"keyword\": \"referenceLines\", \"name\": \"Reference Lines\", \"types\": \"List of Variant\", \"description\": \"Array of reference line values for each threshold to be defined on the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\"}, {\"keyword\": \"showLegend\", \"name\": \"Show legend\", \"types\": \"Boolean\", \"description\": \"Determines if a color legend displays below the chart. Default: _true_.\\n\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed on each column. Default: _false_.\\n\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for a column. Default: _true_.\\n\"}, {\"keyword\": \"allowDecimalAxisLabels\", \"name\": \"Allow decimal axis labels\", \"types\": \"Boolean\", \"description\": \"Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: _false_.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: _true_.\\n\"}, {\"keyword\": \"colorScheme\", \"name\": \"Color scheme\", \"types\": \"Any type\", \"description\": \"Determines which color scheme to use in the chart. Use one of the following valid values: `\\\"CLASSIC\\\"` (default), `\\\"MIDNIGHT\\\"`, `\\\"OCEAN\\\"`, `\\\"MOSS\\\"`, `\\\"BERRY\\\"`, `\\\"PARACHUTE\\\"`, `\\\"RAINFOREST\\\"`, `\\\"SUNSET\\\"` or define a custom color scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the chart height. Valid values: `\\\"MICRO\\\"`, `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`. See [Chart Heights](Chart_Heights.md) for guidance on using the `\\\"MICRO\\\"` size.\\n\"}, {\"keyword\": \"xAxisStyle\", \"name\": \"X-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels and axis separators for the X-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"yAxisStyle\", \"name\": \"Y-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"MINIMAL\\\"`, `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Any type\", \"description\": \"Reference to the record type used for the source of this chart. Can accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\"}, {\"keyword\": \"config\", \"name\": \"Chart Configuration\", \"types\": \"ColumnChartConfig\", \"description\": \"Configures how to display data on the chart, including fields used for calculations and grouping, using [a!columnChartConfig()](Column_Chart_Config_Component.md).\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes chart data each time a specified event completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh chart data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_. \\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`). \\n\"}]\n \n ## Configuration\n \n There are two ways to configure a column chart:\n \n 1. Set a record type as the data source and define fields to display on the chart.\n 1. Perform your own query and define lists of data within the categories and series.\n \n If you have a record type that uses a database as the source, or a record type with [data sync](records-data-sync.md) enabled, we recommend using the record type as the source of your chart. This configuration is easier because Appian will perform the query for you and display the results directly in the chart.\n \n If your record type uses a web service as the source and does not have data sync enabled, use the *categories* and *series* to construct the chart manually.\n \n ### Using record data\n \n Configuring a column chart using a record type as the source requires using two parameters: *data* and *config*. Once you provide a record type in the *data* parameter and provide the fields in the *config* parameter, the chart displays the results.\n \n See [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md) for details on using a record type as the source. See [Build Reports from Records](report-with-records.md) for examples of reports created with different charts.\n \n ### Using categories and series\n \n When using *categories* and *series*, you must provide the list of data labels and values directly to these parameters. \n \n #### Categories\n \n - The order of items in the *categories* array determines the display order of categories on the chart with the left-most item in the array appearing on the far left of the x-axis.\n - For each null or empty item in the array passed to *categories*, `[Category #]` displays on the x-axis with `#` as the index number in the *categories* array of the null or empty item. For example, `[Category 1]`.\n - The index of each item in the *categories* array must match with the index of its *series* data value.\n \n #### Series\n \n - A single *series* item produces a bar for each *categories* item with all bars the same color. The *data* parameter should contain a list of values that match the size of the list for categories.\n - Use [a!chartSeries()](Chart_Series_Component.md) to create the Chart Series array.\n - When you have multiple *series* items, Appian recommends setting *showLegend* to `true`, so user's know what each color represents. When you only have one *series* item, you can use the *label* or *instructions* fields to tell users what the data represents.\n - If the *series* argument has a non-null label value paired with a 0, null, or empty data value, the data value still displays in the legend.\n - If the *series* argument has a null or empty label value paired with a non-null data value, the label value displays as `[Series #]` with `#` as the index number of the data value. For example, `[Series 1]`.\n - If *series.data* values are small and less than a whole number, Appian recommends settings *allowDecimalAxisLabels* to `true`.\n - Multiple *series* items when *stacking* is `PERCENT_TO_TOTAL` also shows a single bar for each category, but bars have a total height of 100%. Each value shows the percent contribution to the total within each category.\n \n #### Series and stacking\n \n - Multiple *series* items when *stacking* is `NONE` or null produces a set of bars for each *categories* item - one bar for each *series* item with each bar in that set a different color. The order of the label items determine the display order of the columns in each set with the first label item appearing at the top of the set.\n - Multiple *series* items when *stacking* is `NORMAL` produces a single bar for each categories item with each *series* item displayed as a different segment of the bar in a different color, so they appear stacked on top of each other. The order of the *series.label* items determine the display order of the bar segments with the first *series.label* item appearing furthest from the axis.\n \n ## Usage considerations\n \n ### Chart height and background color\n \n - Column charts with a height of `\"TALL\"`, `\"MEDIUM\"` or `\"SHORT\"` will show a scroll bar if too many categories are provided. `\"MICRO\"` charts will only show scroll bars on mobile devices; on a web browser, these charts will adjust to fit the size of the column.\n - When the chart is placed in a colored card, the chart background will match the color of the card. Text labels and lines in the chart will also adjust if a dark background color is used. See the [SAIL Design System](sail/ux-charts.md#background-colors) for best practices on using charts with background colors.\n \n ### Chart data and stacking\n \n - If *data* contains `a!recordData` or a record type reference, the categories and series parameters are ignored.\n - The Percent to Total stacking will also update the axes and tooltips to show with a percentage. Also, the minimum and maximum y-axes values refer to percentages. For example, `yAxisMax: 50` would set the maximum y-axis at 50%.\n \n ### Chart refresh behavior\n \n - You can define `a!refreshVariable` parameters directly in the chart without creating additional local variables. The only exception being `refreshOnVarChange`, which refreshes the chart after a specific local variable has changed.\n - When you use a record type as the source of your chart, use the refresh parameters in the chart instead of using local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function. This is because the refresh behavior will automatically apply to the fields specified in the *data* parameter of the chart.\n - If you're not using a record type as the source of your chart, it's recommended to use local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function to define refresh behavior since you won't use the *data* parameter to configure your chart. \n \n ## Examples\n The examples below demonstrate how to configure your charts using categories and series. For examples on using record data, see [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md).\n \n ### Single series column chart with label, y-axis title, and tooltips\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 860 %} \n a!columnChartField(\n   label: \"Most Tasks\",\n   categories: {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\"},\n   series: {\n     a!chartSeries(label: \"Tasks\", data: {34, 30, 30, 27, 24, 19, 18, 16})\n   },\n   yAxisTitle: \"Tasks\",\n   showLegend: false,\n   showTooltips: true\n )\n {% endsailbox %}\n \n ### Multiple series column chart with label, x-axis title, y-axis title, and legend\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 860 %} \n a!columnChartField(\n   label: \"2012 Tempo Usage Trends\",\n   categories: {\"Qt 1\", \"Qt 2\", \"Qt 3\", \"Qt 4\"},\n   series: {\n     a!chartSeries(label: \"IT\", data: {92, 94, 93, 95}),\n     a!chartSeries(label: \"Human Services\", data: {84, 83, 85, 86}),\n     a!chartSeries(label: \"Sales\", data: {70, 63, 90, 72}),\n     a!chartSeries(label: \"Marketing\", data: {90, 70, 90, 90})\n   },\n   colorScheme: \"SUNSET\",\n   xAxisTitle: \"Quarter\",\n   yAxisTitle: \"% Active\",\n   showLegend: true\n )\n {% endsailbox %}\n \n ### Multiple series column chart with label, x-axis title, stacking, legend, and data labels\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 860 %} \n a!columnChartField(\n   label: \"Defect Tickets\",\n   categories: {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"},\n   series: {\n     a!chartSeries(label: \"Internal\", data: {3, 1, 2, 2, 2, 1, 0, 1, 0, 1, 0, 1}),\n     a!chartSeries(label: \"Customer\", data: {4, 3, 3, 2, 4, 2, 1, 2, 0, 0, 1, 2})\n   },\n   colorScheme: \"MOSS\",\n   yAxisTitle: \"Number of Tickets Logged\",\n   stacking: \"NORMAL\",\n   showLegend: true,\n   showDataLabels: true\n )\n {% endsailbox %}\n \n >appian-style-note\n > Column charts with more than 10 points of data in a series can cause performance issues on the Appian Android application."}, {"doc": "Chart_Custom_Color_Scheme_Component.md", "content": "---\n layout: function\n title: Chart Custom Color Scheme Component\n category: function_page\n compatibility: -crf\n excerpt: A custom list of colors to apply to any chart.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!colorSchemeCustom\n fncsubcat: Charts\n parameters:\n - keyword: Colors\n   name: Colors\n   types: Text\n   description: 'List of colors to use in the custom color scheme. Valid values: any\n     valid hex colors. Maximum colors allowed: 12.\n \n     '\n reftype: sailcomponent\n scdisplayname: Chart Custom Color Scheme\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!colorSchemeCustom \n  function syntax: a!colorSchemeCustom (Colors)\n \n A custom list of colors to apply to any chart.\n \n **See also**: [Chart Color Schemes](Chart_Color_Scheme.md)\n \n ## Parameters\n \n [{\"keyword\": \"Colors\", \"name\": \"Colors\", \"types\": \"Text\", \"description\": \"List of colors to use in the custom color scheme. Valid values: any valid hex colors. Maximum colors allowed: 12.\\n\"}]\n \n ## Usage considerations\n \n ### Series colors\n \n - If there are more series than colors provided, the colors enumerate through the list again from the beginning.\n - Users can still configure the colors of individual [chart series](Chart_Series_Component.md) while using a custom color scheme. Any series configurations will take precedence over automatically assigned color scheme colors.\n \n ## Examples \n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 860 %}\n a!pieChartField(\n   label: \"Opportunity Sources\",\n   labelPosition: \"ABOVE\",\n   series: {\n     a!chartSeries(label: \"Other\", data: 10),\n     a!chartSeries(label: \"Website\", data: 20),\n     a!chartSeries(label: \"Client Referrals\", data: 30)\n   },\n   colorScheme: a!colorSchemeCustom(\n     colors: {\"#05286B\", \"#379683\", \"#5CDB95\"}\n   ),\n   showDataLabels: true,\n   showAsPercentage: true\n )\n {% endsailbox %}"}, {"doc": "Web_Link_Component.md", "content": "---\n layout: function\n title: Safe Link Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Defines a link to an external web page.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!safeLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text displayed as the link name the user clicks on.\n - keyword: uri\n   name: URI\n   types: SafeURI\n   description: URI target of the hyperlink. See [SafeURI](Appian_Data_Types.md#safeuri).\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.'\n - keyword: openLinkIn\n   name: Open Link In\n   types: Text\n   description: '(Browser-Only) Determines where the linked content should open. Valid\n     values: `\"SAME_TAB\"`, `\"NEW_TAB\"` (default).'\n reftype: sailcomponent\n scdisplayname: Safe Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!safeLink \n  function syntax: a!safeLink (label,uri,showWhen,openLinkIn)\n \n Defines a link to an external web page. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [Link](Link_Component.md)\n - [Read-Only Grid](Paging_Grid_Component.md)\n - [Images](Image_Component.md)\n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text displayed as the link name the user clicks on.\"}, {\"keyword\": \"uri\", \"name\": \"URI\", \"types\": \"SafeURI\", \"description\": \"URI target of the hyperlink. See [SafeURI](Appian_Data_Types.md#safeuri).\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\"}, {\"keyword\": \"openLinkIn\", \"name\": \"Open Link In\", \"types\": \"Text\", \"description\": \"(Browser-Only) Determines where the linked content should open. Valid values: `\\\"SAME_TAB\\\"`, `\\\"NEW_TAB\\\"` (default).\"}]\n \n ## Usage considerations\n \n ### Displaying links\n \n - To display a single link or array of links, put safe links inside of the [link component](Link_Component.md).\n - To display a link in a grid, put the safe link inside of a [grid text column](Grid_Text_Column_Component.md).\n - To add a link to an image, put the safe link inside a [document image](Document_Image_Component.md) or [web image](Web_Image_Component.md).\n - To add a link to a chart series, put the safe link inside a [chart series component](Chart_Series_Component.md).\n \n ### Specifying URI protocols and using telephone links\n \n - It's recommended that the URI use a specific protocol. When no protocol is specified, the component will generate a hyperlink using the system's protocol and domain.\n - The telephone link URI (\"tel:\") is supported on the Appian Mobile application. If a user clicks this link in the application, the link will open a mobile device's default phone dialer. \n - Telephone links may work in a web browser, but behavior can differ based on operating system and whether any telephone supported applications or extensions are installed.\n \n ### Opening links in new tabs & windows\n \n - A link created by `a!safeLink()` opens in a new tab by default. Opening a link in the same tab can be configured using the *openLinkIn* parameter.\n - Note that a user's browser may still be configured so that new tabs are instead opened as new windows.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### To an external website\n \n ```sail \n a!safeLink(\n   label: \"Company web site\",\n   uri: \"http://www.appian.com\"\n )\n ```\n \n Returns a hyperlink to `http://www.appian.com`\n \n ### To a telephone number in the Appian Mobile Application\n \n ```sail \n a!richTextDisplayField(\n   value: if( \n     a!isNativeMobile(),\n   a!richTextItem(\n     text: (\n       \"(555)-555-5555\"\n     ),\n     link: a!safeLink(\n       label: \"(555)-555-5555\",\n       uri: \"tel: (555)-555-5555\"\n     ),\n \n   ),\n   \"(555)-555-5555\"\n  )\n )\n ```\n \n Returns a telephone link which can be used on mobile devices via the Appian Mobile application. Use [isNativeMobile()](fnc_scripting_a_isNativeMobile.md) to only show this link in the Appian Mobile application."}, {"doc": "Progress_Bar_Component.md", "content": "---\n layout: function\n title: Progress Bar Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a completion percentage in bar style.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!progressBarField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: percentage\n   name: Percentage\n   types: Number (Integer)\n   description: Number to display between 0 and 100.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Determines the color. Valid values: Any valid hex color or `\"ACCENT\"`\n     (default), `\"POSITIVE\"`, `\"NEGATIVE\"`, `\"WARN\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Thickness of the progress bar. Valid values: `\"THIN\"` (default), `\"THICK\"`.\n \n     '\n - keyword: showPercentage\n   name: Show Percentage\n   types: Boolean\n   description: 'Determines whether the progress bar displays the percentage. Default:\n     true.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Progress Bar\n space: sail_component\n ---\n \n ## Function\n \n function name: a!progressBarField \n  function syntax: a!progressBarField (label,instructions,percentage,labelPosition,helpTooltip,accessibilityText,color,showWhen,style,showPercentage,marginAbove,marginBelow)\n \n Displays a completion percentage, such as receiving all the necessary approval tasks, completing a certain number of on-boarding processes, or completing a single process. Similar to the [Gauge](Gauge_Component.html), but with a bar style rather than a circular style.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"percentage\", \"name\": \"Percentage\", \"types\": \"Number (Integer)\", \"description\": \"Number to display between 0 and 100.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Determines the color. Valid values: Any valid hex color or `\\\"ACCENT\\\"` (default), `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, `\\\"WARN\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Thickness of the progress bar. Valid values: `\\\"THIN\\\"` (default), `\\\"THICK\\\"`.\\n\"}, {\"keyword\": \"showPercentage\", \"name\": \"Show Percentage\", \"types\": \"Boolean\", \"description\": \"Determines whether the progress bar displays the percentage. Default: true.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Using the percentage parameter\n \n - If an expression for the *percentage* parameter results in a decimal number, the system automatically casts the value to an integer.\n - If the *percentage* parameter is negative or null, the bar renders with 0% filled and displays the provided *percentage* as a label on the bar.\n - If the *percentage* parameter is greater than 100, the bar renders with 100% filled and displays the provided *percentage* as a label on the bar.\n \n ### Bar thickness\n \n - We recommend you use thin styling on the progress bar when working with a small space on an interface, such as within grids.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Thick progress bar with details\n \n {% sailbox 600 %} \n a!localVariables(\n   local!completedTasks: 143,\n   local!totalTasks: 150,\n   a!progressBarField(\n     label: \"Tasks Completed\",\n     instructions: local!completedTasks & \" of \" & local!totalTasks & \" done\",\n     percentage: (local!completedTasks / local!totalTasks) * 100,\n     color: \"ACCENT\",\n     style: \"THICK\"\n   )\n )\n {% endsailbox %}\n \n ### Thin progress bar with color based on value\n \n {% sailbox 600 %} \n a!localVariables(\n   local!evals: {\n     {name: \"David Rogers\", completedEvals: 6, totalEvals: 14},\n     {name: \"Marigold Brown\", completedEvals: 13, totalEvals: 15}\n   },\n   {\n     a!richTextDisplayField(\n       value: {\n         a!richTextHeader(\n           text: {\"Evaluations Completed\"},\n           size: \"SMALL\"\n         )\n       }\n     ),\n     a!forEach(\n       items: local!evals,\n       expression: a!progressBarField(\n         label: fv!item.name,\n         percentage: tointeger(fv!item.completedEvals)/tointeger(fv!item.totalEvals) * 100,\n         color: if(tointeger(fv!item.completedEvals)/tointeger(fv!item.totalEvals) * 100 > 60, \"POSITIVE\", \"NEGATIVE\")\n       )\n     )\n    }\n   )\n {% endsailbox %}"}, {"doc": "News_Entry_Link_Component.md", "content": "---\n layout: function\n title: News Entry Link Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Defines a link to news entries.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!newsEntryLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text associated with this link.\n - keyword: entry\n   name: Entry\n   types: Text\n   description: The ID of the linked feed entry.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: News Entry Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!newsEntryLink \n  function syntax: a!newsEntryLink (label,entry,showWhen)\n \n Defines a link to news entries. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [Link](Link_Component.md)\n - [Read-Only Grid](Paging_Grid_Component.md)\n - [Images](Image_Component.md)\n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text associated with this link.\"}, {\"keyword\": \"entry\", \"name\": \"Entry\", \"types\": \"Text\", \"description\": \"The ID of the linked feed entry.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using and finding the entry ID\n \n - To get an entry ID of a post created via smart service, use the `Entry Id` node output of the [Post Event to Feed](Post_Event_to_Feed_Smart_Service.md) or the [Post System Event to Feed](Post_System_Event_to_Feed_Smart_Service.md) smart services.\n - To manually get an entry ID from a post while browsing the news feed with a web browser, click on the post's timestamp. The end of the resulting URL in your browser address bar is of the form `tempo/news/entry/[entry ID]`.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Basic news entry link\n \n ```sail \n a!newsEntryLink(\n   label: \"Discuss This Case\",\n   entry: \"f-109\"\n )\n ```"}, {"doc": "authorization_link_component.md", "content": "---\n layout: function\n title: Authorization Link\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Defines a link to authorize a user for a connected system that uses OAuth\n   2.0 Authorization Code grant.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!authorizationLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text displayed as the link name the user clicks on.\n - keyword: connectedSystem\n   name: Connected System\n   types: Connected System\n   description: 'Connected system used to generate the authorization link. Provide\n     the connected system value returned by an integration when the response indicates\n     that the user needs to authorize.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Authorization Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!authorizationLink \n  function syntax: a!authorizationLink (label,connectedSystem,showWhen)\n \n Defines a link to authorize a user for a connected system that uses OAuth 2.0 Authorization Code grant. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [OAuth 2.0: Authorization Code Grant](Oauth_connected_system.md#providing-users-a-way-to-authorize)\n - [Link](Link_Component.md),\n - [Read-Only Grid](Paging_Grid_Component.md),\n - [Images](Image_Component.md),\n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text displayed as the link name the user clicks on.\"}, {\"keyword\": \"connectedSystem\", \"name\": \"Connected System\", \"types\": \"Connected System\", \"description\": \"Connected system used to generate the authorization link. Provide the connected system value returned by an integration when the response indicates that the user needs to authorize.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Authorizing users & getting data\n \n - Be sure to read through the external system's documentation to understand what is returned when the user needs to authorize or reauthorize\n - For integrations getting data, use dot notation. For integrations writing data use `fv!connectedSystem`.\n - If the mobile user is signed in as one user in the mobile browser and a different user in the mobile app, authorization will fail.\n \n ### Opening authorization links\n \n - A link created by `a!authorizationLink()` opens in a new browser window.\n - For mobile, a link created by `a!authorizationLink()` will open the device's default browser\n   - Authorization links are made for mobile, so you don't need to worry about the user not being signed-in in the mobile browser.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n When connecting with OAuth, integrations can either get data from or post data to another system\n \n ### Integrations retrieving data\n \n Assuming that the integration used a custom error message that returned `Access_token` when an access token was missing, the following interface expression will provide an authorization link.\n \n ```sail \n a!localVariables(\n   local!integrationResult: rule!EXAMPLE_OAuthIntegration(),\n   a!linkField(\n     label: \"Example Authorization Link\",\n     /* show when */\n     showWhen: local!integrationResult.error.message = \"Access_token\",\n     links: a!authorizationLink(\n       label: \"Authorize\",\n       connectedSystem: local!integrationResult.connectedSystem\n     )\n   )\n )\n ```\n \n ### Integrations writing data\n \n If the integration is writing data to another system via OAuth, the integration would be called as a result of a save. These types of integrations, by default, return *onSuccess* and *onError*. `fv!connectedSystem` is returned when there's an error and can be retrieved through the onError parameter and used to populate the authorization link field. \n \n ```sail \n a!localVariables(\n   local!results,\n   local!connectedSystem,\n   local!verify,\n   a!sectionLayout(\n     contents: a!columnsLayout(\n       columns: {\n         a!columnLayout(\n           contents: {\n             a!buttonLayout(\n               secondaryButtons: {\n                 a!buttonWidget(\n                   label: \"Save Changes\",\n                   saveInto: {\n                     a!save( local!verify, true),\n                     rule!EXAMPLE_OAuthIntegration(\n                       onSuccess: a!save( local!results, fv!result),\n                       onError: a!save( local!connectedSystem, fv!connectedSystem)\n                     )\n                   }\n                 )\n               }\n             ),\n             a!linkField(\n               label: \"Authorization After Write Attempt\",\n               showWhen: and(not(isnull(local!connectedSystem)), not(isnull(local!verify))),\n               links: a!authorizationLink(\n                 label: \"Authorize\",\n                 connectedSystem: local!connectedSystem\n               )\n             )\n           }\n         )\n       }\n     )\n   )\n )\n ```"}, {"doc": "Record_Action_Item_Component.md", "content": "---\n layout: function\n title: Record Action Item\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays a record action defined within a record action field or a read-only\n   grid that uses a record type as the data source. A record action is an end-user\n   action configured within a record type object, such as a related action or a record\n   list action.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!recordActionItem\n fncsubcat: Action\n parameters:\n - keyword: action\n   name: Action\n   types: Record Action Reference\n   description: 'A record action reference associated with a record type, configured\n     using the `recordType!` domain. For example, `recordType!Case.actions.editCase`,\n     will use the display name, process model, icon, context, and visibility set in\n     the action configured in the record type.\n \n     '\n - keyword: identifier\n   name: Identifier\n   types: Any Type\n   description: \"Individual record ID within the record type. Only required for related\n     actions.\\n    - For record types that use a database as a data source, record\n     ID is the primary key in the data store entity.\\n    - For record types that use\n     a process as the data source, record ID is the ID for the process.\\n    - For\n     record types that use a web service as the data source, record ID is the value\n     returned to the ID field of the DataSubset produced by the record's source expression.\\n\"\n reftype: sailcomponent\n scdisplayname: Record Action Item\n scsubcat: Action_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!recordActionItem \n  function syntax: a!recordActionItem (action,identifier)\n \n Displays a record action defined within a record action field or a read-only grid that uses a record type as the data source. A record action is an end-user action configured within a record type object, such as a related action or a record list action.\n \n **See also**: [Record action field](Record_Action_Component.md), [Record action design guidance](sail/ux-record-actions.md)\n \n ## Parameters\n \n [{\"keyword\": \"action\", \"name\": \"Action\", \"types\": \"Record Action Reference\", \"description\": \"A record action reference associated with a record type, configured using the `recordType!` domain. For example, `recordType!Case.actions.editCase`, will use the display name, process model, icon, context, and visibility set in the action configured in the record type.\\n\"}, {\"keyword\": \"identifier\", \"name\": \"Identifier\", \"types\": \"Any Type\", \"description\": \"Individual record ID within the record type. Only required for related actions.\\n    - For record types that use a database as a data source, record ID is the primary key in the data store entity.\\n    - For record types that use a process as the data source, record ID is the ID for the process.\\n    - For record types that use a web service as the data source, record ID is the value returned to the ID field of the DataSubset produced by the record's source expression.\\n\"}]\n \n ## Usage considerations\n \n ### Icons and tooltips\n \n - Record action items use the icon configured in the record type.\n - Both the label and description for an action will appear as a tooltip.\n \n ### Displaying record actions\n \n When you configure a record action, follow the guidance below to ensure the record action displays in the component where it is referenced.\n \n - Record action items are displayed based upon record type security, process model security, and the action visibility expression configured in the record type. \n - When configuring the *recordActions* parameter of a read-only grid, use `fv!identifier` as the identifier to call the selected row ID for a related action. Make sure the grid has values for the *Selection* parameters properly set up, including the *selectable*, *selectionValue*, and *selectionSaveInto* parameters.\n - Record action items that reference a related action will not appear when the *identifier* parameter is null or invalid.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n Record type object references are specific to each environment. If you copy and paste these examples into your interface, they will not evaluate. Use them as a references only.\n \n ### Record action item in the Employee record\n \n ```sail \n a!recordActionField(\n   actions: {\n     a!recordActionItem(\n     /* For the \"action\" parameter below, replace the record-action reference \n      * (recordType!Department.actions.create) with a valid record-action reference in your environment.\n      */\n      action: recordType!Department.actions.create\n     ),\n     a!recordActionItem(\n    /* For the \"action\" parameter below, replace the record-action reference \n     * (recordType!Department.actions.update) with a valid record-action reference in your environment.\n     */\n      action: recordType!Department.actions.update,\n      identifier: rv!identifier\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![Basic record action items](images/record_components/basic_record_action_items.png){:.screenshot}"}, {"doc": "Web_Video_Component.md", "content": "---\n layout: function\n title: Web Video\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays a video from the web for use in a video field.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!webVideo\n fncsubcat: Display\n parameters:\n - keyword: source\n   name: Source\n   types: SafeURI\n   description: 'Location of the video. See [SafeURI](Appian_Data_Types.md#safeuri).\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: Optional text to display in the mouseover text for the video.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Web Video\n space: sail_component\n ---\n \n ## Function\n \n function name: a!webVideo \n  function syntax: a!webVideo (source,tooltip,showWhen)\n \n Displays a video from the web for use in a [video](Video_Component.md) field.\n \n ## Parameters\n \n [{\"keyword\": \"source\", \"name\": \"Source\", \"types\": \"SafeURI\", \"description\": \"Location of the video. See [SafeURI](Appian_Data_Types.md#safeuri).\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Optional text to display in the mouseover text for the video.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the source parameter\n \n - The *source* parameter must contain a URL that links directly to the source video. A URL to a website containing a video (for example, a Youtube link) will not work.\n - Appian documents cannot be used as the source video."}, {"doc": "Milestone_Component.md", "content": "---\n layout: function\n title: Milestone Component\n category: function_page\n compatibility: -crf\n excerpt: Displays the completed, current, and future steps of a process or sequence.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!milestoneField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: steps\n   name: Steps\n   types: List of Text String\n   description: Array of labels describing the sequence of steps.\n - keyword: links\n   name: Links\n   types: List of Variant\n   description: 'Array of links to apply to the steps. Create links with a!documentDownloadLink(),\n     a!dynamicLink(), a!newsEntryLink(), a!processTaskLink(), a!recordLink(), a!reportLink(),\n     a!safeLink(), a!startProcessLink(), a!submitLink(), a!userRecordLink(), or a!authorizationLink().\n \n     '\n - keyword: active\n   name: Active\n   types: Number (Integer)\n   description: 'Index of the current step. When null, all steps are in the future.\n     When -1, all steps are completed.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: orientation\n   name: Orientation\n   types: Text\n   description: 'Determines the layout of the milestone steps. Valid values: `\"HORIZONTAL\"`\n     (default), `\"VERTICAL\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Determines the fill color. Valid values: Any valid hex color or `\"ACCENT\"`\n     (default), `\"POSITIVE\"`, `\"NEGATIVE\"`, `\"WARN\"`.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Milestone\n space: sail_component\n ---\n \n ## Function\n \n function name: a!milestoneField \n  function syntax: a!milestoneField (label,instructions,steps,links,active,labelPosition,helpTooltip,showWhen,orientation,accessibilityText,color,marginAbove,marginBelow)\n \n Displays the completed, current, and future steps of a process or sequence, such as a user's current step in a wizard or the current state of a business process.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"steps\", \"name\": \"Steps\", \"types\": \"List of Text String\", \"description\": \"Array of labels describing the sequence of steps.\"}, {\"keyword\": \"links\", \"name\": \"Links\", \"types\": \"List of Variant\", \"description\": \"Array of links to apply to the steps. Create links with a!documentDownloadLink(), a!dynamicLink(), a!newsEntryLink(), a!processTaskLink(), a!recordLink(), a!reportLink(), a!safeLink(), a!startProcessLink(), a!submitLink(), a!userRecordLink(), or a!authorizationLink().\\n\"}, {\"keyword\": \"active\", \"name\": \"Active\", \"types\": \"Number (Integer)\", \"description\": \"Index of the current step. When null, all steps are in the future. When -1, all steps are completed.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"orientation\", \"name\": \"Orientation\", \"types\": \"Text\", \"description\": \"Determines the layout of the milestone steps. Valid values: `\\\"HORIZONTAL\\\"` (default), `\\\"VERTICAL\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Determines the fill color. Valid values: Any valid hex color or `\\\"ACCENT\\\"` (default), `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, `\\\"WARN\\\"`.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Using the active and links parameters\n \n - The *active* parameter can't be `0` or greater than the total number of items in the *steps* parameter. If it's null, all steps display as future steps. If it's `-1`, all steps display as completed.\n - Each item in the *links* array renders the corresponding item in the *steps* array as a link. An item in the *steps* array for which there is a null value or no value in the *links* array will render as plain text. There is no need to pad the end of the *steps* array with *null*.\n \n ### Number and width of steps\n \n - The *steps* parameter must contain at least two items. We recommend that *steps* contains no more than seven items.\n - When viewed on a mobile device, the milestone component scrolls instead of shrinking the step width.\n \n ### Length of text values\n \n - For an easy to read and professional looking interface, use concise text values of similar length. \n - The following will be trimmed:\n   - Indentations using **tab**.\n   - Leading or trailing spaces.\n   - Leading or trailing line breaks.\n - Two spaces between words will be shortened to one.\n - There is no maximum character limit for each item in the *steps* array; however, text is truncated based on the following:\n   - Vertical Orientation: The first three lines of the text displays. The number of characters allowed for each line is determined by the number of steps and the amount of horizontal space for the component.\n   - Horizontal Orientation: Text displays on a single line until it runs out of horizontal space.\n \n ### Milestone and step color\n \n - By default, the milestone bar shows the accent color above completed and current steps and gray above future steps. You can select a custom color for your milestone in the *color* parameter.\n - Text colors: \n   - Active step: black. \n   - Completed step with no link: light gray. \n   - Future steps: dark gray. \n   - Text with a link: accent color.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Horizontal milestone\n \n {% sailbox 600 %}\n a!milestoneField(\n   label: \"Home Repair Claim Process\",\n   instructions: \"Customer #2325691\",\n   steps: {\n     \"Submit Customer Request\", \n     \"Set Up On-Site Appt\", \n     \"File Assessment\", \n     \"Submit Proposal\", \n     \"Submit Agreement\", \n     \"Finalize Repairs\"\n   },\n   active: 3,\n   color: \"ACCENT\"\n )\n {% endsailbox %}\n \n \n ### Vertical milestone\n \n {% sailbox 600 %}\n a!milestoneField(\n   steps: {\n     \"Review Cart\", \n     \"Billing Information\", \n     \"Shipping Information\", \n     \"Confirm Order\"\n   },\n   active: 2,\n   orientation: \"VERTICAL\",\n   color: \"#674ea7\"\n )\n {% endsailbox %}\n \n \n ### Milestone with conditional color changing\n \n {% sailbox 600 %}\n {\n   a!localVariables(\n     local!steps: {\n       a!map(id: 1, name: \"Assigned\", color: \"NEGATIVE\"),\n       a!map(id: 2, name: \"In progress\", color: \"WARN\"),\n       a!map(id: 3, name: \"Completed\", color: \"POSITIVE\")\n     },\n     local!activeStep: 1,\n     a!milestoneField(\n       label: \"Midterm - Spring 2021\",\n       labelPosition: \"ABOVE\",\n       steps: local!steps.name,\n       links: {\n         a!forEach(\n           items: local!steps,\n           expression: a!dynamicLink(\n             label: fv!item.name,\n             value: fv!item.id,\n             saveInto: local!activeStep\n           )\n         )\n       },\n       active: local!activeStep,\n       orientation: \"HORIZONTAL\",\n       color: local!steps.color[wherecontains(local!activeStep, local!steps.id)]\n     )\n \n   )\n }\n {% endsailbox %}\n \n ![gif of a milestone that changes color from red, to yellow, to green as it progresses through the milestone steps](images/conditional_color_milestone_example.gif){:.screenshot}"}, {"doc": "Document_Viewer_Component.md", "content": "---\n layout: function\n title: Document Viewer Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays a document from document management on an interface.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!documentViewerField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: 'Determines where the label appears. Valid values: `\"ABOVE\"` (default),\n     `\"ADJACENT\"`, `\"COLLAPSED\"`, `\"JUSTIFIED\"`.\n \n     '\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: document\n   name: Document\n   types: Document\n   description: The document to display.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the field height. Valid values: `\"SHORT\"`, `\"MEDIUM\"` (default),\n     `\"TALL\"`.\n \n     '\n - keyword: altText\n   name: Alternative Text\n   types: Text\n   description: Equivalent alternate text provided to assistive technology.\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the user is prevented from interacting with the document.\n     Default: false.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Document Viewer\n space: sail_component\n ---\n \n ## Function\n \n function name: a!documentViewerField \n  function syntax: a!documentViewerField (label,labelPosition,instructions,helpTooltip,document,showWhen,height,altText,disabled,accessibilityText,marginAbove,marginBelow)\n \n Displays a document from document management on an interface.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: `\\\"ABOVE\\\"` (default), `\\\"ADJACENT\\\"`, `\\\"COLLAPSED\\\"`, `\\\"JUSTIFIED\\\"`.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"document\", \"name\": \"Document\", \"types\": \"Document\", \"description\": \"The document to display.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the field height. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"altText\", \"name\": \"Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text provided to assistive technology.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the user is prevented from interacting with the document. Default: false.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Displaying documents\n \n - This component displays documents stored in Appian. To display documents from another system use the [Web Content Field](Web_Content_Component.md).\n - `Document not available` will be displayed if the document is invalid, has been deleted, or the user does not have access to view it.\n - This component is not intended for displaying images or videos. To display an image from a document in Appian use a [Document Image](Document_Image_Component.md). To display a video use a [Video Field](Video_Component.md).\n \n ### Viewing documents on different devices\n \n - Document viewing behavior differs depending on the document type and browser. Some browsers may render documents inline, while other browsers or file types may be downloaded. Browser plug-ins or extensions may impact this behavior. Consider the browsers that your users will be using to access your application.\n - On Appian Mobile applications, the document viewer component appears as a document download link. The value provided in `altText` is used for the link label.\n \n ### Security\n \n - For security purposes, documents are loaded using the static content URL. `Missing system configuration` will be displayed if this domain is not configured on your Appian instance. Refer to [Post-Install Configurations](Post-Install_Configurations.md#configure-your-static-and-dynamic-content-urls) for more details on this configuration.\n \n ## Examples\n \n *Copy and paste an example into an interface object in **EXPRESSION MODE** to see it displayed.*\n \n ### Displaying a blank document\n \n  Replace the `document` field value with a valid document in your environment.\n  \n ```sail\n {\n   a!documentViewerField(\n     label: \"Appian Whitepaper\",\n     document: 282578,\n     height: \"TALL\",\n     altText: \"5 Digital Transformation Predictions for 2018 and Beyond\"\n   )\n }\n ```\n \n ### Displaying a document image using a constant\n \n To test this example, replace `cons!MY_PDF` with a constant that points to a document in your environment.\n \n Note that this uses the `document()` function to access the name of the document to display in the interface.\n \n ```sail\n a!documentViewerField(\n   label: document(\n     documentId: cons!MY_PDF,\n     property: \"name\"\n   ),\n   document: cons!MY_PDF\n )\n ```"}, {"doc": "Web_Content_Component.md", "content": "---\n layout: function\n title: Web Content Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays content inline from an external source.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!webContentField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component  is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: source\n   name: Source\n   types: Safe URI\n   description: Location of the external content.\n - keyword: showBorder\n   name: Show Border\n   types: Boolean\n   description: 'Determines whether the field has an outer border. Default: false.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the layout height. Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: altText\n   name: Alternative Text\n   types: Text\n   description: Equivalent alternate text provided to assistive technology.\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the user is prevented from interacting with the web\n     content. Default: false.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Web Content Field\n space: sail_component\n ---\n \n ## Function\n \n function name: a!webContentField \n  function syntax: a!webContentField (label,labelPosition,instructions,helpTooltip,showWhen,source,showBorder,height,altText,disabled,accessibilityText,marginAbove,marginBelow)\n \n Displays content inline from an external source.\n \n > appian-style-note\n > To protect users from how **Safari** handles memory, the Web Content component will display as an inline link when viewed in those browsers.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component  is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"source\", \"name\": \"Source\", \"types\": \"Safe URI\", \"description\": \"Location of the external content.\"}, {\"keyword\": \"showBorder\", \"name\": \"Show Border\", \"types\": \"Boolean\", \"description\": \"Determines whether the field has an outer border. Default: false.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the layout height. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"altText\", \"name\": \"Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text provided to assistive technology.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the user is prevented from interacting with the web content. Default: false.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Embedding content\n \n - Not all content can be embedded. The best way to know if your content can be embedded or not is to test it. If it can't be embedded, the component will be empty. Some sources explicitly prevent being embedded, such as [https://www.google.com](https://www.google.com) and [https://www.yahoo.com/](https://www.yahoo.com/).\n - Screen readers will typically announce the embedded page's title (found in the `<title>` attribute). When no title is provided, the `altText` value is used.\n \n ### Supported content\n \n - This component supports displaying external content only. Internal Appian interfaces and Appian URLs are not supported.\n \n ## Examples\n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.* \n \n ### Web content\n ```sail \n a!webContentField(\n   source: \"https://example.com\",\n   height: \"MEDIUM\",\n   showBorder: true,\n   altText: \"Example Domain\"\n )\n ```"}, {"doc": "Dashboard_Layout_171.md", "content": "---\n layout: function\n title: a!dashboardLayout_17r1 Component [Deprecated]\n reftype: sailcomponent\n category: function_page\n compatibility: -crf\n fncname: a!dashboardLayout_17r1\n depver: 18.2\n fnccat: \u4e00Deprecated\u4e00\n fncsyntax: '**a!dashboardLayout_17r1**( [*firstColumnContents*], [*secondColumnContents*]\n   )'\n scdisplayname: Dashboard Layout 17.1\n evolved_fncname: a!dashboardLayout\n evolved_reason: Replaced _firstColumnContents_ and _secondColumnContents_ with `contents`.\n   Now supports greater than two-column layout.\n ---\n \n The dashboard layout 17r1 has been deprecated, and will be removed in a future release of Appian. Instead, wrap your components in an array `{}`. For information about the dashboard layout, see the [Appian 19.4 documentation](https://docs.appian.com/suite/help/19.4/Dashboard_Layout.html)."}, {"doc": "Bar_Chart_Component_21r4.md", "content": "---\n layout: function\n title: a!barChartField_21r4 Component\n category: function_page\n compatibility: -crf\n excerpt: Displays numerical data as horizontal bars. Use a bar chart to display several\n   values at the same point in time.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!barChartField_21r4\n evolved_fncname: a!barChartField\n evolved_reason: Fixed existing behavior in stacked bar charts so that the values in\n   the stacked bars display in the same order as the items in the legend.\n fncsubcat: Charts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: categories\n   name: Categories\n   types: Text Array\n   description: Text to display on the x-axis next to each bar.\n - keyword: series\n   name: Series\n   types: Chart Series Array\n   description: Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\n - keyword: xAxisTitle\n   name: X-Axis Title\n   types: Text\n   description: Title for the independent (vertical) axis.\n - keyword: yAxisTitle\n   name: Y-Axis Title\n   types: Text\n   description: Title for the dependent (horizontal) axis.\n - keyword: yAxisMin\n   name: Min Y-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the horizontal axis.\n - keyword: yAxisMax\n   name: Max Y-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the horizontal axis.\n - keyword: stacking\n   name: Stacking\n   types: Text\n   description: 'Determines if series values display as separate bars, stacked within\n     one bar to show the sum of series values, or stacked to a height of 100% to show\n     the contribution to the whole within each category. Valid values: `\"NONE\"` (default),\n     `\"NORMAL\"`, `\"PERCENT_TO_TOTAL\"`.\n \n     '\n - keyword: referenceLines\n   name: Reference Lines\n   types: Chart Reference Lines Array\n   description: Array of reference line values for each threshold to be defined on\n     the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\n - keyword: showLegend\n   name: Show legend\n   types: Boolean\n   description: 'Determines if a color legend displays below the chart. Default: _true_.\n \n     '\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: 'Determines if data values are displayed next to each bar. Default:\n     _false_.\n \n     '\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for a bar. Default:\n     _true_.\n \n     '\n - keyword: allowDecimalAxisLabels\n   name: Allow decimal axis labels\n   types: Boolean\n   description: 'Allows dependent (horizontal) values to display as decimal numbers\n     instead of integers. Default: _false_.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: _true_.\n \n     '\n - keyword: colorScheme\n   name: Color scheme\n   types: Any type\n   description: 'Determines which color scheme to use in the chart. Use one of the\n     following valid values: `\"CLASSIC\"` (default), `\"MIDNIGHT\"`, `\"OCEAN\"`, `\"MOSS\"`,\n     `\"BERRY\"`, `\"PARACHUTE\"`, `\"RAINFOREST\"`, `\"SUNSET\"` or define a custom color\n     scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See\n     [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the chart height. Valid values: `\"MICRO\"`, `\"SHORT\"`, `\"MEDIUM\"`,\n     `\"TALL\"`, `\"AUTO\"` (default). See [Chart Heights](Chart_Heights.md) for guidance\n     on using the `\"MICRO\"` size.\n \n     '\n - keyword: xAxisStyle\n   name: X-Axis Style\n   types: Text\n   description: 'Determines how to display the labels and axis separators for the X-Axis.\n     Valid values: `\"STANDARD\"` (default), `\"NONE\"`.'\n - keyword: yAxisStyle\n   name: Y-Axis Style\n   types: Text\n   description: 'Determines how to display the labels, axis separators, and grid lines\n     for the Y-Axis. Valid values: `\"STANDARD\"` (default), `\"MINIMAL\"`, `\"NONE\"`.\n \n     '\n - keyword: data\n   name: Data\n   types: Any type\n   description: Reference to the record type used for the source of this chart. Can\n     accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\n - keyword: config\n   name: Chart Configuration\n   types: BarChartConfig\n   description: 'Configures how to display data on the chart, including fields used\n     for calculations and grouping, using [a!barChartConfig()](Bar_Chart_Config_Component.md).\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, chart data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes chart data each time a specified event completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: \"How often chart data gets refreshed in minutes. When null, chart data\n     will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`,\n     `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: \"When true, chart data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh chart data\n     when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_. \\n\"\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: 'Refreshes chart data each time any of these specific variables change.\n     This allows you to refresh the chart data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n \n     '\n reftype: sailcomponent\n scdisplayname: Bar Chart\n space: sail_component\n ---\n \n ## Function\n \n function name: a!barChartField_21r4 \n  function syntax: a!barChartField_21r4 (label,instructions,categories,series,xAxisTitle,yAxisTitle,yAxisMin,yAxisMax,stacking,referenceLines,showLegend,showDataLabels,showTooltips,allowDecimalAxisLabels,labelPosition,helpTooltip,accessibilityText,showWhen,colorScheme,height,xAxisStyle,yAxisStyle,data,config,refreshAlways,refreshAfter,refreshInterval,refreshOnReferencedVarChange,refreshOnVarChange)\n \n Displays numerical data as horizontal bars. Use a bar chart to display several values at the same point in time.\n \n **See also**:\n \n - [Line Chart](Line_Chart_Component.md)\n - [Column Chart](Column_Chart_Component.md)\n - [Pie Chart](Pie_Chart_Component.md)\n - [Area Chart](Area_Chart_Component.md)\n - [Scatter Chart](Scatter_Chart_Component.md)\n - [Chart Series](Chart_Series_Component.md)\n - [Charts design guidance](sail/ux-charts.md)\n - [Chart Color Schemes](Chart_Color_Scheme.md)\n - [Configure Charts Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"categories\", \"name\": \"Categories\", \"types\": \"Text Array\", \"description\": \"Text to display on the x-axis next to each bar.\"}, {\"keyword\": \"series\", \"name\": \"Series\", \"types\": \"Chart Series Array\", \"description\": \"Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\"}, {\"keyword\": \"xAxisTitle\", \"name\": \"X-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the independent (vertical) axis.\"}, {\"keyword\": \"yAxisTitle\", \"name\": \"Y-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the dependent (horizontal) axis.\"}, {\"keyword\": \"yAxisMin\", \"name\": \"Min Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the horizontal axis.\"}, {\"keyword\": \"yAxisMax\", \"name\": \"Max Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the horizontal axis.\"}, {\"keyword\": \"stacking\", \"name\": \"Stacking\", \"types\": \"Text\", \"description\": \"Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: `\\\"NONE\\\"` (default), `\\\"NORMAL\\\"`, `\\\"PERCENT_TO_TOTAL\\\"`.\\n\"}, {\"keyword\": \"referenceLines\", \"name\": \"Reference Lines\", \"types\": \"Chart Reference Lines Array\", \"description\": \"Array of reference line values for each threshold to be defined on the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\"}, {\"keyword\": \"showLegend\", \"name\": \"Show legend\", \"types\": \"Boolean\", \"description\": \"Determines if a color legend displays below the chart. Default: _true_.\\n\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed next to each bar. Default: _false_.\\n\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for a bar. Default: _true_.\\n\"}, {\"keyword\": \"allowDecimalAxisLabels\", \"name\": \"Allow decimal axis labels\", \"types\": \"Boolean\", \"description\": \"Allows dependent (horizontal) values to display as decimal numbers instead of integers. Default: _false_.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: _true_.\\n\"}, {\"keyword\": \"colorScheme\", \"name\": \"Color scheme\", \"types\": \"Any type\", \"description\": \"Determines which color scheme to use in the chart. Use one of the following valid values: `\\\"CLASSIC\\\"` (default), `\\\"MIDNIGHT\\\"`, `\\\"OCEAN\\\"`, `\\\"MOSS\\\"`, `\\\"BERRY\\\"`, `\\\"PARACHUTE\\\"`, `\\\"RAINFOREST\\\"`, `\\\"SUNSET\\\"` or define a custom color scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the chart height. Valid values: `\\\"MICRO\\\"`, `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"`, `\\\"TALL\\\"`, `\\\"AUTO\\\"` (default). See [Chart Heights](Chart_Heights.md) for guidance on using the `\\\"MICRO\\\"` size.\\n\"}, {\"keyword\": \"xAxisStyle\", \"name\": \"X-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels and axis separators for the X-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"NONE\\\"`.\"}, {\"keyword\": \"yAxisStyle\", \"name\": \"Y-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"MINIMAL\\\"`, `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Any type\", \"description\": \"Reference to the record type used for the source of this chart. Can accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\"}, {\"keyword\": \"config\", \"name\": \"Chart Configuration\", \"types\": \"BarChartConfig\", \"description\": \"Configures how to display data on the chart, including fields used for calculations and grouping, using [a!barChartConfig()](Bar_Chart_Config_Component.md).\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes chart data each time a specified event completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh chart data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_. \\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\\n\"}]\n \n ## Configuration\n \n There are two ways to configure a bar chart:\n \n 1. Set a record type as the data source and define fields to display on the chart.\n 1. Perform your own query and define lists of data within the categories and series.\n \n If you have a record type that uses a database as the source, or a record type with [data sync](records-data-sync.md) enabled, we recommend using the record type as the source of your chart. This configuration is easier because Appian will perform the query for you and display the results directly in the chart.\n \n If your record type uses a web service as the source and does not have data sync enabled, use the *categories* and *series* to construct the chart manually.\n \n ### Using record data\n \n Configuring a bar chart using a record type as the source requires using two parameters: *data* and *config*. Once you provide a record type in the *data* parameter and provide the fields in the *config* parameter, the chart displays the results.\n \n See [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md) for details on using a record type as the source. See [Build Reports from Records](report-with-records.md) for examples of reports created with different charts.\n \n ### Using categories and series\n \n When using *categories* and *series*, you must provide the list of data labels and values directly to these parameters. \n \n #### Categories\n \n - The order of items in the *categories* array determines the display order of categories on the chart with the left-most item in the array appearing at the top of the x-axis. The x-axis is the vertical axis since the bar data displays horizontally.\n - For each null or empty item in the array passed to *categories*, `[Category #]` displays on the x-axis with `#` as the index number in the *categories* array of the null or empty item. For example, `[Category 1]`.\n - The index of each item in the *categories* array must match with the index of its *series* data value. \n \n #### Series\n \n - A single *series* item produces a bar for each *categories* item with all bars the same color. The *data* parameter should contain a list of values that match the size of the list for categories.\n - Use [a!chartSeries()](Chart_Series_Component.md) to create the Chart Series array.\n - If the *series* argument has a non-null label value paired with a 0, null, or empty data value, the data value still displays in the legend.\n - If the *series* argument has a null or empty label value paired with a non-null data value, the label value displays as `[Series #]` with `#` as the index number of the data value. For example, `[Series 1]`.\n - If a color is defined at the series level, it will show for the given scheme and move the color scheme colors to the next series.\n \n #### Series and stacking\n \n - Multiple *series* items when *stacking* is `NONE` or null produces a set of bars for each *categories* item - one bar for each *series* item with each bar in that set a different color. The order of the label items determine the display order of the columns in each set with the first bar displays furthest from the axis. \n - Multiple *series* items when *stacking* is `NORMAL` produces a single bar for each categories item with each *series* item displayed as a different segment of the bar in a different color, so they appear stacked on top of each other. The order of the label items determine the display order of the bar segments with the first label item appearing closest to the axis.\n - Multiple *series* items when *stacking* is `PERCENT_TO_TOTAL` also shows a single bar for each category, but bars have a total height of 100%. Each value shows the percent contribution to the total within each category.\n \n ## Usage considerations\n \n ### Chart data and stacking\n \n - If data values are small and less than a whole number, Appian recommends settings *allowDecimalAxisLabels* to `true`.\n - If *data* contains `a!recordData` or a record type reference, the categories and series parameters are ignored.\n - The Percent to Total stacking will update the axes and tooltips to show with a percentage. Also, the minimum and maximum y-axes values refer to percentages. For example, `yAxisMax: 50` would set the maximum y-axis at 50%.\n \n ### Charts height and background color\n \n - When the `\"AUTO\"` height is used, the chart will show as Medium height with 20 or less categories. If more categories are provided, the chart will expand in height to ensure categories are not cut off.\n - When the chart is placed in a colored card, the chart background will match the color of the card. Text labels and lines in the chart will also adjust if a dark background color is used. See the [SAIL Design System](sail/ux-charts.md#background-colors) for best practices on using charts with background colors.\n \n ### Chart refresh behavior\n \n - You can define `a!refreshVariable` parameters directly in the chart without creating additional local variables. The only exception being `refreshOnVarChange`, which refreshes the chart after a specific local variable has changed.\n - When you use a record type as the source of your chart, it's recommended to use the refresh parameters in the chart instead of using local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function. This is because the refresh behavior will automatically apply to the fields specified in the *data* parameter of the chart.\n - If you're not using a record type as the source of your chart, use local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function to define refresh behavior since you won't use the *data* parameter to configure your chart. \n \n ## Examples\n \n The examples below demonstrate how to configure your charts using categories and series. For examples on using record data, see [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md).\n \n ### Single series bar chart with label, y-axis title, and no legend\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %}\n \n a!barChartField(\n   categories: {\"Baseball\", \"Hockey\", \"Soccer\"},\n   series: {\n     a!chartSeries(label: \"Points\", data: {8.3, 3.02, 2.71})\n   },\n   colorScheme: \"CLASSIC\",\n   yAxisTitle: \"Average Point per Professional Game\",\n   showLegend: false,\n   showDataLabels: true\n )\n {% endsailbox %}\n \n ### Multiple series bar chart with label, y-axis title, and no stacking\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %}\n a!barChartField(\n   categories: {\"Americas\", \"EMEA\", \"APAC\"},\n   series: {\n     a!chartSeries(label: \"Referrals\", data: {19, 8, null}),\n     a!chartSeries(label: \"Existing Clients\", data: {11, 16, 10}),\n     a!chartSeries(label: \"Tradeshow Attendees\", data: {14, 12, 7})\n   },\n   yAxisTitle: \"Active Opportunities\",\n   showLegend: true,\n   colorScheme: \"CLASSIC\"\n )\n {% endsailbox %}\n \n \n ### Multiple series bar chart with label, y-axis title, and stacking\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %}\n a!barChartField(\n   categories: {\"Americas\", \"EMEA\", \"APAC\"},\n   series: {\n     a!chartSeries(label: \"Referrals\", data: {19, 8, null}),\n     a!chartSeries(label: \"Existing Clients\", data: {11, 16, 10}),\n     a!chartSeries(label: \"Tradeshow Attendees\", data: {14, 12, 7})\n   },\n   colorScheme: \"RAINFOREST\",\n   yAxisTitle: \"Active Opportunities\",\n   stacking: \"PERCENT_TO_TOTAL\",\n   showLegend: true\n )\n {% endsailbox %}"}, {"doc": "Pie_Chart_Component.md", "content": "---\n layout: function\n title: Pie Chart Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays numerical data as slices of a single circle. Use a pie chart to\n   graphically display parts of a whole.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pieChartField\n fncsubcat: Charts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: series\n   name: Series\n   types: List of PieChartSeries\n   description: Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: 'Determines if data values are displayed with each pie slice. Default:\n     _false_.\n \n     '\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for a pie slice. Default:\n     _false_.\n \n     '\n - keyword: showAsPercentage\n   name: Show as percentage\n   types: Boolean\n   description: 'Determines if the data is shown as a percentage. Default: _false_.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: _true_.\n \n     '\n - keyword: colorScheme\n   name: Color scheme\n   types: Any type\n   description: 'Determines which color scheme to use in the chart. Use one of the\n     following valid values: `\"CLASSIC\"` (default), `\"MIDNIGHT\"`, `\"OCEAN\"`, `\"MOSS\"`,\n     `\"BERRY\"`, `\"PARACHUTE\"`, `\"RAINFOREST\"`, `\"SUNSET\"` or define a custom color\n     scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See\n     [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Determines if the chart displays as a full pie or as a donut. Valid\n     values: `\"PIE\"` (default), `\"DONUT\"`.\n \n     '\n - keyword: seriesLabelStyle\n   name: Series Label Style\n   types: Text\n   description: 'Determines where to display the series labels. Valid values: `\"ON_CHART\"`\n     (default), `\"LEGEND\"`, `\"NONE\"`.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the chart height. Valid values: `\"SHORT\"`, `\"MEDIUM\"` (default),\n     `\"TALL\"`.\n \n     '\n - keyword: data\n   name: Data\n   types: Any type\n   description: Reference to the record type used for the source of this chart. Can\n     accept a!recordData or a Record Type Reference.\n - keyword: config\n   name: Chart Configuration\n   types: PieChartConfig\n   description: 'Configures how to display data on the chart, including fields used\n     for calculations and grouping, using [a!pieChartConfig()](Pie_Chart_Config_Component.md).\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, chart data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes chart data each time a specified event completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: \"How often chart data gets refreshed in minutes. When null, chart data\n     will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`,\n     `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: \"When true, chart data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh chart data\n     when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_. \\n\"\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: \"Refreshes chart data each time any of these specific variables change.\n     This allows you to refresh the chart data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n     \\n\"\n reftype: sailcomponent\n scdisplayname: Pie Chart\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pieChartField \n  function syntax: a!pieChartField (label,instructions,series,showDataLabels,showTooltips,showAsPercentage,labelPosition,helpTooltip,accessibilityText,showWhen,colorScheme,style,seriesLabelStyle,height,data,config,refreshAlways,refreshAfter,refreshInterval,refreshOnReferencedVarChange,refreshOnVarChange)\n \n Displays numerical data as slices of a single circle. Use a pie chart to graphically display parts of a whole.\n \n **See also**:\n \n - [Configure Charts Using Records](Chart_Configuration_Using_Records.md)\n - [Chart Color Schemes](Chart_Color_Scheme.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"series\", \"name\": \"Series\", \"types\": \"List of PieChartSeries\", \"description\": \"Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed with each pie slice. Default: _false_.\\n\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for a pie slice. Default: _false_.\\n\"}, {\"keyword\": \"showAsPercentage\", \"name\": \"Show as percentage\", \"types\": \"Boolean\", \"description\": \"Determines if the data is shown as a percentage. Default: _false_.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: _true_.\\n\"}, {\"keyword\": \"colorScheme\", \"name\": \"Color scheme\", \"types\": \"Any type\", \"description\": \"Determines which color scheme to use in the chart. Use one of the following valid values: `\\\"CLASSIC\\\"` (default), `\\\"MIDNIGHT\\\"`, `\\\"OCEAN\\\"`, `\\\"MOSS\\\"`, `\\\"BERRY\\\"`, `\\\"PARACHUTE\\\"`, `\\\"RAINFOREST\\\"`, `\\\"SUNSET\\\"` or define a custom color scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines if the chart displays as a full pie or as a donut. Valid values: `\\\"PIE\\\"` (default), `\\\"DONUT\\\"`.\\n\"}, {\"keyword\": \"seriesLabelStyle\", \"name\": \"Series Label Style\", \"types\": \"Text\", \"description\": \"Determines where to display the series labels. Valid values: `\\\"ON_CHART\\\"` (default), `\\\"LEGEND\\\"`, `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the chart height. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Any type\", \"description\": \"Reference to the record type used for the source of this chart. Can accept a!recordData or a Record Type Reference.\"}, {\"keyword\": \"config\", \"name\": \"Chart Configuration\", \"types\": \"PieChartConfig\", \"description\": \"Configures how to display data on the chart, including fields used for calculations and grouping, using [a!pieChartConfig()](Pie_Chart_Config_Component.md).\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes chart data each time a specified event completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh chart data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_. \\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`). \\n\"}]\n \n ## Configuration\n \n There are two ways to configure a pie chart:\n \n 1. Set a record type as the data source and define fields to display on the chart.\n 1. Perform your own query and define lists of data within the series.\n \n If you have a record type that uses a database as the source, or a record type with [data sync](records-data-sync.md) enabled, we recommend using the record type as the source of your chart. This configuration is easier because Appian will perform the query for you and display the results directly in the chart.\n \n If your record type uses a web service as the source and does not have data sync enabled, use the *categories* and *series* to construct the chart manually.\n \n ### Using record data\n \n Configuring a pie chart using a record type as the source requires using two parameters: *data* and *config*. Once you provide a record type in the *data* parameter and provide the fields in the *config* parameter, the chart displays the results.\n \n See [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md) for details on using a record type as the source. See [Build Reports from Records](report-with-records.md) for examples of reports created with different charts.\n \n ### Using series\n \n When using *series*, you must provide the list of data labels and values directly to the parameter using a list of `a!chartSeries()`. \n \n - The labels and data arguments in the *series* are shown in the data labels and tooltips (if enabled).\n - If a *series* has a non-null label value paired with a 0, null, or empty data value, the data value is treated as 0 and is still displayed if *Show data labels* is set to `true`. For example, `Americas: 0`.\n - If a *series* argument has a null or empty label paired with a non-null data value, the label is displayed as `[Series #]` with `#` as the label's index number in the *series*  if *Show data labels* is set to `true`. For example, `[Series 1]: 3`.\n - If a *series* argument has both a null or empty label paired with a 0, null, or empty data value, the above behaviors are combined and the following is displayed if *Show data labels* is set to `true`: `[Series 1]: 0`.\n \n ## Usage considerations\n \n ### Chart legends\n \n - If the series label style is set to `LEGEND` and data labels are displayed, the data labels are shown in the legend in parentheses. For example, `West Region (25%)`.\n - Using the `LEGEND` or `NONE` series label styles will ensure consistent sizing of the pie for any columns of the same width. When `ON_CHART` is used for the series label style, the pie changes size based on the length of the series label.\n - The `ON_CHART` style will usually use screen space more effectively than the `LEGEND`. Since showing the legend guarantees the same size pies across columns of the same width, there may be extra whitespace if a short label is used in the legend.\n - If the legend is displayed, it will show below the pie in `MEDIUM` width columns or narrower; in wider columns the legend will show adjacent to the chart. The legend always displays below the pie on phones.\n \n ### Chart data and values\n \n - If a data value is negative, the data label shows it as negative (for example `-20`), but it still displays as a pie slice. To avoid any confusion, negative values should only be used with bar, column, and line charts.\n - Since pie chart values do not have an x-axis for reference, Appian recommends setting *Show data labels* as `true`.\n - When values are shown as percentages, they are rounded to one decimal place. If values in the second decimal place are 5 or higher, the first decimal number is rounded up.\n - If *data* contains `a!recordData` or a record type reference, the series parameter is ignored.\n - When you use a record type as a source for your chart, you can use a!measure() to perform a calculation on a single field. If you need to perform multiple calculations within the same chart, use *series* to configure your chart instead of *data* and *config*.\n \n ### Chart lines and background colors\n \n When the chart is placed in a colored card, the chart background will match the color of the card. Text labels and lines in the chart will also adjust if a dark background color is used. See the [SAIL Design System](sail/ux-charts.md#background-colors) for best practices on using charts with background colors.\n \n ### Chart refresh behavior\n \n - You can define `a!refreshVariable` parameters directly in the chart without creating additional local variables. The only exception being `refreshOnVarChange`, which refreshes the chart after a specific local variable has changed.\n - When you use a record type as the source of your chart, it's recommended to use the refresh parameters in the chart instead of using local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function. This is because the refresh behavior will automatically apply to the fields specified in the *data* parameter of the chart.\n - If you're not using a record type as the source of your chart, it's recommended to use local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function to define refresh behavior since you won't use the *data* parameter to configure your chart. \n \n ## Examples\n \n The examples below demonstrate how to configure your charts using categories and series. For examples on using record data, see [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md). \n \n ### Pie chart with label, instructions, and data labels\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 900 %}\n a!pieChartField(\n   label: \"New Hires by Department\",\n   instructions: \"The number of new employees hired by each department in 2019\",\n   series: {\n     a!chartSeries(label: \"Engineering\", data: 12),\n     a!chartSeries(label: \"Professional Services\", data:  9),  \n     a!chartSeries(label: \"Sales\", data:  8), \n     a!chartSeries(label: \"Finance\", data:  6),\n     a!chartSeries(label: \"HR\", data:  4)\n   \n   },\n   colorScheme: \"OCEAN\",\n   showDataLabels: true,\n   showTooltips: true,\n   showAsPercentage: false\n )\n {% endsailbox %}\n \n ### Pie chart with label, instructions, data labels, tooltips, and percentage\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 900 %}\n \n a!pieChartField(\n   label: \"Opportunity Sources\",\n   instructions: \"Leads are calculated based on the initial mode of contact\",\n   series: {\n     a!chartSeries(label: \"Existing Client\", data: 12),\n     a!chartSeries(label: \"Inbound Call\",    data:  6),\n     a!chartSeries(label: \"Tradeshow\",       data:  8),\n     a!chartSeries(label: \"Web Site\",        data:  6),\n     a!chartSeries(label: \"Referral\",        data:  7)\n   },\n   colorScheme: \"MIDNIGHT\",\n   showDataLabels: true,\n   showTooltips: true,\n   showAsPercentage: true\n )\n \n {% endsailbox %}\n \n ### Donut style chart with legend and colors assigned in series\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 900 %}\n \n a!pieChartField(\n   label: \"Employee Credential Status\",\n   labelPosition: \"ABOVE\",\n   series: {\n     a!chartSeries(label: \"Active Credential\", data: 1374, color: \"BLUEGRAY\"),\n     a!chartSeries(label: \"Expires within 30 Days\", data: 343, color: \"AMBER\"),\n     a!chartSeries(label: \"Expired\", data: 97, color: \"RED\")\n   },\n   height: \"SHORT\",\n   seriesLabelStyle: \"LEGEND\",\n   colorScheme: \"CLASSIC\",\n   style: \"DONUT\",\n   showDataLabels: true,\n   showAsPercentage: true\n )\n {% endsailbox %}"}, {"doc": "Grid_Image_Column_Component_17r3.md", "content": "---\n layout: function\n title: a!gridImageColumn_17r3 [Deprecated]\n reftype: sailcomponent\n category: function_page\n compatibility: -crf\n fncname: a!gridImageColumn_17r3\n fnccat: \u4e00Deprecated\u4e00\n depver: 19.2\n fncsyntax: '**a!gridImageColumn_17r3**( [*label*], [*field*], [*data*], [*size*] )'\n evolved_fncname: a!gridImageColumn\n evolved_reason: Now supports a style parameter, a separate configuration for thumbnail\n   functionality, and more sizes.\n ---\n \n The grid image column component 17r3 has been deprecated, and will be removed in a future release of Appian. Instead, use a grid column. For information about the grid image column 17r3, see the [Appian 19.4 documentation](https://docs.appian.com/suite/help/19.4/Grid_Image_Column_Component.html)."}, {"doc": "Grid_Text_Column_Component.md", "content": "---\n layout: function\n title: Paging Grid Text Column Component [Deprecated]\n reftype: sailcomponent\n category: function_page\n compatibility: -crf\n fncname: a!gridTextColumn\n scdisplayname: Paging Grid Text Column\n evolved_fncname: a!gridColumn\n evolved_reason: Now supports multiple interface components.\n depver: 19.2\n fnccat: \u4e00Deprecated\u4e00\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Name to display for the column heading.\n - keyword: field\n   name: Field\n   types: Text\n   description: Name of the field that populates the column. Stored into Paging and\n     Selection Value when the user clicks on the column label. A sort indicator displays\n     on the column when its Field argument matches pagingInfo.sort[1].field.\n - keyword: data\n   name: Data\n   types: Text Array\n   description: Array of valid text values to display in the column.\n - keyword: alignment\n   name: Alignment\n   types: Text\n   description: Desired alignment for the label and data values within the column.\n     Valid values are `\"LEFT\"`, `\"CENTER\"`, and `\"RIGHT\"`.\n - keyword: links\n   name: Links\n   types: Array of Links\n   description: Array of values that determine the links to display. Create links with\n     [a!authorizationLink()](authorization_link_component.md), [a!documentDownloadLink()](Document_Link_Component.md),\n     [a!dynamicLink()](Dynamic_Link_Component.md), [a!newsEntryLink()](News_Entry_Link_Component.md),\n     [a!processTaskLink()](Process_Task_Link_Component.md), [a!recordLink()](Record_Link_Component.md),\n     [a!reportLink()](Report_Link_Component.md), [a!startProcessLink()](Start_Process_Link_Component.md),\n     [a!submitLink()](Submit_Link_Component.md), [a!userRecordLink()](User_Record_Link_Component.md),\n     and [a!safeLink()](Web_Link_Component.md).\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.'\n ---\n \n The grid text column component has been deprecated, and will be removed in a future release of Appian. Instead, use a grid column. For information about the grid text column, see the [Appian 19.4 documentation](https://docs.appian.com/suite/help/19.4/Grid_Text_Column_Component.html)."}, {"doc": "Multiple_Dropdown_Component_20r2.md", "content": "---\n layout: function\n title: a!multipleDropdownField_20r2 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays a long list of choices from which the user may select none, one,\n   or many items and saves values based on the selected choices.\n category: function_page\n compatibility: -crf\n fncname: a!multipledropdownField_20r2\n fncsubcat: Selection\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scdisplayname: Multiple Dropdown\n evolved_fncname: a!multipleDropdownField\n evolved_reason: Added an optional search box.\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.'\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.'\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty.\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: choiceValues\n   name: Choice Values\n   types: List of Variant\n   description: Array of values associated with the available choices.\n - keyword: value\n   name: Display Value\n   types: List of Variant\n   description: Values of choices to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the choice values when\n     the user changes the selections.  Use a!save() to save a modified or alternative\n     value to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.'\n ---\n \n ## Multiple dropdown\n \n **Function**: `a!multipleDropdownField_20r2()`\n \n Displays a long list of choices from which the user may select none, one, or many items and saves values based on the selected choices. To save the index instead of a value, use [multiple dropdown by index](Multiple_Dropdown_By_Index_Component.md).\n \n If the choice is exclusive, then consider using [radio buttons](Radio_Button_Component.md) or a [dropdown](Dropdown_Component.md) component.\n \n If there aren't many choices, consider using [checkboxes](Checkbox_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty.\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"choiceValues\", \"name\": \"Choice Values\", \"types\": \"List of Variant\", \"description\": \"Array of values associated with the available choices.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Variant\", \"description\": \"Values of choices to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice values when the user changes the selections.  Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\"}]\n \n **Notes**\n \n - If you set *Label Position* to `\"ADJACENT\"` or `\"ABOVE\"`, but do not give a value for *Label*, a space still displays to the left-side or above, respectively, of the component as if there was a label displayed. To ensure the component appears to the far left when *Label* has no value, use `\"COLLAPSED\"` for *Label Position*.\n - Choices display in the same order as defined in the *Choice Labels* parameter. The *Choice Labels* argument cannot be null.\n - If a single item is selected, the system saves a single-item array.\n - If no selection is made, the system saves a null value into the component's *Save Selection To* field. If a single item is selected, the system saves a single-item array.\n - *Choice Labels* and *Choice Values* must be the same length.\n - *Choice Values* cannot contain nulls or duplicate values.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ***Multiple Dropdown with the First Option Selected***\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: \"en_US\",\n   a!multipleDropdownField_20r2(\n     label: \"Language\",\n     instructions: \"In which languages are you proficient?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language\n   )\n )\n {% endsailbox %}"}, {"doc": "Tag_Item_Component.md", "content": "---\n layout: function\n title: Tag Item\n category: function_page\n compatibility: -crf\n excerpt: Displays a short text label with colored background for use with a!tagField.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!tagItem\n fncsubcat: Display\n parameters:\n - keyword: text\n   name: Text\n   types: Text\n   description: Text to display within the tag. The tag displays a maximum of 40 characters.\n - keyword: backgroundColor\n   name: Background Color\n   types: Text\n   description: 'Determines the background color. Valid values: Any valid hex color\n     or `\"ACCENT\"` (default), `\"POSITIVE\"`, `\"NEGATIVE\"`, `\"SECONDARY\"`\n \n     '\n - keyword: textColor\n   name: Text Color\n   types: Text\n   description: 'Determines the text color. Valid values: Any valid hex color or `\"STANDARD\"`\n     (default).\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: Text to display as a tooltip on the tag.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the tag is displayed on the interface. When set\n     to false, the tag is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: recordLink\n   name: Record Link\n   types: Record Link\n   description: The record link to apply to the tag. Create a link with `a!recordLink()`\n     or `a!userRecordLink()`.\n reftype: sailcomponent\n scdisplayname: Tag Item\n space: sail_component\n ---\n \n ## Function\n \n function name: a!tagItem \n  function syntax: a!tagItem (text,backgroundColor,textColor,tooltip,showWhen,recordLink)\n \n Displays a short text label with colored background for use with a!tagField. Tag items can contain a record link or user record link.\n \n **See also**: [Tag Field](Tag_Component.md), [Tag design guidance](sail/ux-tags.md)\n \n ## Parameters\n \n [{\"keyword\": \"text\", \"name\": \"Text\", \"types\": \"Text\", \"description\": \"Text to display within the tag. The tag displays a maximum of 40 characters.\"}, {\"keyword\": \"backgroundColor\", \"name\": \"Background Color\", \"types\": \"Text\", \"description\": \"Determines the background color. Valid values: Any valid hex color or `\\\"ACCENT\\\"` (default), `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, `\\\"SECONDARY\\\"`\\n\"}, {\"keyword\": \"textColor\", \"name\": \"Text Color\", \"types\": \"Text\", \"description\": \"Determines the text color. Valid values: Any valid hex color or `\\\"STANDARD\\\"` (default).\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display as a tooltip on the tag.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the tag is displayed on the interface. When set to false, the tag is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"recordLink\", \"name\": \"Record Link\", \"types\": \"Record Link\", \"description\": \"The record link to apply to the tag. Create a link with `a!recordLink()` or `a!userRecordLink()`.\"}]\n \n ## Usage considerations\n \n ### Using the text parameter\n \n - A tag will not render if no *text* is specified.\n - Any tabs, line breaks, and leading or trailing spaces are trimmed. Spaces between words are trimmed down to one space.\n - If the text is too long to display within a tag, the text is truncated. The full text is shown on hover."}, {"doc": "Line_Chart_Config_Component.md", "content": "---\n layout: function\n title: Line Chart Configuration\n category: function_page\n compatibility: -crf\n excerpt: Contains configuration for how to display data in a line chart.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples\n fncname: a!lineChartConfig\n fncsubcat: Charts\n fncsyntax: a!lineChartConfig(primaryGrouping, secondaryGrouping, measures, sort, dataLimit,\n   link, showIntervalsWithNoData)\n parameters:\n - keyword: primaryGrouping\n   name: Primary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display on the axis in the chart, configured\n     using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: secondaryGrouping\n   name: Secondary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display across each line in the chart,\n     configured using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: measures\n   name: Measures\n   types: Measure\n   description: 'Defines the numerical calculations for data in the chart, configured\n     using [a!measure()](Measure_Component.md). If no measure is provided, a count\n     of records shows as the measurement in the chart.\n \n     '\n - keyword: sort\n   name: Sort\n   types: SortInfo\n   description: 'Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending\n     or descending order. Use the alias of any groupings or measures to sort by the\n     values in the chart. Use a record field or related record field reference to sort\n     by data that is not referenced in the chart.\n \n     '\n - keyword: dataLimit\n   name: Data Limit\n   types: Integer\n   description: 'Maximum number of data points to display on the chart. Default: 100.\n     Valid values: 1-5000.\n \n     '\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to execute when a user selects a data point on the chart. Use\n     `fv!selection` to pass context from the selection made on the chart to the link.\n     Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\n \n     '\n - keyword: showIntervalsWithNoData\n   name: Show time intervals with no data\n   types: Boolean\n   description: 'Determines whether the axis in the chart displays date or time values\n     that do not have a value associated with them. For example, show January, February,\n     and March, even if February has no data. This parameter is only available when\n     a Date, Time, or Date and Time field is used as the primary grouping. Default:\n     _false_.\n \n     '\n reftype: sailcomponent\n scdisplayname: Line Chart Configuration\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!lineChartConfig \n  function syntax: a!lineChartConfig (primaryGrouping,secondaryGrouping,measures,sort,dataLimit,link,showIntervalsWithNoData)\n \n Contains configuration for how to display data in a line chart. See the [Line Chart Component](Line_Chart_Component.md) page for examples on using this configuration supporting function.\n \n **See also**:\n \n - [Chart Configuration Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"primaryGrouping\", \"name\": \"Primary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display on the axis in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"secondaryGrouping\", \"name\": \"Secondary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display across each line in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"measures\", \"name\": \"Measures\", \"types\": \"Measure\", \"description\": \"Defines the numerical calculations for data in the chart, configured using [a!measure()](Measure_Component.md). If no measure is provided, a count of records shows as the measurement in the chart.\\n\"}, {\"keyword\": \"sort\", \"name\": \"Sort\", \"types\": \"SortInfo\", \"description\": \"Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart.\\n\"}, {\"keyword\": \"dataLimit\", \"name\": \"Data Limit\", \"types\": \"Integer\", \"description\": \"Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to execute when a user selects a data point on the chart. Use `fv!selection` to pass context from the selection made on the chart to the link. Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\\n\"}, {\"keyword\": \"showIntervalsWithNoData\", \"name\": \"Show time intervals with no data\", \"types\": \"Boolean\", \"description\": \"Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: _false_.\\n\"}]\n \n ## Usage considerations\n \n ### Using a!lineChartConfig()\n \n - `a!lineChartConfig()` is always used within a line chart component.\n - This configuration is used when a record type is defined as the data source for a line chart.\n - If no measure is provided, the chart displays a count of records. Also, the label displays as `Count of <primary key field name>`.\n \n ### Using groups and data limits\n \n - The *primaryGrouping* is required to display data on the chart. The data values returned from the grouping display on the horizontal axis.\n - The *secondaryGrouping* is optional; if this parameter is provided, multiple lines are shown for each unique value in the grouping and the label will display in the legend and/or tooltips if they are enabled.\n - The *dataLimit* determines the total number of data points displayed in the chart. When both a primary and secondary grouping are provided, there is a data point for each unique combination of values: with 3 values in your primary grouping and 4 values in your secondary grouping, you will have 12 values on your chart.\n \n ### Using dynamic links and aliases\n \n - When a dynamic link is added to the *link* parameter, the current selected data is available using `fv!selection`. This variable returns a map that contains each of the field aliases as the key and the unformatted value as the value. Since the alias is used for the key, aliases are required for each grouping and measure when using a link. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#configure-chart-links) for an example of how to configure a link.\n \n ### Using the sort parameter\n - You can sort by the alias of any groupings or measures, or by any fields that are not directly referenced in the chart as long as they are of type Number (Integer), Number (Decimal), Date, Date and Time, Time, or Boolean. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#stacked-column-chart-of-cases-by-status-and-priority) for an example of sorting by a field not referenced in the chart.\n - When configuring sort in Design Mode, you must use the alias of any groupings or measures to sort by the fields in the chart. In Expression Mode, you can use the alias or the field name if the alias is not provided.\n \n ### Using the showIntervalsWithNoData parameter\n - To use the *showIntervalsWithNoData* parameter, the *primaryGrouping* must be a Date, Time, or Date and Time field, and have a [time interval](Grouping_Component.md#interval) set to a value other than `\"AUTO\"`.  For example:\n   \n   {% include zoompic.html url=\"images/line-chart-show-no-data.png\" %}\n \n - When you configure your chart in Design Mode, the *showIntervalsWithNoData* parameter will automatically be set to `true` when you select a time interval for your primary grouping.\n - When *showIntervalsWithNoData* is `true`, the sort must be on the *primaryGrouping* field.\n - The *dataLimit* applies to this parameter, so any dates without data will be counted in the total number of data points that can be displayed in the chart."}, {"doc": "Radio_Button_By_Index_Component.md", "content": "---\n layout: function\n title: Radio Button By Index Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a limited set of choices from which the user must select one item\n   and saves the index of the selected choice.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!radioButtonFieldByIndex\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: value\n   name: Display Value\n   types: Number (Integer)\n   description: Index of the choice to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice index when\n     the user changes the selection. Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: choiceLayout\n   name: Choice Layout\n   types: Text\n   description: 'Determines the layout. Valid values: `\"STACKED\"` (default), `\"COMPACT\"`.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: choiceStyle\n   name: Choice Style\n   types: Text\n   description: 'Determines how the choices should be displayed on the interface. Valid\n     values: `\"STANDARD\"` (default), `\"CARDS\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Radio Button By Index\n space: sail_component\n ---\n \n ## Function\n \n function name: a!radioButtonFieldByIndex \n  function syntax: a!radioButtonFieldByIndex (label,instructions,required,disabled,choiceLabels,value,validations,saveInto,validationGroup,requiredMessage,labelPosition,choiceLayout,helpTooltip,accessibilityText,showWhen,choiceStyle)\n \n Displays a limited set of choices from which the user must select one item and saves the index of the selected choice. To save a value instead of the index, use [radio buttons](Radio_Button_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Number (Integer)\", \"description\": \"Index of the choice to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice index when the user changes the selection. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"choiceLayout\", \"name\": \"Choice Layout\", \"types\": \"Text\", \"description\": \"Determines the layout. Valid values: `\\\"STACKED\\\"` (default), `\\\"COMPACT\\\"`.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"choiceStyle\", \"name\": \"Choice Style\", \"types\": \"Text\", \"description\": \"Determines how the choices should be displayed on the interface. Valid values: `\\\"STANDARD\\\"` (default), `\\\"CARDS\\\"`.\\n\"}]\n \n ## Usage considerations \n \n ### Using the choiceLabels parameter\n \n - Choices display in the same order as defined in the *choiceLabels* parameter. The *choiceLabels* argument cannot be null.\n \n ### Using the choiceLayout parameter \n \n - For long labels, use the `\"STACKED\"` option for *choiceLayout*.\n - The `\"COMPACT\"` option for *choiceLayout* should only be used for radio buttons with short choice labels, such as \"Yes\", \"No\", or \"Maybe\". When using the `\"COMPACT\"` option, labels with text longer than two lines will be truncated."}, {"doc": "User_Record_Link_Component.md", "content": "---\n layout: function\n title: User Record Link Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Defines a link to a user record.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!userRecordLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text displayed as the link name the user clicks on.\n - keyword: user\n   name: User\n   types: User\n   description: The User whose record is linked.\n - keyword: view\n   name: View\n   types: Text\n   description: 'The URL stub of the [view](Configure_Tempo_Users.md#add-record-views)\n     to open for the record. Default is `\"summary\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: openLinkIn\n   name: Open Link In\n   types: Text\n   description: '(Browser-Only) Determines where the linked content should open. Valid\n     values: `\"SAME_TAB\"` (default), `\"NEW_TAB\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: User Record Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!userRecordLink \n  function syntax: a!userRecordLink (label,user,view,showWhen,openLinkIn)\n \n Defines a link to a user record.\n \n **See also**:\n \n - [Modify the User Record Type](Configure_Tempo_Users.md)\n - [Link](Link_Component.md)\n - [Read-Only Grid](Paging_Grid_Component.md)\n - [Images](Image_Component.md)\n - [Tag Items](Tag_Item_Component.md)\n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text displayed as the link name the user clicks on.\"}, {\"keyword\": \"user\", \"name\": \"User\", \"types\": \"User\", \"description\": \"The User whose record is linked.\"}, {\"keyword\": \"view\", \"name\": \"View\", \"types\": \"Text\", \"description\": \"The URL stub of the [view](Configure_Tempo_Users.md#add-record-views) to open for the record. Default is `\\\"summary\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"openLinkIn\", \"name\": \"Open Link In\", \"types\": \"Text\", \"description\": \"(Browser-Only) Determines where the linked content should open. Valid values: `\\\"SAME_TAB\\\"` (default), `\\\"NEW_TAB\\\"`.\\n\"}]\n \n ## Usage considerations\n \n ### Changing and deactivating usernames\n \n - User record links can be created for both active and deactivated users.\n - User record links continue to work when the user's username changes as long as the \"user\" field was configured by referencing a variable (e.g. process variable) rather than a username string.\n \n \n ### Using user record links with other components\n \n  User record links can be used inside :\n \n - [links](Link_Component.md)\n - [grid text columns](Grid_Text_Column_Component.md)\n - [document images](Document_Image_Component.md)\n - [user images](User_Image_Component.md)\n - [web images](Web_Image_Component.md)\n - [chart series](Chart_Series_Component.md)\n - [tag items](Image_Component.md)\n - [rich text](Rich_Text_Component.md)\n - [styled icons](Styled_Icon_Component.md)\n - [card layouts](card_layout.md)\n - [milestones](Milestone_Component.md)\n \n ## Examples\n \n *Copy and paste an example into an interface object in **EXPRESSION MODE** to experiment with it.*\n \n ### User record link to a user record summary view\n \n ```sail \n a!linkField(\n   labelPosition: \"COLLAPSED\",\n   links: {\n     a!userRecordLink(\n       label: \"Daniel Nelson\",\n       /* Replace this user with a user in your environment */\n       user: \"daniel.nelson\",\n       view: \"summary\"\n     )\n   }\n )\n ```\n \n A user profile card will display when you hover over a user record link. The profile card displays the following fields from the record summary automatically as long as values are specified:\n \n - Email\n - Supervisor\n - Phone number\n - Address\n \n For example, if the user profile only has an email specified and the phone number, address, and supervisor fields are blank, only an email address will display. \n \n This example shows the profile card that would display when hovering over a user link created with the example expression:\n \n ![images/user_record_link_display.png](images/user_record_link_display.png){:.screenshot style=\"width:50%\"}"}, {"doc": "Styled_Text_Component.md", "content": "---\n layout: function\n title: Styled Text\n category: function_page\n compatibility: -crf\n excerpt: Displays styled text within a rich text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextItem\n fncsubcat: Display\n parameters:\n - keyword: text\n   name: Text\n   types: Text or Styled Text\n   description: Array of text to display as a rich text item.\n - keyword: style\n   name: Style\n   types: Text Array\n   description: 'Determines the style to apply to the text value. Valid values include\n     `\"PLAIN\"` (default), `\"EMPHASIS\"`, `\"STRONG\"`, and `\"UNDERLINE\"`.\n \n     '\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the text size. Valid values: `\"STANDARD\"` (default), `\"SMALL\"`,\n     `\"MEDIUM\"`, `\"MEDIUM_PLUS\"`, `\"LARGE\"`, `\"LARGE_PLUS\"`, `\"EXTRA_LARGE\"`.\n \n     '\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Determines the text color. Valid values: Any valid hex color or `\"STANDARD\"`\n     (default), `\"ACCENT\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`, `\"SECONDARY\"`.\n \n     '\n - keyword: link\n   name: Link\n   types: Link\n   description: \"Link to apply to the text. Create links with:\\n  - [a!authorizationLink()](authorization_link_component.md)\\n\n     \\ - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n\n     \\ - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n\n     \\ - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n\n     \\ - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md).'\\n\"\n - keyword: linkStyle\n   name: Link Style\n   types: Text\n   description: 'Determines how the link is underlined. Valid values: `\"INLINE\"` (default),\n     `\"STANDALONE\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Styled Text\n scsubcat: Rich_Text_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextItem \n  function syntax: a!richTextItem (text,style,size,color,link,linkStyle,showWhen)\n \n Displays styled text within a [rich text](Rich_Text_Component.md) component.\n \n **See also**: [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"text\", \"name\": \"Text\", \"types\": \"Text or Styled Text\", \"description\": \"Array of text to display as a rich text item.\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text Array\", \"description\": \"Determines the style to apply to the text value. Valid values include `\\\"PLAIN\\\"` (default), `\\\"EMPHASIS\\\"`, `\\\"STRONG\\\"`, and `\\\"UNDERLINE\\\"`.\\n\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the text size. Valid values: `\\\"STANDARD\\\"` (default), `\\\"SMALL\\\"`, `\\\"MEDIUM\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"LARGE\\\"`, `\\\"LARGE_PLUS\\\"`, `\\\"EXTRA_LARGE\\\"`.\\n\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Determines the text color. Valid values: Any valid hex color or `\\\"STANDARD\\\"` (default), `\\\"ACCENT\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, `\\\"SECONDARY\\\"`.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Link\", \"description\": \"Link to apply to the text. Create links with:\\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md).'\\n\"}, {\"keyword\": \"linkStyle\", \"name\": \"Link Style\", \"types\": \"Text\", \"description\": \"Determines how the link is underlined. Valid values: `\\\"INLINE\\\"` (default), `\\\"STANDALONE\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the text and link parameters\n \n - If *text* is null or contains an empty array, no text is displayed.\n - If *link* is null, the *text* is not displayed as a link.\n \n ## Example\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 750 %}\n a!richTextDisplayField(\n   labelPosition: \"COLLAPSED\",\n   value: {\n     a!richTextItem(\n       text: \"Plain, \",\n       style: \"PLAIN\"\n     ),\n     a!richTextItem(\n       text: \"Emphasis Small, \",\n       style: \"EMPHASIS\",\n       size: \"SMALL\"\n     ),\n     a!richTextItem(\n       text: \"Underline Medium, \",\n       style: \"UNDERLINE\",\n       size: \"MEDIUM\"\n     ),\n     a!richTextItem(\n       text: \"Emphasis Medium_Plus, \",\n       style: \"EMPHASIS\",\n       size: \"MEDIUM_PLUS\"\n     ),\n     a!richTextItem(\n       text: \"Strong Large, \",\n       style: \"STRONG\",\n       size: \"LARGE\"\n     ),\n     a!richTextItem(\n       text: \"Emphasis Large_Plus\",\n       style: {\"EMPHASIS\"},\n       size: \"LARGE_PLUS\"\n     ),\n     a!richTextItem(\n       text: \"Strong Extra_Large\",\n       style: {\"STRONG\"},\n       size: \"EXTRA_LARGE\"\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "User_Browser_Components.md", "content": "---\n layout: function\n title: User Browser Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays group membership structure in columns. Users can navigate through\n   the structure and select a single user.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!userBrowserFieldColumns\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: rootGroup\n   name: Initial Group\n   types: Group\n   description: The direct members of the initial group are displayed in the first\n     column.\n - keyword: pathValue\n   name: Navigation Path\n   types: List of User or Group\n   description: The path from the first column to the current navigation.\n - keyword: pathSaveInto\n   name: Save Navigation To\n   types: List of Save\n   description: Variable or list of variables to update when a user clicks on a user\n     or group.\n - keyword: selectionValue\n   name: Selection Value\n   types: User\n   description: This user is displayed as selected when it is present in the navigation\n     path array.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: Variable or list of variables to update upon selection of a user.\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines whether selection is enabled. Default: false.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the component.Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: User Browser\n space: sail_component\n ---\n \n ## Function\n \n function name: a!userBrowserFieldColumns \n  function syntax: a!userBrowserFieldColumns (label,labelPosition,instructions,helpTooltip,rootGroup,pathValue,pathSaveInto,selectionValue,selectionSaveInto,readOnly,height,accessibilityText,showWhen)\n \n Displays group membership structure in columns. Users can navigate through the structure and select a single user.\n \n **See also**: [Example Interfaces](browser_examples.md), [Recipes](recipe-add-remove-move-group-members-browser.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"rootGroup\", \"name\": \"Initial Group\", \"types\": \"Group\", \"description\": \"The direct members of the initial group are displayed in the first column.\"}, {\"keyword\": \"pathValue\", \"name\": \"Navigation Path\", \"types\": \"List of User or Group\", \"description\": \"The path from the first column to the current navigation.\"}, {\"keyword\": \"pathSaveInto\", \"name\": \"Save Navigation To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a user clicks on a user or group.\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"User\", \"description\": \"This user is displayed as selected when it is present in the navigation path array.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update upon selection of a user.\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines whether selection is enabled. Default: false.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the component.Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### User, group, and user and group browser components comparison\n \n The user and group browser components create Miller-columns-style browsers that allow users to select a user or group while browsing through a group membership tree.\n \n ![screenshot of a user browser expanded](images/Group_Browsers_Main_Image.png)\n \n The three group membership browsing components are:\n \n - User Browser\n - [Group Browser](Group_Browser_Components.md)\n - [User and Group Browser](User_and_Group_Browser_Components.md)\n \n Similar to the user and group picker fields, these three components appear the same but differ in what they allow to be selected. Depending on whether users, groups, or users and groups should be selected, choose the group browser, user browser, or user and group browser, respectively. If the interface is only for browsing, use the  group browser, as it is the only browser that can be configured to show only groups and not users.\n \n To learn how to use these components, see the examples listed below:\n \n - [Example Interfaces for Group Browser Components](browser_examples.md)\n   - [Navigation & the Initial Group](browser_examples.md#navigation-&-the-initial-group)\n   - [Selection for More Information](browser_examples.md#selection-for-more-information)\n   - [Selection for Picking](browser_examples.md#selection-for-picking)\n \n ### Saving, selecting, and displaying values\n \n - If an initial group is not specified, only the *label*, *tooltip*, and *instructions* will be displayed.\n - To make the selection required for submission or display validation messages based on the selection, [pair the browser with a a picker](browser_examples.md#selection-for-picking) or other component.\n - Click a selected user to deselect the value. When a user is deselected, a null value is saved.\n \n ### Using the pathValue and pathSaveInto parameters\n \n - Because users can appear in multiple places in the browser at one time, a user only appears as selected if it is present in the *pathValue* array.\n - When a user is selected, the variables in *selectionSaveInto* are updated after the variables in *pathSaveInto*. This means that if a variable is updated in both saves, it will be updated to the value assigned in the *selectionSaveInto* when a user is selected.\n - When the component is read-only, the variables in *selectionSaveInto* are not updated when a user is clicked. However, if the *selectionValue* is set, a user can still be displayed as selected. *pathSaveInto* still updates as normal.\n - A user can only be deselected if present in the *pathValue*.\n - The first user or group in the *pathValue* must be a member of the initial group. Each subsequent user or group in the *pathValue* must be a member of the group that comes before it in the array. Otherwise, an error will occur.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Using user browsers with picker fields\n \n ```sail \n a!localVariables(\n   local!initialGroup,\n   local!pathValue: a!refreshVariable(\n     value: {},\n     refreshOnVarChange: local!initialGroup\n   ),\n   local!selectionValue,\n   local!readOnly,\n   {\n       a!sectionLayout(\n         label:\"Controls\",\n         contents:{\n           a!pickerFieldGroups(\n             label: \"Initial Group\",\n             maxSelections: 1,\n             value: local!initialGroup,\n             saveInto: local!initialGroup\n           ),\n           a!checkboxField(\n             labelPosition: \"COLLAPSED\",\n             choiceLabels: {\"Read-only\"},\n             choiceValues: {true},\n             value: local!readOnly,\n             saveInto: local!readOnly\n           )\n         }\n       ),\n       a!sectionLayout(\n         label:\"Component\",\n         contents: {\n           a!userBrowserFieldColumns(\n             label: \"User Browser\",\n             rootGroup: local!initialGroup,\n             pathValue: local!pathValue,\n             pathSaveInto: local!pathValue,\n             selectionValue: local!selectionValue,\n             selectionSaveInto: local!selectionValue,\n             readOnly: local!readOnly\n           )\n         }\n       ),\n       a!sectionLayout(\n         label: \"Selection & Path\",\n         contents: {\n           a!pickerFieldUsersAndGroups(\n             label: \"Navigation Path\",\n             instructions: \"Represents the current navigation from the rootGroup. Changing this could cause errors in the interface.\",\n             value: local!pathValue,\n             saveInto: local!pathValue\n           ),\n           a!pickerFieldUsers(\n             label: \"Selected User\",\n             instructions: \"The selected user only appears as selected if contained in the pathValue.\",\n             value: local!selectionValue,\n             saveInto: local!selectionValue\n           )\n         }\n       )\n   }\n )\n ```"}, {"doc": "Header_Layout.md", "content": "---\n layout: function\n title: Header Content Layout Component\n category: function_page\n compatibility: -crf\n excerpt: Displays any arrangement of layouts and components beneath a card or billboard\n   flush with the edge of the page.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!headerContentLayout\n fncsubcat: Layouts\n parameters:\n - keyword: header\n   name: Header\n   types: Any Type\n   description: Billboard, card, or list of billboards or cards to display at the top\n     of the page. Configure using `a!billboardLayout()` or `a!cardLayout().`\n - keyword: contents\n   name: Contents\n   types: Any Type Array\n   description: Components and layouts to display in the body of the interface.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: backgroundColor\n   name: Background color\n   types: Text\n   description: 'Color to show behind the contents of the page. Valid values: Any valid\n     hex color or `\"WHITE\"` (default), `\"TRANSPARENT\"`, `\"CHARCOAL_SCHEME\"`, `\"NAVY_SCHEME\"`,\n     `\"PLUM_SCHEME\"`.\n \n     '\n - keyword: contentsPadding\n   name: Contents Padding\n   types: Text\n   description: 'Determines the space surrounding the contents. Valid values: `\"NONE\"`,\n     `\"EVEN_LESS\"`, `\"LESS\"`, `\"STANDARD\"` (default), `\"MORE\"`, `\"EVEN_MORE\"`.\n \n     '\n - keyword: isHeaderFixed\n   name: Fix header when scrolling\n   types: Boolean\n   description: 'Determines whether the header remains at the top of the page when\n     scrolling. Default: false.\n \n     '\n reftype: sailcomponent\n scdisplayname: Header Content Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!headerContentLayout \n  function syntax: a!headerContentLayout (header,contents,showWhen,backgroundColor,contentsPadding,isHeaderFixed)\n \n Displays any arrangement of layouts and components beneath a [billboard](Billboard_Layout.md) or [card](card_layout.md) header that is flush with the edge of the page. Similar to a form layout, this is a top-level layout and cannot be nested within other layouts. The header layout is ideal for landing pages and reports.\n \n To add a header content layout to your interface from Design Mode, drag out either a **CARD HEADER** or **BILLBOARD HEADER** from the interface palette.\n \n **See also**: [Header Content Layout style guidance](sail/ux-header-content-layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"header\", \"name\": \"Header\", \"types\": \"Any Type\", \"description\": \"Billboard, card, or list of billboards or cards to display at the top of the page. Configure using `a!billboardLayout()` or `a!cardLayout().`\"}, {\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type Array\", \"description\": \"Components and layouts to display in the body of the interface.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"backgroundColor\", \"name\": \"Background color\", \"types\": \"Text\", \"description\": \"Color to show behind the contents of the page. Valid values: Any valid hex color or `\\\"WHITE\\\"` (default), `\\\"TRANSPARENT\\\"`, `\\\"CHARCOAL_SCHEME\\\"`, `\\\"NAVY_SCHEME\\\"`, `\\\"PLUM_SCHEME\\\"`.\\n\"}, {\"keyword\": \"contentsPadding\", \"name\": \"Contents Padding\", \"types\": \"Text\", \"description\": \"Determines the space surrounding the contents. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}, {\"keyword\": \"isHeaderFixed\", \"name\": \"Fix header when scrolling\", \"types\": \"Boolean\", \"description\": \"Determines whether the header remains at the top of the page when scrolling. Default: false.\\n\"}]\n \n ## Usage considerations\n \n ### Designing headers\n \n - For configuring record views with a flush header, consider using a [record header](record-view.md#style-the-record-header).\n - If you are using a fixed header, be sure to view your interface on multiple screen sizes to make sure the content is accessible on all devices. See the [header content layout design guidance](sail/ux-header-content-layout.md#making-sure-fixed-headers-are-responsive-for-all-screen-sizes) for more information.\n - If fixed header is selected in the header content layout, but it isn't selected for the record header, neither header will be fixed. See [Design Record Views](record-view.md#using-fixed-record-header-with-header-content-layout) for more information.\n - To quickly configure a fixed header in a one-page portal, consider enabling the [header bar](portal-object.md#header). On sites and multipage portals, the header bar is always enabled.\n \n ### Using the backgroundColor parameter\n \n - If you're using a predefined color scheme for your background, make sure that your header content layout and [cards](card_layout.md) are using the same predefined color scheme.\n - If you're using a dark custom background color for your header content layout, make your cards a lighter color. For more information on backgrounds, check out our [header content layout design guidance](sail/ux-header-content-layout.md#color-schemes). \n - When using predefined color schemes, cards are a lighter color than the background. If you're using a card header in combination with a predefined color scheme, you must manually set the card header's background color to use the same hex code as the header content layout's background. For more guidance on backgrounds, check out our [design guidance for header content layouts](sail/ux-header-content-layout.md#color-schemes).\n - If you're using a predefined dark color scheme in a [site](sites_object.md), use the same color scheme for your site's header bar. \n - Dark color schemes shouldn't be applied to interfaces used on Tempo or across multiple sites with different color schemes.\n \n ### Using transparent backgrounds\n \n - The header content layout's [transparent background](sail/ux-header-content-layout.md#transparent-content-background) eliminates the page outline on an interface and shows the background color.\n   - For Tempo, the background color is light blue. \n   - For Sites, the background color is gray.\n - If you are using a billboard that contains an image with a transparent background, you'll be able to see the color specified in the billboard layout's *backgroundColor* parameter. For a clean look, make sure that the billboard's *backgroundColor* is the same hex code as the *backgroundColor* of the header content layout. See our [header content layout design guidance](sail/ux-header-content-layout.md) for more information and examples.\n \n ### Report titles in Tempo and embedded interfaces\n \n - This layout will not display the report title when viewed in Tempo and embedded interfaces.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Billboard layout\n \n This example uses a billboard layout within the header content layout. It displays the following interface.\n \n ![A billboard header with \"Finance Summary\" and details in a bar overlay, an example section layout is at the bottom](images/headerContentLayout_billboard_example.png){:.screenshot}\n \n See the page on [Billboard Layouts](Billboard_Layout.md) for more information on billboards and the [SAIL Design System: Billboard Layout](sail/ux-billboard-layout.md) for guidance on when to use each overlay style.\n \n Copy and paste this example into an an interface object to experiment with it.\n \n ```sail\n a!headerContentLayout(\n   header: {\n     a!billboardLayout(\n       backgroundMedia: a!documentImage(\n         document: a!EXAMPLE_BILLBOARD_IMAGE()\n       ),\n       backgroundColor: \"#f0f0f0\",\n       height: \"SHORT\",\n       marginBelow: \"NONE\",\n       overlay: a!barOverlay(\n         position: \"BOTTOM\",\n         contents: {\n           a!columnsLayout(\n             columns: {\n               a!columnLayout(\n                 contents: {\n                   a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: {\n                           \"Finance Summary\"\n                         },\n                         size: \"LARGE\"\n                       )\n                     }\n                   )\n                 }\n               ),\n               a!columnLayout(\n                 contents: {\n                   a!columnsLayout(\n                     columns: {\n                       a!columnLayout(\n                         contents: {\n                           a!richTextDisplayField(\n                             label: \"Total Spending\",\n                             value: {\n                               a!richTextItem(\n                                 text: {\n                                   \"$31,000.00\"\n                                 },\n                                 size: \"MEDIUM_PLUS\"\n                               )\n                             }\n                           )\n                         }\n                       ),\n                       a!columnLayout(\n                         contents: {\n                           a!richTextDisplayField(\n                             label: \"Remaining Budget\",\n                             value: {\n                               a!richTextItem(\n                                 text: {\n                                   \"79%\"\n                                 },\n                                 color: \"POSITIVE\",\n                                 size: \"MEDIUM_PLUS\"\n                               )\n                             }\n                           )\n                         }\n                       ),\n                       a!columnLayout(\n                         contents: {\n                           a!richTextDisplayField(\n                             label: \"Open Requests\",\n                             value: {\n                               a!richTextItem(\n                                 text: {\n                                   \"36\"\n                                 },\n                                 size: \"MEDIUM_PLUS\"\n                               )\n                             }\n                           )\n                         }\n                       )\n                     },\n                     alignVertical: \"TOP\"\n                   )\n                 }\n               )\n             },\n             alignVertical: \"MIDDLE\"\n           )\n         },\n         style: \"DARK\"\n       )\n     )\n   },\n   contents: {\n     a!sectionLayout(\n       label: \"Example Section\",\n       contents: {\n         a!textField(\n           label: \"YOUR CONTENT HERE\",\n           readOnly: true()\n         )\n       }\n     )\n   }\n )\n ```\n \n ### Card layout\n \n This example uses a card layout within the header content layout. It displays the following interface.\n \n ![A header with \"Finance Summary\" and details in a gray background, an example section layout is at the bottom](images/headerContentLayout_card_example.png){:.screenshot}\n \n See the page on [Card Layouts](card_layout.md) for more information on cards.\n \n Copy and paste this example into an an interface object to experiment with it.\n \n ``` sail \n a!headerContentLayout(\n   header: {\n     a!cardLayout(\n       contents: {\n         a!columnsLayout(\n           columns: {\n             a!columnLayout(\n               contents: {\n                 a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     a!richTextItem(\n                       text: {\n                         \"Finance Summary\"\n                       },\n                       size: \"LARGE\"\n                     )\n                   }\n                 )\n               }\n             ),\n             a!columnLayout(\n               contents: {\n                 a!columnsLayout(\n                   columns: {\n                     a!columnLayout(\n                       contents: {\n                         a!richTextDisplayField(\n                           label: \"Total Spending\",\n                           value: {\n                             a!richTextItem(\n                               text: {\n                                 \"$31,000.00\"\n                               },\n                               size: \"MEDIUM_PLUS\"\n                             )\n                           }\n                         )\n                       }\n                     ),\n                     a!columnLayout(\n                       contents: {\n                         a!richTextDisplayField(\n                           label: \"Remaining Budget\",\n                           value: {\n                             a!richTextItem(\n                               text: {\n                                 \"79%\"\n                               },\n                               color: \"POSITIVE\",\n                               size: \"MEDIUM_PLUS\"\n                             )\n                           }\n                         )\n                       }\n                     ),\n                     a!columnLayout(\n                       contents: {\n                         a!richTextDisplayField(\n                           label: \"Open Requests\",\n                           value: {\n                             a!richTextItem(\n                               text: {\n                                 \"36\"\n                               },\n                               size: \"MEDIUM_PLUS\"\n                             )\n                           }\n                         )\n                       }\n                     )\n                   },\n                   alignVertical: \"TOP\"\n                 )\n               }\n             )\n           },\n           alignVertical: \"MIDDLE\"\n         )\n       },\n       style: \"STANDARD\"\n     )\n   },\n   contents: {\n     a!sectionLayout(\n       label: \"Example Section\",\n       contents: {\n         a!textField(\n           label: \"YOUR CONTENT HERE\",\n           readOnly: true()\n         )\n       }\n     )\n   }\n )\n ``` \n \n ### Fixed header\n \n This example uses a fixed header within the header content layout. It displays the following interface.\n \n ![gif of a fixed header with order details](images/hcl_fixed_header_example.gif){:.screenshot}\n \n Note that this pattern contains two empty `a!cardLayout()` components to help you see the scrolling behavior with a fixed header. These components have no other purpose.\n \n See the [SAIL Design System: Header Content Layout](sail/ux-header-content-layout.md) for more information on fixed headers.\n \n Copy and paste this example into an an interface object to experiment with it.\n \n ```sail\n a!headerContentLayout(\n   header: {\n     a!cardLayout(\n       contents: {\n         a!columnsLayout(\n           columns: {\n             a!columnLayout(\n               contents: {\n                   a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: \"Order\" & \" \" & \"#12345667\",\n                         size: \"LARGE\",\n                         style: \"STRONG\"\n                       )\n                     }\n                   )\n               }\n             )\n           }\n         ),\n         a!columnsLayout(\n           columns: {\n             a!columnLayout(\n               contents: {\n                 a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     a!richTextItem(\n                       text: \"Next Action\",\n                       color: \"SECONDARY\"\n                     )\n                   }\n                 ),\n                 a!buttonArrayLayout(\n                   buttons: {\n                     a!buttonWidget(\n                       label: if(\n                         a!isPageWidth(\"TABLET_PORTRAIT\"),\n                         \"Create Label\",\n                         \"Create Shipping Label\"\n                       ),\n                       style: \"PRIMARY\"\n                     )\n                   },\n                   align: \"START\",\n                   marginBelow: \"NONE\"\n                 )\n               }\n             ),\n             a!columnLayout(\n               contents: {\n                 a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     a!richTextItem(\n                       text: \"Shipping Priority\",\n                       color: \"SECONDARY\"\n                     )\n                   }\n                 ),\n                 a!sideBySideLayout(\n                   items: {\n                     a!sideBySideItem(\n                       item: a!richTextDisplayField(\n                         labelPosition: \"COLLAPSED\",\n                         value: {\n                           a!richTextItem(\n                             text: \"Normal\",\n                             size: \"MEDIUM\",\n                             style: \"STRONG\"\n                           )\n                         }\n                       )\n                     ),\n                     a!sideBySideItem(\n                       item: a!buttonArrayLayout(\n                         buttons: {\n                           a!buttonWidget(\n                             label: \"Expedite\",\n                             size: \"SMALL\"\n                           )\n                         },\n                         align: \"START\",\n                         marginBelow: \"NONE\"\n                       ),\n                       width: \"MINIMIZE\"\n                     )\n                   },\n                   alignVertical: \"MIDDLE\",\n                   stackWhen: \"TABLET_PORTRAIT\"\n                 )\n               }\n             ),\n             a!columnLayout(\n               contents: {\n                 a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     a!richTextItem(\n                       text: \"Days Since Order Received\",\n                       color: \"SECONDARY\"\n                     )\n                   }\n                 ),\n                 a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     a!richTextItem(\n                       text: 6,\n                       size: \"MEDIUM\",\n                       style: \"STRONG\"\n                     )\n                   },\n                   marginBelow: \"NONE\"\n                 ),\n                 a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     a!richTextItem(\n                       text: {\n                         \"Received on\",\n                         \" \",\n                         text(today()- 6, \"MMM D, YYYY\")\n                       },\n                       size: \"SMALL\"\n                     )\n                   }\n                 )\n               }\n             ),\n             a!columnLayout(\n               contents: {\n                 a!richTextDisplayField(\n                   labelPosition: \"COLLAPSED\",\n                   value: {\n                     a!richTextItem(\n                       text: \"Assignee\",\n                       color: \"SECONDARY\"\n                     )\n                   }\n                 ),\n                 a!sideBySideLayout(\n                   items: {\n                     a!sideBySideItem(\n                       item: a!imageField(\n                         labelPosition: \"COLLAPSED\",\n                         images: a!userImage(),\n                         size: \"TINY\",\n                         style: \"AVATAR\"\n                       ),\n                       width: \"MINIMIZE\"\n                     ),\n                     a!sideBySideItem(\n                       item: a!richTextDisplayField(\n                         labelPosition: \"COLLAPSED\",\n                         value: {\n                           a!richTextItem(\n                             text: \"Anthony Wu\",\n                             link: a!userRecordLink(),\n                             linkStyle: \"STANDALONE\",\n                             size: \"MEDIUM\",\n                             style: \"STRONG\"\n                           )\n                         },\n                         preventWrapping: true\n                       )\n                     ),\n                     a!sideBySideItem(\n                       item: a!buttonArrayLayout(\n                         buttons: {\n                           a!buttonWidget(\n                             label: \"Reassign\",\n                             size: \"SMALL\"\n                           )\n                         },\n                         align: \"START\",\n                         marginBelow: \"NONE\"\n                       ),\n                       width: \"MINIMIZE\"\n                     )\n                   },\n                   alignVertical: \"MIDDLE\",\n                   stackWhen: \"TABLET_PORTRAIT\"\n                 )\n               }\n             )\n           },\n           spacing: \"SPARSE\",\n           showDividers: true\n         )\n       },\n       padding: \"STANDARD\",\n       marginBelow: \"MORE\"\n     )\n   },\n     isHeaderFixed: if(a!isPageWidth(\"PHONE\"),false,true),\n   contents: {\n     a!columnsLayout(\n       columns: {\n         a!columnLayout(\n           contents: {\n             a!sectionLayout(\n               label: \"Example Section\",\n               labelIcon: \"box\",\n               labelColor: \"STANDARD\",\n               contents: {\n                 a!sectionLayout(\n                   label: upper(\"Your content here\"),\n                   labelSize: \"SMALL\",\n                   labelColor: \"SECONDARY\"\n                 ),\n                 a!cardLayout(\n                   contents: {},\n                   height: \"EXTRA_TALL\",\n                   style: \"NONE\",\n                   marginBelow: \"STANDARD\",\n                   showBorder: false\n                 ),\n                 a!cardLayout(\n                   contents: {},\n                   height: \"EXTRA_TALL\",\n                   style: \"NONE\",\n                   marginBelow: \"STANDARD\",\n                   showBorder: false\n                 )\n               }\n             )\n           }\n         )\n       },\n       spacing: \"SPARSE\",\n       stackWhen: {\"TABLET_LANDSCAPE\", \"TABLET_PORTRAIT\", \"PHONE\"\n       }\n     )\n   }\n )\n ```\n \n ### Header content layout with navy color scheme\n \n This example uses the navy color scheme within a header content layout. It displays the following interface.\n \n ![screenshot of a Admissions dashboard with a navy background](images/navy_hcl_example.png){:.screenshot}\n \n Copy and paste this example into an an interface object to experiment with it.\n \n ```sail\n a!localVariables(\n   local!universityAdmissionsMetricsSpring: {\n     a!map(name: \"Applications\", totalCount: 1753),\n     a!map(name: \"Admitted\",     totalCount: 367),\n     a!map(name: \"Accepted\",     totalCount: 200),\n     a!map(name: \"Enrolled\",     totalCount: 150)\n   },\n   local!universityAdmissionsMetricsFall: {\n     a!map(name: \"Applications\", totalCount: 3415),\n     a!map(name: \"Admitted\",     totalCount: 429),\n     a!map(name: \"Accepted\",     totalCount: 212),\n     a!map(name: \"Enrolled\",     totalCount: 199)\n   },\n   a!headerContentLayout(\n     header:{}, \n     contents:{\n       a!richTextDisplayField(\n         labelPosition: \"COLLAPSED\",\n         value: \n         {\n           a!richTextItem(\n             text: {\n               \"2021 Admissions Dashboard\"\n             },\n             size: \"LARGE\"\n           ),\n           char(10),\n           char(10)\n         }\n       ),\n       a!columnsLayout(\n         columns: {\n           a!columnLayout(\n             contents: {\n               a!cardLayout(\n                 contents: {\n                   a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: \"2021 Spring Semester\",\n                         size: \"MEDIUM_PLUS\"\n                       ),\n                       char(10),\n                       char(10)\n                     }\n                   ),\n                   a!columnsLayout(\n                     columns: {\n                       a!forEach(\n                         items: local!universityAdmissionsMetricsSpring,\n                         expression: a!columnLayout(\n                           contents: {\n                             a!richTextDisplayField(\n                               labelPosition: \"COLLAPSED\",\n                               value: {\n                                 a!richTextItem(\n                                   text: fv!item.name,\n                                   color: \"STANDARD\"\n                                 ),\n                                 char(10),\n                                 a!richTextItem(\n                                   text: fv!item.totalCount,\n                                   size: \"LARGE\",\n                                   style: \"STRONG\"\n                                 )\n                               }\n                             )\n                           }\n                         )\n                       )\n                     },\n                     showDividers: true\n                   )\n                 },\n                 style: \"NAVY_SCHEME\",\n                 padding: \"STANDARD\",\n                 marginBelow: \"STANDARD\",\n                 showBorder: false\n               )\n             }\n           ),\n           a!columnLayout(\n             contents: {\n               a!cardLayout(\n                 contents: {\n                   a!richTextDisplayField(\n                     labelPosition: \"COLLAPSED\",\n                     value: {\n                       a!richTextItem(\n                         text: \"2021 Fall Semester\",\n                         size: \"MEDIUM_PLUS\"\n                       ),\n                       char(10),\n                       char(10)\n                     }\n                   ),\n                   a!columnsLayout(\n                     columns: {\n                       a!forEach(\n                         items: local!universityAdmissionsMetricsFall,\n                         expression: a!columnLayout(\n                           contents: {\n                             a!richTextDisplayField(\n                               labelPosition: \"COLLAPSED\",\n                               value: {\n                                 a!richTextItem(\n                                   text: fv!item.name,\n                                   color: \"STANDARD\"\n                                 ),\n                                 char(10),\n                                 a!richTextItem(\n                                   text: fv!item.totalCount,\n                                   size: \"LARGE\",\n                                   style: \"STRONG\"\n                                 )\n                               }\n                             )\n                           }\n                         )\n                       )\n                     },\n                     showDividers: true\n                   )\n                 },\n                 style: \"NAVY_SCHEME\",\n                 padding: \"STANDARD\",\n                 marginBelow: \"STANDARD\",\n                 showBorder: false\n               )\n             }\n           )\n         }\n       )\n     }, \n     backgroundColor: \"NAVY_SCHEME\"  \n   )\n )\n ```"}, {"doc": "Org_Chart_Component.md", "content": "---\n layout: function\n title: Org Chart Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays the organizational structure of users within Appian based on the\n   users\u2019 Supervisor field values.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!orgChartField\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: value\n   name: Display Value\n   types: User\n   description: The user who is the focus of the org chart.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the user value. Use a!save()\n     to save a modified or alternative value to a variable.\n - keyword: showAllAncestors\n   name: Show All Ancestors\n   types: Boolean\n   description: 'Determines if all ancestors above the user are displayed. Default\n     is false, which displays only the user''s supervisor.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: showTotalCounts\n   name: Show Total Counts\n   types: Boolean\n   description: 'Determines who is included in the report count. When set to true,\n     the count includes both direct and indirect reports. When set to false, the count\n     only includes direct reports. Default: false.\n \n     '\n reftype: sailcomponent\n scdisplayname: Org Chart\n space: sail_component\n ---\n \n ## Function\n \n function name: a!orgChartField \n  function syntax: a!orgChartField (label,labelPosition,instructions,value,saveInto,showAllAncestors,helpTooltip,accessibilityText,showWhen,showTotalCounts)\n \n Displays the organizational structure of users within Appian based on the users\u2019 Supervisor field values.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"User\", \"description\": \"The user who is the focus of the org chart.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the user value. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"showAllAncestors\", \"name\": \"Show All Ancestors\", \"types\": \"Boolean\", \"description\": \"Determines if all ancestors above the user are displayed. Default is false, which displays only the user's supervisor.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"showTotalCounts\", \"name\": \"Show Total Counts\", \"types\": \"Boolean\", \"description\": \"Determines who is included in the report count. When set to true, the count includes both direct and indirect reports. When set to false, the count only includes direct reports. Default: false.\\n\"}]\n \n ## Usage considerations\n \n ### Permissions and offline use\n \n - In the org chart, the user can only see active users that they have permission to view. If the current user does not have permission to view the selected user in the *value* parameter or the selected user is deactivated, an error will occur.\n - Avoid using this component for offline mobile forms since tapping on a user will not update the focus of the org chart to the user.\n \n ### Structure\n \n - The org chart structure is based on users' **Supervisor** field values.\n - If supervisor or location information is not populated in user profiles, you can request users to update their own profiles in Tempo or use the [Update User Profile Smart Service](Update_User_Profile_Smart_Service.md) to update user profiles via process.\n \n ### Displaying location and user cards\n \n - Hovering over a user's profile photo or name displays the corresponding user card, which includes additional information about the user and allows the viewer to quickly follow or unfollow the user.\n - Location (city, state, country) is displayed on the org chart if the user has a value set in their profile.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ```sail \n a!localVariables(\n   local!user: loggedInUser(),\n   a!orgChartField(\n     value: local!user,\n     saveInto: local!user\n   )\n )\n ```\n \n An org chart similar to the one pictured below displays. Note that your org chart may differ from the example:\n \n ![An example of the org chart component](images/OrgChart.png){:.screenshot}"}, {"doc": "Line_Chart_Component_19r1.md", "content": "---\n layout: function\n title: a!lineChartField_19r1 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays a series of numerical data as points connected by lines. Use a line\n   chart to visualize trends of data that changes over time.\n category: function_page\n compatibility: -crf\n fncname: a!lineChartField_19r1\n fncsubcat: Charts\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scdisplayname: Line Chart\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: 'Text to display as the field label.\n \n     '\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: categories\n   name: Categories\n   types: List of Text String\n   description: Text to display on the x-axis below each data point.\n - keyword: series\n   name: Series\n   types: List of [LineChartSeries](Chart_Series_Component.md)\n   description: Array of data series created with a!chartSeries().\n - keyword: xAxisTitle\n   name: X-Axis Title\n   types: Text\n   description: Title for the independent (horizontal) axis.\n - keyword: yAxisTitle\n   name: Y-Axis Title\n   types: Text\n   description: Title for the dependent (vertical) axis.\n - keyword: yAxisMin\n   name: Min Y-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the vertical axis.\n - keyword: yAxisMax\n   name: Max Y-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the vertical axis.\n - keyword: referenceLines\n   name: Reference Lines\n   types: List of Variant\n   description: Array of reference line values for each threshold to be defined on\n     the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\n - keyword: showLegend\n   name: Show legend\n   types: Boolean\n   description: 'Determines if a color legend displays below the chart. Default: true.'\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: 'Determines if data values are displayed next to each data point. Default:\n     false.'\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for each data point.\n     Default: true.'\n - keyword: allowDecimalAxisLabels\n   name: Allow decimal axis labels\n   types: Boolean\n   description: 'Allows dependent (vertical) values to display as decimal numbers instead\n     of integers. Default: false.'\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: connectNulls\n   name: Connect Null Data Points\n   types: Boolean\n   description: 'Determines whether to connect a graph line across null points, or\n     render a gap between the two points on either side of the null. Default: false.'\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n evolved_fncname: a!lineChartField\n evolved_reason: 'Added ability to display thousands of data points without scrolling.\n   When the chart shows date or date and time fields, the x-axis labels are formatted\n   to match the end user''s time zone and resized to avoid clutter.\n \n   '\n ---\n \n ## Line Chart\n \n **Function**: `a!lineChartField_19r1()`\n \n Displays a series of numerical data as points connected by lines. Use a line chart to visualize trends of data that changes over time. If specific values are more important than the trend, consider using a [column chart](Column_Chart_Component.md).\n \n **See also**: [Column Chart](Column_Chart_Component.md), [Bar Chart](Bar_Chart_Component.md), [Pie Chart](Pie_Chart_Component.md), [Chart Series](Chart_Series_Component.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"categories\", \"name\": \"Categories\", \"types\": \"List of Text String\", \"description\": \"Text to display on the x-axis below each data point.\"}, {\"keyword\": \"series\", \"name\": \"Series\", \"types\": \"List of [LineChartSeries](Chart_Series_Component.md)\", \"description\": \"Array of data series created with a!chartSeries().\"}, {\"keyword\": \"xAxisTitle\", \"name\": \"X-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the independent (horizontal) axis.\"}, {\"keyword\": \"yAxisTitle\", \"name\": \"Y-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the dependent (vertical) axis.\"}, {\"keyword\": \"yAxisMin\", \"name\": \"Min Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the vertical axis.\"}, {\"keyword\": \"yAxisMax\", \"name\": \"Max Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the vertical axis.\"}, {\"keyword\": \"referenceLines\", \"name\": \"Reference Lines\", \"types\": \"List of Variant\", \"description\": \"Array of reference line values for each threshold to be defined on the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\"}, {\"keyword\": \"showLegend\", \"name\": \"Show legend\", \"types\": \"Boolean\", \"description\": \"Determines if a color legend displays below the chart. Default: true.\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed next to each data point. Default: false.\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for each data point. Default: true.\"}, {\"keyword\": \"allowDecimalAxisLabels\", \"name\": \"Allow decimal axis labels\", \"types\": \"Boolean\", \"description\": \"Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: false.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"connectNulls\", \"name\": \"Connect Null Data Points\", \"types\": \"Boolean\", \"description\": \"Determines whether to connect a graph line across null points, or render a gap between the two points on either side of the null. Default: false.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}]\n \n **Notes**\n \n - The order of items in the *Categories* array determines the display order of categories on the chart with the left-most item in the array appearing on the far left of the x-axis.\n - For each null or empty item in the array passed to *Categories*, `[Category #]` displays on the x-axis with `#` as the index number in the *Categories* array of the null or empty item. For example, `[Category 1]`.\n - The index of each item in the *Categories* array must match with the index of its *Series* data value. You can retrieve a dictionary from the *data* field of a `queryrecord()` function result, and then use `a!chartSeries()` to create the Chart Series array.\n - A single *Series* item produces a single line with line points for each *Categories* item. Multiple *Series* items produce multiple lines with one line for each series label item displayed in a distinct color and line points for each *Categories* item with a different data marker shape (for example, square, circle, diamond) for each line.\n - If a series data value is greater than the *Y-Axis Max* value or less than the *Y-Axis Min* value, the line continues off the chart, but the line point does not display.\n - If the *Series* argument has a non-null label value paired with a 0, null, or empty data value, the data value still displays in the legend.\n - If the *Series* argument has a null or empty label value paired with a non-null data value, the label value displays as `[Series #]` with `#` as the index number of the data value. For example, `[Series 1]`.\n - If data values are small and less than a whole number, Appian recommends settings *allowDecimalAxisLabels* to `true`."}, {"doc": "Record_Action_Component.md", "content": "---\n layout: function\n title: Record Action Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays a list of record actions with a consistent style. A record action\n   is an end-user action configured within a [record type object](Record_Type_Object.md),\n   such as a related action or record list action.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!recordActionField\n fncsubcat: Action\n parameters:\n - keyword: actions\n   name: Actions\n   types: Any Type\n   description: 'List of record action items to display, configured using [a!recordActionItem()](Record_Action_Item_Component.md).\n \n     '\n - keyword: style\n   name: Display Style\n   types: Text\n   description: 'Determines how the list of actions should be displayed on the interface.\n     Valid values: `\"TOOLBAR\"` (default), `\"LINKS\"`, `\"CARDS\"`, `\"SIDEBAR\"`, `\"CALL_TO_ACTION\"`,\n     `\"MENU\"`, `\"MENU_ICON\"`, `\"TOOLBAR_PRIMARY\"`, `\"SIDEBAR_PRIMARY\"`. See the [record\n     action design guidance](sail/ux-record-actions.md) for details on how to use different\n     styles effectively.\n \n     '\n - keyword: display\n   name: Display\n   types: Text\n   description: 'Determines how the given action labels will be displayed in each item.\n     Valid values: `\"LABEL_AND_ICON\"` (default), `\"LABEL\"`, `\"ICON\"`.\n \n     '\n - keyword: openActionsIn\n   name: Action Behavior\n   types: Text\n   description: 'Determines how actions should open to the user. Valid values: `\"DIALOG\"`\n     (default), `\"NEW_TAB\"`, `\"SAME_TAB\"`.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the action(s). Valid values: `\"START\"`, `\"CENTER\"`,\n     `\"END\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Record Actions\n space: sail_component\n ---\n \n ## Function\n \n function name: a!recordActionField \n  function syntax: a!recordActionField (actions,style,display,openActionsIn,align,accessibilityText,showWhen)\n \n Displays a list of record actions with a consistent style. A record action is an end-user action configured within a [record type object](Record_Type_Object.md), such as a related action or record list action.\n \n **See also**: \n - [Record Action Item](Record_Action_Item_Component.md)\n - [Create record actions](record-actions.md)\n - [Record action design guidance](sail/ux-record-actions.md)\n \n ## Parameters\n \n [{\"keyword\": \"actions\", \"name\": \"Actions\", \"types\": \"Any Type\", \"description\": \"List of record action items to display, configured using [a!recordActionItem()](Record_Action_Item_Component.md).\\n\"}, {\"keyword\": \"style\", \"name\": \"Display Style\", \"types\": \"Text\", \"description\": \"Determines how the list of actions should be displayed on the interface. Valid values: `\\\"TOOLBAR\\\"` (default), `\\\"LINKS\\\"`, `\\\"CARDS\\\"`, `\\\"SIDEBAR\\\"`, `\\\"CALL_TO_ACTION\\\"`, `\\\"MENU\\\"`, `\\\"MENU_ICON\\\"`, `\\\"TOOLBAR_PRIMARY\\\"`, `\\\"SIDEBAR_PRIMARY\\\"`. See the [record action design guidance](sail/ux-record-actions.md) for details on how to use different styles effectively.\\n\"}, {\"keyword\": \"display\", \"name\": \"Display\", \"types\": \"Text\", \"description\": \"Determines how the given action labels will be displayed in each item. Valid values: `\\\"LABEL_AND_ICON\\\"` (default), `\\\"LABEL\\\"`, `\\\"ICON\\\"`.\\n\"}, {\"keyword\": \"openActionsIn\", \"name\": \"Action Behavior\", \"types\": \"Text\", \"description\": \"Determines how actions should open to the user. Valid values: `\\\"DIALOG\\\"` (default), `\\\"NEW_TAB\\\"`, `\\\"SAME_TAB\\\"`.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the action(s). Valid values: `\\\"START\\\"`, `\\\"CENTER\\\"`, `\\\"END\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using dialog boxes with record actions\n \n - When using a dialog box for the *openActionsIn* parameter, form submission will complete the chain and retain the current page state. \n \n - When the form submits and you close the dialog, all record actions in the record action field will refresh. This means that any visibility conditions, labels, context, and descriptions will update as necessary. If you have multiple record action fields on your interface, the form submission will only refresh the record action field where the action was launched; it will not refresh all record action fields.\n \n - You can configure the size of the dialog box in the record type. The dialog box size is specific to each record action.\n \n - See local variable [refresh behavior](Local_Variables.md#configuring-refresh-behavior) to learn how to refresh specific variables after dialog submission.\n \n \n ### Using the record action component with multiple record types\n \n You can select record actions from different record types.\n \n ## Examples\n \n *Record type object references are specific to each environment. If you copy and paste these examples into your interface, they will not evaluate. Use them as a references only.*\n \n ### Record action field with no configurations\n \n ```sail \n a!recordActionField(\n   actions: {\n     a!recordActionItem(\n    /* For the \"action\" parameter below, replace the record-action reference \n     * (recordType!Department.actions.update) with a valid record-action reference in your environment.\n     */\n      action: recordType!Department.actions.update,\n      identifier: ri!departmentId\n     ),\n     a!recordActionItem(\n    /* For the \"action\" parameter below, replace the record-action reference \n     * (recordType!Customer.actions.flag) with a valid record-action reference in your environment.\n     */\n      action: recordType!Customer.actions.flag,\n      identifier: ri!customerId\n     )\n   }\n )\n ```\n \n Displays the following:\n \n {% include zoompic.html url=\"images/record_components/simple_record_action_field.png\" border=\"-nb\" %}\n \n \n ### Record action field with primary button styling\n \n ```sail\n a!recordActionField(\n  actions: {\n     a!recordActionItem(\n       action: recordType!Order.actions.newOrder\n     ),\n     a!recordActionItem(\n       action: recordType!Order.actions.updateOrder,\n       identifier: 1\n     ),\n     a!recordActionItem(\n       action: recordType!Order.actions.discountOrder,\n       identifier: 1\n     )\n   },\n   style: \"SIDEBAR_PRIMARY\",\n   display: \"LABEL_AND_ICON\"\n )\n ```\n \n Displays the following:\n \n {% include zoompic.html url=\"images/record_components/record-action-primary-style.png\" border=\"-nb\" %}\n \n \n ### Record action field with refresh variables\n \n ```sail \n a!localVariables(\n   /*\n   * The parameter 'refreshAfter' in a!refreshVariable() can be used to refresh data when\n   * record action dialogs are submitted. Do this to update data related to the record action.\n   */\n   local!case: a!refreshVariable(\n     value: a!queryRecordType(\n         /* Replace the recordType reference below (recordType!Case) with a valid   \n          * recordType reference in your environment.\n          */\n         recordType: recordType!Case,\n         fields: {\n             recordType!Case.fields.id,\n             recordType!Case.fields.priority,\n             recordType!Case.fields.status,\n             recordType!Case.fields.createdBy,\n             recordType!Case.fields.createdOn\n         },\n         filters: {\n             filter: a!queryFilter(recordType!Case.fields.id, \"=\", ri!CaseId)\n         },\n         pagingInfo: a!pagingInfo(1, 1)\n     ).data,\n     refreshAfter: \"RECORD_ACTION\"\n   ),\n   {\n     a!sideBySideLayout(\n       items: {\n         a!sideBySideItem(\n           item: a!richTextDisplayField(\n             labelPosition: \"COLLAPSED\",\n             value: {\n               a!richTextHeader(\n                 text: \"Case Details\"\n               )\n             }\n           )\n         ),\n         a!sideBySideItem(\n           item: a!recordActionField(\n             actions: {\n               a!recordActionItem(\n               /* Replace the record action reference below, recordType!Case.actions.edit, \n                * with a valid record action reference in your environment.\n                */\n                 action: recordType!Case.actions.edit,\n                 identifier: local!case[recordType!Case.fields.id]\n               )\n             },\n             openActionsIn: \"DIALOG\",\n             style: \"LINKS\",\n             display: \"LABEL_AND_ICON\",\n             showIcon: true,\n             align: \"END\"\n           )\n         )\n       },\n       alignvertical: \"MIDDLE\"\n     ),\n     a!columnsLayout(\n       columns: {\n         a!columnLayout(\n           contents: {\n             a!textField(\n               label: \"Priority\",\n               labelPosition: \"JUSTIFIED\",\n               value: local!case[recordType!Case.fields.priority],\n               readonly: true\n             ),\n             a!textField(\n               label: \"Status\",\n               labelPosition: \"JUSTIFIED\",\n               value: local!case[recordType!Case.fields.status],\n               readonly: true\n             ),\n           }\n         ),\n         a!columnLayout(\n           contents: {\n             a!textField(\n               label: \"Created On\",\n               labelPosition: \"JUSTIFIED\",\n               value: local!case[recordType!Case.fields.createdOn],\n               readonly: true\n             ),\n             a!textField(\n               label: \"Created By\",\n               labelPosition: \"JUSTIFIED\",\n               value: local!case[recordType!Case.fields.createdBy],\n               readonly: true\n             )\n           }\n         )\n       }\n     )\n   }\n )\n ```\n \n Displays the following:\n \n {% include zoompic.html url=\"images/record_components/refresh_record_action_example.png\" border=\"-nb\" %}"}, {"doc": "Integer_Component.md", "content": "---\n layout: function\n title: Integer Component\n category: function_page\n compatibility: -crf\n excerpt: Displays and allows entry of a single integer number.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!integerField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Number (Integer)\n   description: Number to display in the field.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the integer when the user\n     changes it.  Use a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of number value. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: refreshAfter\n   name: Refresh After\n   types: Text\n   description: 'Determines when the interface is refreshed with the saved value from\n     the barcode field. Valid values are `\"KEYPRESS\"` to refresh after every character\n     typed into the field and `\"UNFOCUS\"` (the default value) to refresh when the user\n     deselects the field after changing its value.\n \n     '\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: masked\n   name: Masked\n   types: Boolean\n   description: 'Determines if the value is obscured from view. Default: false.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Integer\n space: sail_component\n ---\n \n ## Function\n \n function name: a!integerField \n  function syntax: a!integerField (label,instructions,required,readOnly,disabled,value,validations,saveInto,validationGroup,requiredMessage,align,labelPosition,refreshAfter,placeholder,helpTooltip,masked,accessibilityText,showWhen)\n \n Displays and allows entry of a single [integer](Appian_Data_Types.md#number-integer) number.\n \n When working with a [decimal](Appian_Data_Types.md#number-decimal) number, use a [decimal](Floating_Point_Component.md) component. To display a number using a custom format, use a [text](Text_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Number (Integer)\", \"description\": \"Number to display in the field.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the integer when the user changes it.  Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of number value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"Text\", \"description\": \"Determines when the interface is refreshed with the saved value from the barcode field. Valid values are `\\\"KEYPRESS\\\"` to refresh after every character typed into the field and `\\\"UNFOCUS\\\"` (the default value) to refresh when the user deselects the field after changing its value.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"masked\", \"name\": \"Masked\", \"types\": \"Boolean\", \"description\": \"Determines if the value is obscured from view. Default: false.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Displaying values\n \n - The integer number is shown with thousand separators when *readOnly* is `true`.\n - If you want to display an integer with no thousand separators, or with special formatting such as a currency, use the Text component.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Collect an integer value from a user\n \n {% sailbox 600 %} \n a!localVariables(\n   local!referenceNumber: 0,\n   a!integerField(\n     label: \"Reference Number\",\n     value: local!referenceNumber,\n     saveInto: local!referenceNumber\n   )\n )\n {% endsailbox %}\n \n ### Integer with only a label\n \n {% sailbox 600 %} \n a!integerField(\n   label: \"Reference Number\",\n   value: 12345,\n   readOnly: true\n )\n {% endsailbox %}\n \n ### Integer with a validation\n \n {% sailbox 600 %} \n a!localVariables(\n   local!storedValue,\n   a!integerField(\n     label: \"Number of Items\",\n     value: local!storedValue,\n     saveInto: local!storedValue,\n     validations: if(\n       local!storedValue < 1,\n       \"You must enter at least one item\",\n       \"\"\n     )\n   )\n )\n {% endsailbox %}"}, {"doc": "Columns_Browser_Component.md", "content": "---\n layout: function\n title: Hierarchy Browser (Columns) Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays hierarchical data in the form of drillable columns with selectable\n   cells.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!hierarchyBrowserFieldColumns\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: firstColumnValues\n   name: First Column Values\n   types: List of Variant\n   description: Values in the first column. For example, a!queryEntity(...).data or\n     rule!CRM_getAllCustomers().\n - keyword: nodeConfigs\n   name: Node Configurations\n   types: HierarchyBrowserFieldColumnsNode\n   description: Describe how to display a value as a node using a!hierarchyBrowserFieldColumnsNode()\n     and fv!nodeValue. This rule or expression is evaluated for each value where fv!nodeValue\n     is any node value.\n - keyword: pathValue\n   name: Navigation Path\n   types: List of Variant\n   description: 'As the user clicks through the browser, clicked nodes become highlighted.\n     These clicked nodes'' values are in the pathValue. They should be stored in a\n     variable, for example local!path. The clicked node''s value is used to determine\n     the next column, generated by nextColumnValues.\n \n     '\n - keyword: pathSaveInto\n   name: Save Navigation To\n   types: List of Save\n   description: 'Variable or list of variables to update when a user clicks on a drillable\n     or selectable node, as determined by the node configurations. For example, local!path.\n     Use a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: nextColumnValues\n   name: Next Column Values\n   types: Any Type\n   description: 'Given a node value, describe how to get the next column\u2019s values using\n     the variable fv!nodeValue. For example, rule!CRM_getTicketsForCustomer(customer:\n     fv!nodeValue, isActive: true). This rule or expression is evaluated for each value\n     in pathValue where fv!nodeValue refers any value in pathValue.\n \n     '\n - keyword: selectionValue\n   name: Selection Value\n   types: Any Type\n   description: Value of the currently selected node. The selection will be indicated\n     by a unique display if present in the navigation path.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: 'Variable or list of variables to update when a user clicks on a selectable\n     node, as determined by the node configurations. Use a!save() to save a modified\n     or alternative value to a variable.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the component.Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Hierarchy Browser (Columns)\n space: sail_component\n ---\n \n ## Function\n \n function name: a!hierarchyBrowserFieldColumns \n  function syntax: a!hierarchyBrowserFieldColumns (label,labelPosition,instructions,helpTooltip,firstColumnValues,nodeConfigs,pathValue,pathSaveInto,nextColumnValues,selectionValue,selectionSaveInto,height,accessibilityText,showWhen)\n \n Displays hierarchical data in the form of drillable columns with selectable cells.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"firstColumnValues\", \"name\": \"First Column Values\", \"types\": \"List of Variant\", \"description\": \"Values in the first column. For example, a!queryEntity(...).data or rule!CRM_getAllCustomers().\"}, {\"keyword\": \"nodeConfigs\", \"name\": \"Node Configurations\", \"types\": \"HierarchyBrowserFieldColumnsNode\", \"description\": \"Describe how to display a value as a node using a!hierarchyBrowserFieldColumnsNode() and fv!nodeValue. This rule or expression is evaluated for each value where fv!nodeValue is any node value.\"}, {\"keyword\": \"pathValue\", \"name\": \"Navigation Path\", \"types\": \"List of Variant\", \"description\": \"As the user clicks through the browser, clicked nodes become highlighted. These clicked nodes' values are in the pathValue. They should be stored in a variable, for example local!path. The clicked node's value is used to determine the next column, generated by nextColumnValues.\\n\"}, {\"keyword\": \"pathSaveInto\", \"name\": \"Save Navigation To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a user clicks on a drillable or selectable node, as determined by the node configurations. For example, local!path. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"nextColumnValues\", \"name\": \"Next Column Values\", \"types\": \"Any Type\", \"description\": \"Given a node value, describe how to get the next column\\u2019s values using the variable fv!nodeValue. For example, rule!CRM_getTicketsForCustomer(customer: fv!nodeValue, isActive: true). This rule or expression is evaluated for each value in pathValue where fv!nodeValue refers any value in pathValue.\\n\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"Any Type\", \"description\": \"Value of the currently selected node. The selection will be indicated by a unique display if present in the navigation path.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a user clicks on a selectable node, as determined by the node configurations. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the component.Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Columns and user and group browsers comparison\n \n The columns browser component creates a Miller-columns-style browser that allows users to select a business object while browsing through a hierarchy of designer-specified business data.\n \n The columns browser is a generalized version of the [user and group browsers](User_and_Group_Browser_Components.md) in the same way that the [custom picker](Custom_Picker_Component.md) is a generalized version of the [user and group pickers](User_Picker_Component.md). The designer has control over what data is shown, how it is retrieved, and how it is displayed, making the component a flexible means of presenting hierarchical business data to users.\n \n {% comment %}\n For a more detailed example, see the [Portfolio Manager application](Hierarchy_Browser_Columns_-_Portfolio_Manager.md).\n {% endcomment %}\n \n For more information on how the columns browser works, see this [detailed explanation](#breakdown).\n \n ### Selecting and displaying values\n \n - If *firstColumnValues* are not specified, only the *label*, *tooltip*, and *instructions* will display.\n - To make the selection required for submission or display validation messages based on the selection, pair the browser with a picker or other component.\n - The [function variable](parts-of-an-expression.md#function-variables) `fv!nodeValue` is available when configuring the columns browser. It is only available in the *nodeConfigs* and *nextColumnValues* parameters.\n \n ### Using the pathValue and pathSaveInto parameters\n \n - Because values can appear in multiple places in the browser at one time, a node only displays as selected if it is present in the *pathValue* array. If *selectionValue* appears twice in the *pathValue* array, the component highlights only the last node in the array whose value is the selected value.\n - When a selectable node is clicked, variables in *pathSaveInto* are updated before variables in *Save Selection To*. This means that if a variable is updated in both saves, it will be updated to the value assigned in the *selectionSaveInto*.\n - Clicking a selected node deselects the value by saving a null value as the selection. To be considered selected, the value must be at the end of the *pathValue*.\n - The first value in the *pathValue* must be included in the *firstColumnValues*. Each subsequent value in the *pathValue* must be included in the *nextColumnValues* generated by the previous value in the *pathValue*. For example, if *pathValue* is `{1, 10}`, then `1` must be present in *firstColumnValues* and `10` must be present in the *nextColumnValues* generated by `1`. \n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Columns browser\n \n {% comment %}\n For a more detailed example, see the [Portfolio Manager application](Hierarchy_Browser_Columns_-_Portfolio_Manager.md). \n {% endcomment %}\n \n ```sail\n a!localVariables(\n   local!path,\n   local!selection,\n   local!numberOfNodesInFirstColumn: 10,\n   local!firstColumnValues: a!foreach(\n     enumerate(local!numberOfNodesInFirstColumn),\n     a!localVariables(\n       /* Give it a random number of children between 0 and 20 */\n       local!numberOfChilren: tointeger(rand() * 20),\n       /* Make only even numbers drillable */\n       local!isDrillable: mod(fv!item, 2) = 0,\n       /* Make only even numbers divisble by 3 selectable */\n       local!isSelectable: mod(fv!item, 3) = 0,\n       {\n         id: fv!item,\n         name: \"Node \" & fv!item,\n         type: if(\n           rand() > .5,\n           \"HAPPY\",\n           \"SAD\"\n         ),\n         numberOfChildren: local!numberOfChilren,\n         isDrillable: local!isDrillable,\n         isSelectable: local!isSelectable\n       }\n     )\n   ),\n   a!hierarchyBrowserFieldColumns(\n     firstColumnValues: local!firstColumnValues,\n     nodeConfigs: a!hierarchyBrowserFieldColumnsNode(\n       id: fv!nodeValue.id,\n       label: fv!nodeValue.name,\n       image: a!documentImage(\n         document: if(\n           fv!nodeValue.type = \"HAPPY\",\n           a!iconIndicator(\"FACE_HAPPY\"),\n           a!iconIndicator(\"FACE_SAD\")\n         )\n       ),\n       nextLevelCount: fv!nodeValue.numberOfChildren,\n       isDrillable: fv!nodeValue.isDrillable,\n       isSelectable: fv!nodeValue.isSelectable\n     ),\n     pathValue: local!path,\n     pathSaveInto: local!path,\n     selectionValue: local!selection,\n     selectionSaveInto: local!selection,\n     nextColumnValues: a!foreach(\n       enumerate(fv!nodeValue.numberOfChildren),\n       a!localVariables(\n         /* Give it a random number of children between 0 and 20 */\n         local!numberOfChilren: tointeger(rand() * 20),\n         /* Make only even numbers drillable */\n         local!isDrillable: mod(fv!item, 2) = 0,\n         /* Make only even numbers divisble by 3 selectable */\n         local!isSelectable: mod(fv!item, 3) = 0,\n         {\n           id: fv!item,\n           name: \"Node \" & fv!item,\n           /* Make the node randomly happy or sad */\n           type: if(\n             rand() > .5,\n             \"SAD\",\n             \"HAPPY\"\n           ),\n           numberOfChildren: local!numberOfChilren,\n           isDrillable: local!isDrillable,\n           isSelectable: local!isSelectable\n         }\n       )\n     )\n   )\n )\n ```\n \n ### Columns browser example breakdown and explanation {#breakdown}\n \n If you want more information on how the columns browser's inputs produce the rendered component, read through this section. This section provides a step-by-step breakdown of how the values provided to the component generate the component's data and guide its display. The interface in this section can be created by pasting the following expression into the **INTERFACE DEFINITION** in **EXPRESSION MODE**.\n \n ```sail\n a!localVariables(\n   local!path: {4,2},\n   local!selection: 2,\n   a!hierarchyBrowserFieldColumns(\n     firstColumnValues: enumerate(9),\n     nodeConfigs: a!hierarchyBrowserFieldColumnsNode(\n       id: fv!nodeValue,\n       label: \"Node\" & fv!nodeValue,\n       image: a!documentImage(document: a!iconIndicator(\"PREVIEW\")),\n       isDrillable: 1 - mod(fv!nodeValue, 2),\n       isSelectable: mod(fv!nodeValue, 3),\n       nextColumnCount: fv!nodeValue\n     ),\n     pathValue: local!path,\n     nextColumnValues: enumerate(fv!nodeValue),\n     selectionValue: local!selection,\n     pathSaveInto: local!path,\n     selectionSaveInto: local!selection\n   )\n )\n ```\n \n To configure the columns browser details:\n \n 1. The first step in building the browser is generating the values shown in the first column. You provide these values to the component through **firstColumnValues**.\n   ![screenshot breaking down the nodes by one level](images/ColumnsBrowserBreakdownFirstColumnValues.png){:.screenshot}\n 1. Next, the component must know how to display these values as nodes. The component gets the display information from **nodeConfigs**.\n   ![screenshot breaking down the nodes by two levels](images/ColumnsBrowserBreakdownNodeConfigsOne.png){:.screenshot}\n   - As the purple text (number two) shows, the display information for the nodes in the first column comes from evaluating **nodeConfigs** for each value in **firstColumnValues**. Each evaluation of **nodeConfigs** needs to produce a [Columns Browser Node](Columns_Browser_Node_Component.html). In this example, the first value in **firstColumnValues** is 0. Therefore, the first node in the first column comes from evaluating **nodeConfigs** with `fv!nodeValue` set to 0.\n 1. The component shows an additional column for each value in **pathValue**.\n   ![screenshot breaking down the nodes by three levels](images/ColumnsBrowserBreakdownPathValue.png){:.screenshot}\n   - The green arrow (number three) points to the two values in **pathValue**. The actual values are 4 and 2 and are displayed as \"Node4\" in column one and \"Node2\" in column two, respectively.\n 1. The values in columns two and three are generated by **nextColumnValues**.\n   ![screenshot breaking down the nodes by four levels](images/ColumnsBrowserBreakdownNextColumnValues.png){:.screenshot}\n   - The orange text (number four) shows that the second and third columns' values are generated by evaluating **nextColumnValues** for each value in **pathValue**. In this example, the first value in **pathValue** is 4. The component uses this value to generate the second column's values by evaluating **nextColumnValues** with `fv!nodeValue` set to 4.\n 1. Once again, the component determines how to display these values as nodes using **nodeConfigs**.</li>\n   ![screenshot breaking down the nodes by five levels](images/ColumnsBrowserBreakdownNodeConfigsTwo.png){:.screenshot}\n   - The maroon text (number 5) shows that the component evaluates **nodeConfigs** for each value generated by **nextColumnValues**.\n 1. Finally, the selected value is highlighted blue.\n   ![screenshot breaking down the nodes by six levels](images/ColumnsBrowserBreakdownSelectionValue.png){:.screenshot}\n   - In this case, **selectionValue** is 2. Notice that 2 actually appears twice in browser, once in column one and once in column two. Only the value in the second column is highlighted because **pathValue** in the second column is also 2, whereas **pathValue** in the first column is 4."}, {"doc": "Gauge_Percentage_Component.md", "content": "---\n layout: function\n title: Gauge Percentage\n category: function_page\n compatibility: -crf\n excerpt: Displays the configured percentage of the gauge as an integer for use within\n   the gauge field primary text parameter.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gaugePercentage\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: 'Determines where the label appears. Valid values: \u201cABOVE\u201d (default),\n     \u201cADJACENT\u201d, \u201cJUSTIFIED\u201d, \u201cCOLLAPSED\u201d.\n \n     '\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The help\n     icon does not show when the label position is \u201cCOLLAPSED\u201d.\n \n     '\n - keyword: percentage\n   name: Percentage\n   types: (Number (Decimal))\n   description: Number to display between 0 and 100.\n - keyword: primaryText\n   name: Primary Text\n   types: Any Type\n   description: 'Content to display on the first line inside the gauge. Create using\n     plain text, a!gaugeIcon(), a!gaugePercentage(), or a!gaugeFraction().\n \n     '\n - keyword: secondaryText\n   name: Secondary Text\n   types: Text\n   description: Optional text to display on the second line inside the gauge.\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Determines the color. Access the percentage using fv!percentage. Valid\n     values: Any valid hex color or `\u201cACCENT\u201d` (default), `\u201cPOSITIVE\u201d`, `\u201cNEGATIVE\u201d`,\n     `\u201cWARN\u201d`.\n \n     '\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the size of the gauge. Valid values: `\u201cSMALL\u201d`, `\u201cMEDIUM\u201d`\n     (default), `\u201cLARGE\u201d`.\n \n     '\n - keyword: align\n   name: Align\n   types: Text\n   description: 'Determines alignment of the gauge. Valid values: `\u201cSTART\u201d`, `\u201cCENTER\u201d`\n     (default), `\u201cEND\u201d`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: Text to display as a tooltip on the gauge.\n reftype: sailcomponent\n scdisplayname: Gauge Percentage\n scsubcat: Gauge_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gaugePercentage \n  function syntax: a!gaugePercentage (label,labelPosition,instructions,helpTooltip,percentage,primaryText,secondaryText,color,size,align,accessibilityText,showWhen,tooltip)\n \n Displays the configured percentage of the gauge as an integer for use within the [gauge](Gauge_Component.md) field *primaryText* parameter.\n \n **See also**: [Gauge design guidance](sail/ux-gauge.md)\n \n ## Parameters\n \n > appian-style-tip\n > This component does not require any parameters. It captures the *percentage* value from its parent gauge and displays that value in the center, rounded to an integer. The below table is just for reference.\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\u201cABOVE\\u201d (default), \\u201cADJACENT\\u201d, \\u201cJUSTIFIED\\u201d, \\u201cCOLLAPSED\\u201d.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The help icon does not show when the label position is \\u201cCOLLAPSED\\u201d.\\n\"}, {\"keyword\": \"percentage\", \"name\": \"Percentage\", \"types\": \"(Number (Decimal))\", \"description\": \"Number to display between 0 and 100.\"}, {\"keyword\": \"primaryText\", \"name\": \"Primary Text\", \"types\": \"Any Type\", \"description\": \"Content to display on the first line inside the gauge. Create using plain text, a!gaugeIcon(), a!gaugePercentage(), or a!gaugeFraction().\\n\"}, {\"keyword\": \"secondaryText\", \"name\": \"Secondary Text\", \"types\": \"Text\", \"description\": \"Optional text to display on the second line inside the gauge.\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Determines the color. Access the percentage using fv!percentage. Valid values: Any valid hex color or `\\u201cACCENT\\u201d` (default), `\\u201cPOSITIVE\\u201d`, `\\u201cNEGATIVE\\u201d`, `\\u201cWARN\\u201d`.\\n\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the size of the gauge. Valid values: `\\u201cSMALL\\u201d`, `\\u201cMEDIUM\\u201d` (default), `\\u201cLARGE\\u201d`.\\n\"}, {\"keyword\": \"align\", \"name\": \"Align\", \"types\": \"Text\", \"description\": \"Determines alignment of the gauge. Valid values: `\\u201cSTART\\u201d`, `\\u201cCENTER\\u201d` (default), `\\u201cEND\\u201d`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display as a tooltip on the gauge.\"}]\n \n \n ## Examples\n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n a!gaugeField(\n   label: \"Evaluations Completed\",\n   percentage: (25 / 26) * 100,\n   primarytext: a!gaugePercentage()\n )\n {% endsailbox %}"}, {"doc": "Custom_Picker_Component.md", "content": "---\n layout: function\n title: Custom Picker Component\n category: function_page\n compatibility: -crf\n excerpt: Displays an autocompleting input for the selection of one or more items from\n   an arbitrary data set. For an example of how to configure the picker, see the Configure\n   an Array Picker SAIL Recipe.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldCustom\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.'\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.'\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.'\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n - keyword: suggestFunction\n   name: Suggestion Function\n   types: Any Type\n   description: 'A reference to a rule or function that populates the suggestion pane.\n     The rule or function must take a single Text parameter and must return a DataSubset,\n     created via a!dataSubset() or a plugin function, where \"data\" contains the labels\n     to display and \"identifiers\" contains the values to save.\n \n     '\n - keyword: selectedLabels\n   name: Selected Labels\n   types: List of Text String\n   description: Array of text display labels for the currently selected items.\n - keyword: selectedTooltips\n   name: Selection Tooltips\n   types: List of Text String\n   description: Array of text tooltips for the currently selected items.\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: Array of selected identifiers.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected identifiers\n     when the user adds or removes an item. Use a!save() to save a modified or alternative\n     value to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: selectedLinks\n   name: Selected Links\n   types: List of Variant\n   description: 'Array of links to apply to the selected tokens. Create links with\n     a!authorizationLink(), a!documentDownloadLink(), a!dynamicLink(), a!newsEntryLink(),\n     a!processTaskLink(), a!recordLink(), a!reportLink(), a!safeLink(), a!startProcessLink(),\n     a!submitLink(), or a!userRecordLink().\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Custom Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldCustom \n  function syntax: a!pickerFieldCustom (label,instructions,required,readOnly,disabled,maxSelections,suggestFunction,selectedLabels,selectedTooltips,value,validations,saveInto,validationGroup,requiredMessage,labelPosition,placeholder,helpTooltip,selectedLinks,accessibilityText,showWhen)\n \n Displays an autocompleting input for the selection of one or more items from an arbitrary data set. For an example of how to configure the picker, see the Configure an Array Picker SAIL Recipe.\n \n **See also**: [DataSubset](Appian_Data_Types.md#datasubset)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\"}, {\"keyword\": \"suggestFunction\", \"name\": \"Suggestion Function\", \"types\": \"Any Type\", \"description\": \"A reference to a rule or function that populates the suggestion pane. The rule or function must take a single Text parameter and must return a DataSubset, created via a!dataSubset() or a plugin function, where \\\"data\\\" contains the labels to display and \\\"identifiers\\\" contains the values to save.\\n\"}, {\"keyword\": \"selectedLabels\", \"name\": \"Selected Labels\", \"types\": \"List of Text String\", \"description\": \"Array of text display labels for the currently selected items.\"}, {\"keyword\": \"selectedTooltips\", \"name\": \"Selection Tooltips\", \"types\": \"List of Text String\", \"description\": \"Array of text tooltips for the currently selected items.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"Array of selected identifiers.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected identifiers when the user adds or removes an item. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"selectedLinks\", \"name\": \"Selected Links\", \"types\": \"List of Variant\", \"description\": \"Array of links to apply to the selected tokens. Create links with a!authorizationLink(), a!documentDownloadLink(), a!dynamicLink(), a!newsEntryLink(), a!processTaskLink(), a!recordLink(), a!reportLink(), a!safeLink(), a!startProcessLink(), a!submitLink(), or a!userRecordLink().\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the suggestionFunction parameter\n \n - When a user types in the picker's text box, the text they type is passed to the *suggestionFunction* parameter. The returned data-subset must have a text array as *data*. Each item in that array is a selectable suggestion in the pane. If a suggestion is picked, the component's value is updated with the object at the same index of the data-subset's *identifiers* array (in addition to any existing selected identifiers).\n \n ### Text lengths and placeholders\n \n - *selectedLabels*, *selectedValues*, *selectedLinks*, and *selectedTooltips* must all be the same length.\n - Whether placeholder text clears on focus or input varies by device and browser.\n \n ### Dropdowns vs. pickers\n \n - If you are trying to decide whether to use a [dropdown with search](Dropdown_Component.md) or a picker component, keep in mind that the dropdown search runs client-side and the performance cost of loading options happens on initial load whereas the picker search runs server-side and the performance cost of loading options happens while the user is searching. For small sets of options, we recommend using the dropdown component."}, {"doc": "card-choices-component.md", "content": "---\n layout: function\n title: Card Choices Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a set of cards from which the user may select one or many cards\n   and saves a value based on the selected choice.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!cardChoiceField\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: 'Text to display as the field label.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: 'Determines where the label appears. Valid values: `\"ABOVE\"` (default),\n     `\"ADJACENT\"`, `\"JUSTIFIED\"`, `\"COLLAPSED\"`.\n \n     '\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: 'Supplemental text about this field.\n \n     '\n - keyword: helpTooltip\n   name: Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The help\n     icon does not show when the label position is `\"COLLAPSED\"`.\n \n     '\n - keyword: data\n   name: Data\n   types: List of Variant\n   description: 'The data to display in cards. Use a record type reference or [`a!recordData()`](fnc_system_recorddata.md)\n     to source your data from records. For other cases, you can use a query, such as\n     [`a!queryEntity()`](fnc_system_a_queryentity.md), a Data Subset, a list of map\n     or dictionary, or a list of data. When using a query that returns a DataSubset,\n     you must specify fetchTotalCount as true.\n \n     '\n - keyword: sort\n   name: Sort\n   types: List of SortInfo\n   description: 'Array of Sort Info configurations created with [a!sortInfo()](fnc_system_a_sortinfo.md).\n \n     '\n - keyword: cardTemplate\n   name: Card Template\n   types: Any Type\n   description: \"Determines how a card should be displayed on the interface. Create\n     using:\\n- [a!cardTemplateTile()](card-choices-tiles.md)\\n- [a!cardTemplateBarTextJustified()](card-choices-bars.md)\\n-\n     [a!cardTemplateBarTextStacked()](card-choices-bars-text-stacked.md)\\n\\nAccess\n     data in cards by using `fv!data` with dot notation, such as `fv!data.id`, or other\n     function variables:\\n- `fv!index` \\n- `fv!identifier` \\n- `fv!isFirst` \\n- `fv!isLast`\n     \\n\\nCards that use record data must use the recordType! domain to reference a\n     record field or related record field. For example, `fv!data[recordType!Case.fields.caseName]`.\n     \\n\"\n - keyword: value\n   name: Value\n   types: List of Variant\n   description: Value of choice card to display as selected.\n - keyword: saveInto\n   name: Save Value To\n   types: List of Save\n   description: 'One or more variables that are updated when a card is selected. Use\n     a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. For maximum selections greater\n     than 1, a validation message will appear once the number is exceeded.\n \n     '\n - keyword: align\n   name: Align\n   types: Text\n   description: 'Determines alignment of the card(s). Valid values: `\"START\"`, `\"CENTER\"`\n     (default), `\"END\"`.\n \n     '\n - keyword: showShadow\n   name: Show Shadow\n   types: Boolean\n   description: 'Determines whether cards have an outer shadow. Default: false.\n \n     '\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the cards should display as potentially selectable but\n     grayed out. Default: false.\n \n     '\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: 'Validation errors to display below the field when the value is not\n     null.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md)\n     for more information about how to use validation groups.\n \n     '\n - keyword: showWhen\n   name: Show When\n   types: Boolean\n   description: 'Determines whether the cards are displayed on the interface. When\n     set to false, the cards are hidden and are not evaluated. Default: true.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n reftype: sailcomponent\n scdisplayname: Card Choices\n space: sail_component\n ---\n \n ## Function\n \n function name: a!cardChoiceField \n  function syntax: a!cardChoiceField (label,labelPosition,instructions,helpTooltip,data,sort,cardTemplate,value,saveInto,maxSelections,align,showShadow,required,requiredMessage,disabled,validations,validationGroup,showWhen,accessibilityText)\n \n Displays a set of cards from which the user may select one or many cards and saves a value based on the selected choice. The card choices component allows you to create a set of choices using data from records, entities, data subsets, a dictionary, a list of data, or a list of mappings.\n \n There are three card choices templates for you to choose from:\n \n - [Card Choices Tile Template](card-choices-tiles.md)\n - [Card Choices Bar Template](card-choices-bars.md)\n - [Card Choices Bar (Text Stacked) Template](card-choices-bars-text-stacked.md)\n \n See also: [Cards Layout](card_layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: `\\\"ABOVE\\\"` (default), `\\\"ADJACENT\\\"`, `\\\"JUSTIFIED\\\"`, `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"List of Variant\", \"description\": \"The data to display in cards. Use a record type reference or [`a!recordData()`](fnc_system_recorddata.md) to source your data from records. For other cases, you can use a query, such as [`a!queryEntity()`](fnc_system_a_queryentity.md), a Data Subset, a list of map or dictionary, or a list of data. When using a query that returns a DataSubset, you must specify fetchTotalCount as true.\\n\"}, {\"keyword\": \"sort\", \"name\": \"Sort\", \"types\": \"List of SortInfo\", \"description\": \"Array of Sort Info configurations created with [a!sortInfo()](fnc_system_a_sortinfo.md).\\n\"}, {\"keyword\": \"cardTemplate\", \"name\": \"Card Template\", \"types\": \"Any Type\", \"description\": \"Determines how a card should be displayed on the interface. Create using:\\n- [a!cardTemplateTile()](card-choices-tiles.md)\\n- [a!cardTemplateBarTextJustified()](card-choices-bars.md)\\n- [a!cardTemplateBarTextStacked()](card-choices-bars-text-stacked.md)\\n\\nAccess data in cards by using `fv!data` with dot notation, such as `fv!data.id`, or other function variables:\\n- `fv!index` \\n- `fv!identifier` \\n- `fv!isFirst` \\n- `fv!isLast` \\n\\nCards that use record data must use the recordType! domain to reference a record field or related record field. For example, `fv!data[recordType!Case.fields.caseName]`. \\n\"}, {\"keyword\": \"value\", \"name\": \"Value\", \"types\": \"List of Variant\", \"description\": \"Value of choice card to display as selected.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Value To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated when a card is selected. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. For maximum selections greater than 1, a validation message will appear once the number is exceeded.\\n\"}, {\"keyword\": \"align\", \"name\": \"Align\", \"types\": \"Text\", \"description\": \"Determines alignment of the card(s). Valid values: `\\\"START\\\"`, `\\\"CENTER\\\"` (default), `\\\"END\\\"`.\\n\"}, {\"keyword\": \"showShadow\", \"name\": \"Show Shadow\", \"types\": \"Boolean\", \"description\": \"Determines whether cards have an outer shadow. Default: false.\\n\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the cards should display as potentially selectable but grayed out. Default: false.\\n\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md) for more information about how to use validation groups.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Show When\", \"types\": \"Boolean\", \"description\": \"Determines whether the cards are displayed on the interface. When set to false, the cards are hidden and are not evaluated. Default: true.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}]\n \n ## Usage considerations\n \n ### Mobile support\n \n The card choices component is supported on mobile versions starting with 22.1.\n \n ### Displaying data and card choices\n \n - Use the *sort* parameter to change the display order of your card choices.\n   - If you're using a query or a data subset, any logic defined in the card choices's *sort* parameter will evaluate after the query or data subset sorting. Sorting for queries and data subsets happen when the data is initially retrieved.\n - Card choices automatically arrange themselves to take up as many rows as needed to best fit the width of the screen. To control the number of cards in each row, put the card choices component in a [columns layout](Columns_Layout.md) with a specified width.\n \n ### Using icons and text\n \n - Neither icons, primary text, nor secondary text are required. Templates will reallocate the space of any missing value.\n   - For a uniform interface, make sure that you have consistent values for the icon, primary text, and secondary text fields for all card choices on an interface. For example, all card choices should include primary text, or none of them should.\n - If you're using data from records or entities as your source, you can add an icon field in your record type or CDT to easily display icons in your card choices.\n - Both the primary and secondary texts will truncate after two lines each. The tooltip shows the full text.\n   - Spacing and truncation look different in the [card choices bars template](card-choices-bars.md). To ensure that all your text has enough space to show properly, keep your secondary text short when using this template.\n \n ### Choosing your card choices component's data source\n \n The card choices component provides four options to easily access your data:\n \n - A record type\n - An expression\n - A rule\n - A variable\n \n These four options allow you to access your data wherever it is, using one of the following methods:\n \n - A record type, accessing your data using type reference or [`a!recordData()`](fnc_system_recorddata.md).\n - A query, using [`a!queryEntity()`](fnc_system_a_queryentity.md).\n - A data subset.\n - A list of map or dictionary.\n - A list of data.\n \n #### Data in a map, dictionary, data subset, or list of data\n \n To access your data in a map, dictionary, or list of data, you can select either **Expression**, **Variable**, or **Rule** as the data source for your card choices component.\n \n Using **Expressions**, you can create a map, dictionary, or list of data directly in the card choice field *data* parameter.\n \n Using **Variable**, you can create a map, dictionary, or list of data in a local variable or rule input and call it into the card choices *data* parameter.\n \n Using **Rule**, you can access a map, dictionary, data subset, or list of data that is stored in an expression rule and call the expression rule into the card choices *data* parameter.\n \n ## Examples\n \n ### Using record data as the card choices data source\n \n *Copy and paste an example into an Appian Expression Editor to experiment with it.*\n \n Record type object references are specific to each environment. If you copy and paste these examples into your interface, they will not evaluate. Use them as a references only.\n \n ```sail \n a!localVariables(\n   local!save,\n   {\n     a!sectionLayout(\n       label: \"Select your company's industry\",\n       labelSize: \"LARGE\",\n       contents: {\n         a!cardChoiceField(\n           label: \"Select your company's industry\",\n           labelPosition: \"COLLAPSED\",\n           instructions: \"Don't see your company's industry listed? Contact our team to add your industry to our community!\",\n           data: 'recordType!{41134583-1730-42d9-a32f-be722d9b47b9}Industries',\n           sort: {\n             a!sortInfo(\n               field: 'recordType!{41134583-1730-42d9-a32f-be722d9b47b9}Industries.fields.{4edb6e00-5b39-469f-9527-a5c5019bc1a4}industrytype',\n               ascending: true\n             )\n           },\n           cardTemplate: a!cardTemplateBarTextStacked(\n             id: fv!data['recordType!{41134583-1730-42d9-a32f-be722d9b47b9}Industries.fields.{3cae152b-3f67-4736-91ef-569469ac657c}id'],\n             primaryText: fv!data['recordType!{41134583-1730-42d9-a32f-be722d9b47b9}Industries.fields.{4edb6e00-5b39-469f-9527-a5c5019bc1a4}industrytype'],\n             secondaryText: fv!data['recordType!{41134583-1730-42d9-a32f-be722d9b47b9}Industries.fields.{e30ac296-a285-4490-aab4-890fc4346e89}description'],\n             icon: fv!data['recordType!{41134583-1730-42d9-a32f-be722d9b47b9}Industries.fields.{0fcc2280-7bef-4205-8ed4-aee913b57b7a}icon'],\n             iconAltText: fv!data['recordType!{41134583-1730-42d9-a32f-be722d9b47b9}Industries.fields.{70404539-ab39-42cf-b380-197bb1ae3b73}iconalttext']\n           ),\n           value: local!save,\n           saveInto: local!save,\n           maxSelections: 1,\n           align: \"START\",\n           showShadow: false,\n           validations: {}\n         )\n       }\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of a card choices component with 8 cards displaying industries](images/card_choices_record_example.png){:.screenshot}\n \n ### Using a query as the card choices data source\n \n *Copy and paste an example into an Appian Expression Editor to experiment with it.*\n \n This example references specific fields in a CDT that you need to replace with your own fields. If you copy and paste this example into your interface, the fields won't evaluate. Use the example as a reference only.\n \n ```sail \n a!localVariables(\n   local!save,\n   {\n     a!sectionLayout(\n       label: \"Select your work location\",\n       labelSize: \"LARGE\",\n       contents: {\n         a!cardChoiceField(\n           label: \"Select your work location\",\n           labelPosition: \"COLLAPSED\",\n           data: a!queryEntity(\n             entity: cons!WORK_INFO_ENTITY,\n             query: a!query(\n               selection: a!querySelection(\n                 columns: {\n                   a!queryColumn(field: \"id\"),\n                   a!queryColumn(field: \"workLocation\"),\n                   a!queryColumn(field: \"workLocationDescription\"),\n                   a!queryColumn(field: \"locationIcon\"),\n                   a!queryColumn(field: \"locationIconAltText\")\n                 }\n               ),\n               pagingInfo: a!pagingInfo(startIndex: 1, batchSize: - 1)\n             ),\n             fetchTotalCount: true\n           ),\n           cardTemplate: a!cardTemplateTile(\n             id: fv!data.id,\n             primaryText: fv!data.workLocation,\n             secondaryText: fv!data.workLocationDescription,\n             icon: fv!data.locationIcon,\n             iconAltText: fv!data.locationIconAltText\n           ),\n           value: local!save,\n           saveInto: local!save,\n           maxSelections: 1,\n           validations: {}\n         )\n       }\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of a card choices component with 4 cards displaying work locations](images/card_choices_query_example.png){:.screenshot}\n \n ### Using a map as the card choices data source\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 580 %} \n a!localVariables(\n   local!save, \n   {\n     a!sectionLayout(\n       label: \"Select up to four activities to participate in\",\n       labelSize: \"LARGE\",\n       contents: {\n         a!cardChoiceField(\n         label: \"Select up to four activities to participate in\",\n           labelPosition: \"COLLAPSED\",\n         data: {\n           a!map(id: 1, icon: \"birthday-cake\", primaryText: \"Baking\", secondaryText: \"Individual Activity\", iconAltText: \"birthday cake\"),\n           a!map(id: 2, icon: \"basketball\", primaryText: \"Basketball\", secondaryText: \"Group Activity\", iconAltText: \"basketball\" ),\n           a!map(id: 3, icon: \"bowling-ball\", primaryText: \"Bowling\", secondaryText: \"Individual Activity\", iconAltText: \"bowling ball\"),\n           a!map(id: 4, icon: \"chess-knight\", primaryText: \"Chess\", secondaryText: \"Individual Activity\", iconAltText: \"knight chess piece\"),\n           a!map(id: 5, icon: \"football\", primaryText: \"Football\", secondaryText: \"Group Activity\", iconAltText: \"football\"),\n           a!map(id: 6, icon: \"golf-ball\", primaryText: \"Golf\", secondaryText: \"Individual Activity\", iconAltText: \"golfball\"),\n           a!map(id: 7, icon: \"futbol-o\", primaryText: \"Soccer\", secondaryText: \"Group Activity\", iconAltText: \"soccer ball\"),\n           a!map(id: 8, icon: \"swimmer\", primaryText: \"Swimming\", secondaryText: \"Individual Activity\", iconAltText: \"person swimming\")\n           \n         },\n           sort: {\n             a!sortInfo(\n               field: \"primaryText\",\n               ascending: true\n             )\n           },\n         cardTemplate: a!cardTemplateBarTextJustified(\n           id: fv!data.id,\n           primaryText: fv!data.primaryText,\n           secondaryText: fv!data.secondaryText,\n           icon: fv!data.icon,\n           iconAltText: fv!data.iconAltText\n         ),\n           value: local!save,\n         saveInto: local!save,\n         maxSelections: 4,\n         validations: {}\n         )\n       }\n     )\n }\n )\n {% endsailbox %}\n \n #### More map configurations\n \n The example above shows how to use a map of data in the card choices component *data* parameter. If you copy and paste the expression into an interface, you'll see that **Expression** is selected for the **Data Source** in **Design Mode**. If you're using **Expression Mode**, you can write your expression as you normally would without selecting a data source from **Design Mode**.\n \n You can achieve a similar result to the example above using either of the **Variable** or **Rule** data source configurations.\n \n If you want to use a map with a local variable:\n \n 1. Drag and drop the card choices component onto your interface.\n 1. From **Expression Mode**, create a local variable.\n 1. Add a map of your data in the local variable.\n 1. From **Design Mode**, go to **Data Source** and select **Variable**.\n 1. Select your local variable from the dropdown.\n 1. Configure the card choices parameters according to the fields present in your data.\n \n Go ahead and try out using a map with local variables in the interactive expression editor above.\n \n If you want to use a map with a rule input:\n \n 1. Drag and drop the card choices component onto your interface.\n 1. From **Design Mode**, add a rule input of type **Map** and click **Array (multiple values)**.\n 1. Click **Test**.\n 1. In **Expression**, add a map of your data.\n 1. Click **Set as default test values**, then click **TEST INTERFACE**.\n 1. From **Design Mode**, go to **Data Source** and select **Variable**.\n 1. Select your rule input from the dropdown.\n 1. Configure the card choices parameters according to the fields present in your data.\n \n If you want to use a map with an expression rule:\n \n 1. Drag and drop the card choices component onto your interface.\n 1. From **Design Mode** in your interface, go to **Data Source** and select **Rule**.\n 1. Select an expression rule that contains a map of your data.\n 1. Configure the card choices parameters according to the fields present in your data."}, {"doc": "User_and_Group_Browser_Components.md", "content": "---\n layout: function\n title: User and Group Browser Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays group membership structure in columns. Users can navigate through\n   the structure and select a single user or group.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!userAndGroupBrowserFieldColumns\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: rootGroup\n   name: Initial Group\n   types: Group\n   description: The direct members of the initial group are displayed in the first\n     column.\n - keyword: pathValue\n   name: Navigation Path\n   types: List of User or Group\n   description: The path from the first column to the current navigation.\n - keyword: pathSaveInto\n   name: Save Navigation To\n   types: List of Save\n   description: Variable or list of variables to update when a user clicks on a user\n     or group.\n - keyword: selectionValue\n   name: Selection Value\n   types: User or Group\n   description: This user or group is displayed as selected when it is present in the\n     navigation path array.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: Variable or list of variables to update upon selection of a user or\n     group.\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines whether selection is enabled. Default: false.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the component.Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: User and Group Browser\n space: sail_component\n ---\n \n ## Function\n \n function name: a!userAndGroupBrowserFieldColumns \n  function syntax: a!userAndGroupBrowserFieldColumns (label,labelPosition,instructions,helpTooltip,rootGroup,pathValue,pathSaveInto,selectionValue,selectionSaveInto,readOnly,height,accessibilityText,showWhen)\n \n Displays group membership structure in columns. Users can navigate through the structure and select a single user or group.\n \n **See also**: [Recipes](recipe-add-remove-move-group-members-browser.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"rootGroup\", \"name\": \"Initial Group\", \"types\": \"Group\", \"description\": \"The direct members of the initial group are displayed in the first column.\"}, {\"keyword\": \"pathValue\", \"name\": \"Navigation Path\", \"types\": \"List of User or Group\", \"description\": \"The path from the first column to the current navigation.\"}, {\"keyword\": \"pathSaveInto\", \"name\": \"Save Navigation To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a user clicks on a user or group.\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"User or Group\", \"description\": \"This user or group is displayed as selected when it is present in the navigation path array.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update upon selection of a user or group.\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines whether selection is enabled. Default: false.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the component.Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### User, group, and user and group browser components comparison\n \n The user and group browser components create Miller-columns-style browsers that allow users to select a user or group while browsing through a group membership tree.\n \n ![screenshot of a user and group browser expanded](images/Group_Browsers_Main_Image.png){:.screenshot}\n \n The three group membership browsing components are:\n \n - [User Browser](User_Browser_Components.md)\n - [Group Browser](Group_Browser_Components.md)\n - User and Group Browser\n \n Similar to the user and group picker fields, these three components appear the same but differ in what they allow to be selected. Depending on whether users, groups, or users and groups should be selected, choose the group browser, user browser, or user and group browser, respectively. If the interface is only for browsing, use the  group browser, as it is the only browser that can be configured to show only groups and not users.\n \n ### Saving, selecting, and displaying values\n \n - If an initial group is not specified, only the *label*, *tooltip*, and *instructions* will be displayed.\n - Click a selected user or group to deselect the value. When a user or group is deselected, a null value is saved.\n - To make the selection required for submission or display validation messages based on the selection, [pair the browser with a a picker](Group_Picker_Component.md) or other component.\n \n ### Using the pathValue and pathSaveInto parameters\n \n - Because users and groups can appear in multiple places in the browser at one time, a user or group only appears as selected if it is present in the *pathValue* array.\n - When a user or group is selected, the variables in *selectionSaveInto* are updated after the variables in *pathSaveInto*. This means that if a variable is updated in both saves, it will be updated to the value assigned in the *selectionSaveInto* when a user or group is selected.\n - When the component is read-only, the variables in *selectionSaveInto* are not updated when a user or group is clicked. However, if the *selectionValue* is set, a user or group can still be displayed as selected. *pathSaveInto* still updates as normal.\n - A user or group can only be deselected if present in the *pathValue*.\n - The first user or group in the *pathValue* must be a member of the initial group. Each subsequent user or group in the *pathValue* must be a member of the group that comes before it in the array. Otherwise, an error will occur.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Using user and group browsers with picker fields \n \n ```sail \n a!localVariables(\n   local!initialGroup,\n   local!pathValue: a!refreshVariable(\n     value: {},\n     refreshOnVarChange: local!initialGroup\n   ),\n   local!selectionValue,\n   local!readOnly,\n   {\n       a!sectionLayout(\n         label:\"Controls\",\n         contents:{\n           a!pickerFieldGroups(\n             label: \"Initial Group\",\n             maxSelections: 1,\n             value: local!initialGroup,\n             saveInto: local!initialGroup\n           ),\n           a!checkboxField(\n             labelPosition: \"COLLAPSED\",\n             choiceLabels: {\"Read-only\"},\n             choiceValues: {true},\n             value: local!readOnly,\n             saveInto: local!readOnly\n           )\n         }\n       ),\n       a!sectionLayout(\n         label:\"Component\",\n         contents: {\n           a!userAndGroupBrowserFieldColumns(\n             label: \"User and Group Browser\",\n             rootGroup: local!initialGroup,\n             pathValue: local!pathValue,\n             pathSaveInto: local!pathValue,\n             selectionValue: local!selectionValue,\n             selectionSaveInto: local!selectionValue,\n             readOnly: local!readOnly\n           )\n         }\n       ),\n       a!sectionLayout(\n         label: \"Selection & Path\",\n         contents: {\n           a!pickerFieldUsersAndGroups(\n             label: \"Navigation Path\",\n             instructions: \"Represents the current navigation from the rootGroup. Changing this could cause errors in the interface.\",\n             value: local!pathValue,\n             saveInto: local!pathValue\n           ),\n           a!pickerFieldUsersAndGroups(\n             label: \"Selected User or Group\",\n             instructions: \"The selected user or group only appears as selected if contained in the pathValue.\",\n             value: local!selectionValue,\n             saveInto: local!selectionValue\n           )\n         }\n       )\n   }\n )\n ```"}, {"doc": "Side_By_Side_Layout.md", "content": "---\n layout: function\n title: Side By Side Layout\n category: function_page\n compatibility: -crf\n excerpt: Displays components alongside each other.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!sideBySideLayout\n fncsubcat: Layouts\n parameters:\n - keyword: items\n   name: Items\n   types: Any Type\n   description: List of items that are displayed in the layout. Accepts `a!sideBySideItem`.\n - keyword: alignVertical\n   name: Vertical Alignment\n   types: Text\n   description: 'Determines vertical alignment of all content within the layout. Valid\n     values are `\"TOP\"` (default), `\"MIDDLE\"`, and `\"BOTTOM\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: spacing\n   name: Item Spacing\n   types: Text\n   description: 'Determines the space between columns in the layout when they are not\n     stacked. Valid values: `\"STANDARD\"` (default), `\"NONE\"`, `\"DENSE\"`, `\"SPARSE\"`.\n \n     '\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: stackWhen\n   name: Stack When\n   types: List of Text\n   description: 'Determines the page width at which side by side items stack vertically.\n     List all widths where items should stack. Valid values: `\"PHONE\"`, `\"TABLET_PORTRAIT\"`,\n     `\"TABLET_LANDSCAPE\"`, `\"DESKTOP_NARROW\"`, `\"DESKTOP\"`, `\"DESKTOP_WIDE\"`, `\"NEVER\"`\n     (default).\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: 'Determines how much space is added above the layout. Valid values:\n     `\"NONE\"` (default), `\"EVEN_LESS\"`, `\"LESS\"`, `\"STANDARD\"`, `\"MORE\"`, `\"EVEN_MORE\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Side By Side Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!sideBySideLayout \n  function syntax: a!sideBySideLayout (items,alignVertical,showWhen,spacing,marginBelow,stackWhen,marginAbove)\n \n Displays components alongside each other.\n \n **See also**: \n \n - [Side By Side Item](Side_By_Side_Item.md)\n - [Responsive Design](responsive_design.md)\n - [Side By Side and Columns design guidance](sail/ux-columns-and-side-by-side.md)\n - [Side By Side design guidance](sail/ux-side-by-side-layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"items\", \"name\": \"Items\", \"types\": \"Any Type\", \"description\": \"List of items that are displayed in the layout. Accepts `a!sideBySideItem`.\"}, {\"keyword\": \"alignVertical\", \"name\": \"Vertical Alignment\", \"types\": \"Text\", \"description\": \"Determines vertical alignment of all content within the layout. Valid values are `\\\"TOP\\\"` (default), `\\\"MIDDLE\\\"`, and `\\\"BOTTOM\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"spacing\", \"name\": \"Item Spacing\", \"types\": \"Text\", \"description\": \"Determines the space between columns in the layout when they are not stacked. Valid values: `\\\"STANDARD\\\"` (default), `\\\"NONE\\\"`, `\\\"DENSE\\\"`, `\\\"SPARSE\\\"`.\\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"stackWhen\", \"name\": \"Stack When\", \"types\": \"List of Text\", \"description\": \"Determines the page width at which side by side items stack vertically. List all widths where items should stack. Valid values: `\\\"PHONE\\\"`, `\\\"TABLET_PORTRAIT\\\"`, `\\\"TABLET_LANDSCAPE\\\"`, `\\\"DESKTOP_NARROW\\\"`, `\\\"DESKTOP\\\"`, `\\\"DESKTOP_WIDE\\\"`, `\\\"NEVER\\\"` (default).\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Input fields with relative widths\n \n ```sail \n a!sideBySideLayout(\n   items: {\n     a!sideBySideItem(\n       width: \"4X\",\n       item: a!textField(\n         label: \"First Name\"\n       )\n     ),\n     a!sideBySideItem(\n       item: a!textField(\n         label: \"M.I.\"\n       )\n     ),\n     a!sideBySideItem(\n       width: \"4X\",\n       item: a!textField(\n         label: \"Last Name\"\n       )\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of an interface with input fields of different widths](images/sbs-with-relative-width.png){:.screenshot}\n \n ### Minimized width for icon and button\n \n ```sail \n a!sideBySideLayout(\n   alignVertical: \"MIDDLE\",\n   spacing: \"DENSE\",\n   items: {\n     a!sideBySideItem(\n       width: \"MINIMIZE\",\n       item: a!richTextDisplayField(\n         labelPosition: \"COLLAPSED\",\n         value: a!richTextIcon(\n           icon: \"user\",\n           size: \"LARGE\"\n         )\n       )\n     ),\n     a!sideBySideItem(\n       item: a!textField(\n         labelPosition: \"COLLAPSED\"\n       )\n     ),\n     a!sideBySideItem(\n       width: \"MINIMIZE\",\n       item: a!buttonArrayLayout(\n         marginBelow: \"NONE\",\n         buttons: {\n           a!buttonWidget(\n             label: \"Check Availability\",\n             size: \"SMALL\",\n             style: \"SECONDARY\"\n           )\n         }\n       )\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot on an interface with inputs using minimized widths](images/sbs-with-minimize.png){:.screenshot}"}, {"doc": "Paging_Grid_Component.md", "content": "---\n layout: function\n title: Read-Only Grid Component\n category: function_page\n compatibility: -crf\n excerpt: Accepts a set of data and displays it as read-only text, links, images, or\n   rich text in a grid that supports selecting, sorting, and paging.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gridField\n fncsubcat: Grids and Lists\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the grid label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values:\\n  - `ABOVE` (default)\n     Displays the label above the component.\\n  - `ADJACENT` Displays the label to\n     the left of the component.\\n  - `COLLAPSED` Hides the label. The label will still\n     be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `JUSTIFIED` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this grid.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: emptyGridMessage\n   name: Empty Grid Message\n   types: Text\n   description: Text to display in the grid when no data is available. Default is `\"No\n     items available\"`.\n - keyword: data\n   name: Data\n   types: recordType, List of Map and List of Dictionary, DataSubset, or PortalReportDataSubset\n   description: 'The data to display in the grid. Use a record type reference or `a!recordData()`\n     to source your data from records and utilize records functionality, such as user\n     filters and export. For other cases, you can use a query, such as `a!queryEntity()`\n     with _pagingInfo_ set as `fv!pagingInfo` to have the grid automatically manage\n     paging. The function `a!queryProcessAnalytics()`, a Data Subset, a list of Dictionary,\n     or an array of data can also be used. When using a query that returns a `datasubset`,\n     you must pass the total count (`fetchTotalCount: true` on the query).\n \n     '\n - keyword: columns\n   name: Columns\n   types: List of `a!gridColumn()`\n   description: 'The columns to display in the grid, configured using `a!gridColumn()`.\n \n     '\n - keyword: pageSize\n   name: Rows to Display Per Page\n   types: Number (Integer)\n   description: 'The maximum number of rows to display at a time. Default: 10\n \n     '\n - keyword: initialSorts\n   name: Initial Sorts\n   types: List of SortInfo\n   description: 'Sorts applied to the grid upon initial load only. Each sort is applied\n     in the order listed. The first sort in the list will display an active-sort arrow\n     indicator (either up or down for _ascending_ or _descending_) in its corresponding\n     grid column (if applicable).\n \n     '\n - keyword: secondarySorts\n   name: Secondary Sorts\n   types: List of SortInfo\n   description: 'Sorts applied to the grid after every user interaction. If the user\n     activates a sort on a column, these sorts will be applied to the other columns\n     in the order they''re listed. For example, adding a secondary sort on _Month_\n     will keep them in order when the user sorts on _Year_. Secondary sorts do not\n     display an active-sort indicator.\n \n     '\n - keyword: pagingSaveInto\n   name: Paging Save Into\n   types: List of Save\n   description: 'One or more variables that are updated only when user invokes a paging\n     action on the grid. You can reference the current paging of the grid using `fv!pagingInfo`.\n \n     '\n - keyword: selectable\n   name: Selectable\n   types: Boolean\n   description: 'Determines if grid rows are selectable. When selection style is `\"CHECKBOX\"`\n     (default), the selection column is displayed. Default: false.\n \n     '\n - keyword: selectionStyle\n   name: Selection Style\n   types: Text\n   description: 'Determines the style when a row is selected. Valid values: `\"CHECKBOX\"`\n     (default), `\"ROW_HIGHLIGHT\"`.\n \n     '\n - keyword: selectionValue\n   name: Selection Value\n   types: Text Array or Integer Array\n   description: 'Identifiers of the rows that should appear as selected. Can be set\n     to have rows be pre-selected for the user. Supported types: _Text Array_ and _Integer\n     Array_.\n \n     '\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: 'One or more variables that are updated with the selected identifiers\n     when the user changes selections. Use `a!save()` to save a modified or alternative\n     value to a variable. You can reference the rows selected and deselected in the\n     most recent user interaction (not all selected or deselected rows) using `fv!selectedRows`\n     and `fv!deselectedRows` respectively.\n \n     '\n - keyword: selectionRequired\n   name: Selection required\n   types: Boolean\n   description: 'Determines if a selection is required to submit the form. Default:\n     `false`.\n \n     '\n - keyword: selectionRequiredMessage\n   name: Selection Required Message\n   types: Text\n   description: 'Custom message to display when a selection is required and not provided.\n \n     '\n - keyword: disableRowSelectionWhen\n   name: Disable Row Selection\n   types: Boolean\n   description: 'Determines for each row if selection is disabled. The condition defined\n     in this parameter is evaluated once for each row. Reference fields from the source\n     using dot notation, such as `fv!row.status`, or the identifier of the row using\n     `fv!identifier`. Grids that use record data must use the `recordType!` domain\n     to reference a record field or related record field. For example, `fv!row[recordType!Case.fields.caseName]`.\n     Default: false.\n \n     '\n - keyword: validations\n   name: Validations\n   types: List of Variant\n   description: 'Validation errors to display below the grid when the data is invalid,\n     configured using `a!validationMessage()`. You can reference the current page of\n     data using `fv!currentPage`.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: spacing\n   name: Spacing\n   types: Text\n   description: 'Determines the spacing within grid cells. Valid values: `\"STANDARD\"`\n     (web default), `\"DENSE\"` (mobile default).\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines height of the grid. Valid values: `\"SHORT\"`, `\"SHORT_PLUS\"`,\n     `\"MEDIUM\"`, `\"MEDIUM_PLUS\"`, `\"TALL\"`, `\"TALL_PLUS\"`, `\"EXTRA_TALL\"`,`\"AUTO\"`\n     (default). All grid heights besides AUTO have fixed headers that will remain at\n     the top of the grid when scrolling.\n \n     '\n - keyword: borderStyle\n   name: Border Style\n   types: Text\n   description: 'Determines the style of the grid border. Valid values: `\"STANDARD\"`\n     (default), `\"LIGHT\"`.\n \n     '\n - keyword: shadeAlternateRows\n   name: Shade Alternate Rows\n   types: Boolean\n   description: 'Determines whether alternate rows are shaded. Default: true.\n \n     '\n - keyword: rowHeader\n   name: Row Header\n   types: Number (Integer)\n   description: 'Index of the column to be used as the row header. Screen readers will\n     announce the value in each row header when navigating to other cells within that\n     row. Used only for accessibility; produces no visible change.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, grid data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes grid data each time a specified action completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: 'How often grid data gets refreshed in minutes. When null, grid data\n     will not be refreshed on an interval. Valid values: `\"0.5\"`, `\"1, 2\"`, `\"3\"`,\n     `\"4\"`, `\"5\"`, `\"10\"`, `\"30\"`, and `\"60\"`.\n \n     '\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: 'When true, grid data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh grid data when\n     another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_.\n \n     '\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: 'Refreshes grid data each time any of these specific variables change.\n     This allows you to refresh the grid data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. `refreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n \n     '\n - keyword: userFilters\n   name: User Filters\n   types: List of Variant\n   description: 'List of user filter references to display, configured using the `recordType!`\n     domain. For example, `recordType!Case.filters.status`. You may only reference\n     user filters defined on the source record type used for the grid data. This parameter\n     only applies when a record type is used as the source in the data parameter.\n \n     '\n - keyword: showSearchBox\n   name: Show search box\n   types: Boolean\n   description: 'Determines if the record search box should be shown. This parameter\n     only applies when a record type is used as the source in the data parameter. Default:\n     _true_.\n \n     '\n - keyword: showRefreshButton\n   name: Show Refresh Button\n   types: Boolean\n   description: 'Determines if the grid should include a refresh button to manually\n     refresh data. This parameter only applies when a record type is used as the source\n     in the data parameter. Default: _true_.\n \n     '\n - keyword: showExportButton\n   name: Show Export to Excel Button\n   types: Boolean\n   description: 'Determines if grid data can be exported. This parameter only applies\n     when a record type is used as the source in the data parameter. Default: _false_.\n \n     '\n - keyword: recordActions\n   name: Record Actions\n   types: List of Variant\n   description: 'List of record action items to display above the grid, configured\n     using [a!recordActionItem()](Record_Action_Item_Component.md). If you use `fv!identifier`\n     in the identifier parameter of `a!recordActionItem()`, you will also need to configure\n     selection for the grid. This parameter only applies when a record type is used\n     as the source in the data parameter.\n \n     '\n - keyword: openActionsIn\n   name: Open Actions In\n   types: Text\n   description: 'Determines how record actions should open to the user. Valid values:\n     `\"DIALOG\"` (default), `\"NEW_TAB\"`, `\"SAME_TAB\"`.\n \n     '\n - keyword: actionsDisplay\n   name: Actions Display\n   types: Text\n   description: 'Determines which details are shown for record actions, regardless\n     of style. Valid values: `\"LABEL_AND_ICON\"` (default), `\"LABEL\"`, `\"ICON\"`.\n \n     '\n - keyword: actionsStyle\n   name: Actions Display\n   types: Text\n   description: 'Determines how the list of actions should be displayed above the grid.\n     Valid values: `\"TOOLBAR\"` (default), `\"TOOLBAR_PRIMARY\"`. [Learn more](#display-and-style-record-actions).\n \n     '\n reftype: sailcomponent\n scdisplayname: Read-Only Grid\n space: sail_component\n ---\n \n > appian-style-tip\n > Eager to get started with the read-only grid? Check out the [Grid Tutorial](Grid_Tutorial.md) for the fastest and easiest way to create a read-only grid.\n \n ## Function\n \n function name: a!gridField \n  function syntax: a!gridField (label,labelPosition,instructions,helpTooltip,emptyGridMessage,data,columns,pageSize,initialSorts,secondarySorts,pagingSaveInto,selectable,selectionStyle,selectionValue,selectionSaveInto,selectionRequired,selectionRequiredMessage,disableRowSelectionWhen,validations,validationGroup,showWhen,spacing,height,borderStyle,shadeAlternateRows,rowHeader,accessibilityText,refreshAlways,refreshAfter,refreshInterval,refreshOnReferencedVarChange,refreshOnVarChange,userFilters,showSearchBox,showRefreshButton,showExportButton,recordActions,openActionsIn,actionsDisplay,actionsStyle)\n \n Accepts a set of data and displays it as read-only text, links, images, or rich text in a grid that supports selecting, sorting, and paging.\n \n The `a!gridField()` function allows you to create a read-only grid in your interface to display data as rich text, links, images, buttons, tags, record actions, and progress bars. This grid component also supports searching, filtering, selecting, sorting, and paging.\n \n From Design mode, you can quickly and easily set up a read-only grid by dragging and dropping the component into live view and selecting your grid's data source. You can choose from record type, query, variable, rule, or expression. When you choose a record type as your data source, you can reuse features configured on your record list such as user filters, record actions, and export to Excel. You can also use fields from related records to display data on the grid.\n \n Although, Design mode allows for a easier and faster setup for your read-only grid, you can still use the `a!gridField()` function in Expression mode to customize and configure your read-only grid.\n \n - To learn how to work with the read-only grid, see [Configuring the Read-Only Grid](read-only-grid-configuration.md).\n - To organize editable inputs in a tabular layout, use an [editable grid](Editable_Grid_Component.md).\n \n **See also**:\n \n - [a!recordData() Function](fnc_system_recorddata.md)\n - [a!queryEntity() Function](fnc_system_a_queryentity.md)\n - [Configuring the Read-Only Grid](read-only-grid-configuration.md)\n - [Grid Tutorial](Grid_Tutorial.md)\n \n ## Parameters\n \n > appian-style-note\n > Not all parameters are immediately available in Design Mode; some display only after enabling others. For example, after selecting **Selectable**, other selection-related parameters will be available.\n \n {%- comment -%} The following include is in the doc-generation repo. {%- endcomment -%}\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the grid label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values:\\n  - `ABOVE` (default) Displays the label above the component.\\n  - `ADJACENT` Displays the label to the left of the component.\\n  - `COLLAPSED` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `JUSTIFIED` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this grid.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"emptyGridMessage\", \"name\": \"Empty Grid Message\", \"types\": \"Text\", \"description\": \"Text to display in the grid when no data is available. Default is `\\\"No items available\\\"`.\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"recordType, List of Map and List of Dictionary, DataSubset, or PortalReportDataSubset\", \"description\": \"The data to display in the grid. Use a record type reference or `a!recordData()` to source your data from records and utilize records functionality, such as user filters and export. For other cases, you can use a query, such as `a!queryEntity()` with _pagingInfo_ set as `fv!pagingInfo` to have the grid automatically manage paging. The function `a!queryProcessAnalytics()`, a Data Subset, a list of Dictionary, or an array of data can also be used. When using a query that returns a `datasubset`, you must pass the total count (`fetchTotalCount: true` on the query).\\n\"}, {\"keyword\": \"columns\", \"name\": \"Columns\", \"types\": \"List of `a!gridColumn()`\", \"description\": \"The columns to display in the grid, configured using `a!gridColumn()`.\\n\"}, {\"keyword\": \"pageSize\", \"name\": \"Rows to Display Per Page\", \"types\": \"Number (Integer)\", \"description\": \"The maximum number of rows to display at a time. Default: 10\\n\"}, {\"keyword\": \"initialSorts\", \"name\": \"Initial Sorts\", \"types\": \"List of SortInfo\", \"description\": \"Sorts applied to the grid upon initial load only. Each sort is applied in the order listed. The first sort in the list will display an active-sort arrow indicator (either up or down for _ascending_ or _descending_) in its corresponding grid column (if applicable).\\n\"}, {\"keyword\": \"secondarySorts\", \"name\": \"Secondary Sorts\", \"types\": \"List of SortInfo\", \"description\": \"Sorts applied to the grid after every user interaction. If the user activates a sort on a column, these sorts will be applied to the other columns in the order they're listed. For example, adding a secondary sort on _Month_ will keep them in order when the user sorts on _Year_. Secondary sorts do not display an active-sort indicator.\\n\"}, {\"keyword\": \"pagingSaveInto\", \"name\": \"Paging Save Into\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated only when user invokes a paging action on the grid. You can reference the current paging of the grid using `fv!pagingInfo`.\\n\"}, {\"keyword\": \"selectable\", \"name\": \"Selectable\", \"types\": \"Boolean\", \"description\": \"Determines if grid rows are selectable. When selection style is `\\\"CHECKBOX\\\"` (default), the selection column is displayed. Default: false.\\n\"}, {\"keyword\": \"selectionStyle\", \"name\": \"Selection Style\", \"types\": \"Text\", \"description\": \"Determines the style when a row is selected. Valid values: `\\\"CHECKBOX\\\"` (default), `\\\"ROW_HIGHLIGHT\\\"`.\\n\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"Text Array or Integer Array\", \"description\": \"Identifiers of the rows that should appear as selected. Can be set to have rows be pre-selected for the user. Supported types: _Text Array_ and _Integer Array_.\\n\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the selected identifiers when the user changes selections. Use `a!save()` to save a modified or alternative value to a variable. You can reference the rows selected and deselected in the most recent user interaction (not all selected or deselected rows) using `fv!selectedRows` and `fv!deselectedRows` respectively.\\n\"}, {\"keyword\": \"selectionRequired\", \"name\": \"Selection required\", \"types\": \"Boolean\", \"description\": \"Determines if a selection is required to submit the form. Default: `false`.\\n\"}, {\"keyword\": \"selectionRequiredMessage\", \"name\": \"Selection Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when a selection is required and not provided.\\n\"}, {\"keyword\": \"disableRowSelectionWhen\", \"name\": \"Disable Row Selection\", \"types\": \"Boolean\", \"description\": \"Determines for each row if selection is disabled. The condition defined in this parameter is evaluated once for each row. Reference fields from the source using dot notation, such as `fv!row.status`, or the identifier of the row using `fv!identifier`. Grids that use record data must use the `recordType!` domain to reference a record field or related record field. For example, `fv!row[recordType!Case.fields.caseName]`. Default: false.\\n\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Variant\", \"description\": \"Validation errors to display below the grid when the data is invalid, configured using `a!validationMessage()`. You can reference the current page of data using `fv!currentPage`.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"spacing\", \"name\": \"Spacing\", \"types\": \"Text\", \"description\": \"Determines the spacing within grid cells. Valid values: `\\\"STANDARD\\\"` (web default), `\\\"DENSE\\\"` (mobile default).\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines height of the grid. Valid values: `\\\"SHORT\\\"`, `\\\"SHORT_PLUS\\\"`, `\\\"MEDIUM\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"TALL\\\"`, `\\\"TALL_PLUS\\\"`, `\\\"EXTRA_TALL\\\"`,`\\\"AUTO\\\"` (default). All grid heights besides AUTO have fixed headers that will remain at the top of the grid when scrolling.\\n\"}, {\"keyword\": \"borderStyle\", \"name\": \"Border Style\", \"types\": \"Text\", \"description\": \"Determines the style of the grid border. Valid values: `\\\"STANDARD\\\"` (default), `\\\"LIGHT\\\"`.\\n\"}, {\"keyword\": \"shadeAlternateRows\", \"name\": \"Shade Alternate Rows\", \"types\": \"Boolean\", \"description\": \"Determines whether alternate rows are shaded. Default: true.\\n\"}, {\"keyword\": \"rowHeader\", \"name\": \"Row Header\", \"types\": \"Number (Integer)\", \"description\": \"Index of the column to be used as the row header. Screen readers will announce the value in each row header when navigating to other cells within that row. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, grid data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes grid data each time a specified action completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often grid data gets refreshed in minutes. When null, grid data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1, 2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`.\\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, grid data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh grid data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_.\\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes grid data each time any of these specific variables change. This allows you to refresh the grid data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. `refreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\\n\"}, {\"keyword\": \"userFilters\", \"name\": \"User Filters\", \"types\": \"List of Variant\", \"description\": \"List of user filter references to display, configured using the `recordType!` domain. For example, `recordType!Case.filters.status`. You may only reference user filters defined on the source record type used for the grid data. This parameter only applies when a record type is used as the source in the data parameter.\\n\"}, {\"keyword\": \"showSearchBox\", \"name\": \"Show search box\", \"types\": \"Boolean\", \"description\": \"Determines if the record search box should be shown. This parameter only applies when a record type is used as the source in the data parameter. Default: _true_.\\n\"}, {\"keyword\": \"showRefreshButton\", \"name\": \"Show Refresh Button\", \"types\": \"Boolean\", \"description\": \"Determines if the grid should include a refresh button to manually refresh data. This parameter only applies when a record type is used as the source in the data parameter. Default: _true_.\\n\"}, {\"keyword\": \"showExportButton\", \"name\": \"Show Export to Excel Button\", \"types\": \"Boolean\", \"description\": \"Determines if grid data can be exported. This parameter only applies when a record type is used as the source in the data parameter. Default: _false_.\\n\"}, {\"keyword\": \"recordActions\", \"name\": \"Record Actions\", \"types\": \"List of Variant\", \"description\": \"List of record action items to display above the grid, configured using [a!recordActionItem()](Record_Action_Item_Component.md). If you use `fv!identifier` in the identifier parameter of `a!recordActionItem()`, you will also need to configure selection for the grid. This parameter only applies when a record type is used as the source in the data parameter.\\n\"}, {\"keyword\": \"openActionsIn\", \"name\": \"Open Actions In\", \"types\": \"Text\", \"description\": \"Determines how record actions should open to the user. Valid values: `\\\"DIALOG\\\"` (default), `\\\"NEW_TAB\\\"`, `\\\"SAME_TAB\\\"`.\\n\"}, {\"keyword\": \"actionsDisplay\", \"name\": \"Actions Display\", \"types\": \"Text\", \"description\": \"Determines which details are shown for record actions, regardless of style. Valid values: `\\\"LABEL_AND_ICON\\\"` (default), `\\\"LABEL\\\"`, `\\\"ICON\\\"`.\\n\"}, {\"keyword\": \"actionsStyle\", \"name\": \"Actions Display\", \"types\": \"Text\", \"description\": \"Determines how the list of actions should be displayed above the grid. Valid values: `\\\"TOOLBAR\\\"` (default), `\\\"TOOLBAR_PRIMARY\\\"`. [Learn more](#display-and-style-record-actions).\\n\"}]\n \n ## Usage considerations\n \n ### Using read-only grids with record data\n \n Consider the following when using a record type as the source of your read-only grid.\n \n #### Using records-powered grids in a portal\n \n When you use records as the source for read-only grids in a portal, there are a few things to keep in mind.\n \n In portals, you cannot use the certain record components, such as [record links](Record_Link_Component.md) and [record actions](Record_Action_Component.md). When you create a read-only grid using a record type, it may automatically use these components, so be sure to remove the incompatible components before publishing your portal.\n \n [Record specific-components](Paging_Grid_Component.html#use-records-specific-components) such as the record list search, export to Excel, and refresh buttons will all function in a portal. But keep in mind that users won't be able to save their filters. The **Manage filters** button is replaced with a **Clear Filters** button in a published portal.\n \n {% include zoompic.html url=\"images/read_only_grid_filters.png\" alt=\"filters in read only grid filters\" border=\"-nb\" %}\n \n #### Autopopulate a grid with a record list\n When a record type is used as the data source for your read-only grid, Appian automatically generates grid columns based on the columns configured for the [record list](record-list.md).\n \n #### Use records-specific components\n You can add user filters, [export to Excel](Optimizing_Record_Lists_for_Export_to_Excel.md), the out-of-the-box record list search, and record actions on your grid. When you add these components, the grid will automatically style the component header for you.\n \n #### Display and style record actions\n The *recordActions* parameter allows you to display record actions, like related actions or record list actions, on the grid. You can display actions from different record types.\n \n You can then use the *actionsStyle* parameter to determine whether all actions display as with standard styling, or if the first record action displays as a primary button style. Appian recommends using the `\"TOOLBAR_PRIMARY\"` option when you want the first action, typically the most common action, to stand out.\n \n When *actionsStyles* is set to `\"TOOLBAR\"`, the buttons display like this:\n \n {% include zoompic.html url=\"images/grid-toolbar-standard.png\" border=\"-nb\" %}\n \n When *actionsStyles* is set to `\"TOOLBAR_PRIMARY\"`, the buttons display like this:\n \n {% include zoompic.html url=\"images/grid-toolbar-primary.png\" border=\"-nb\" %}\n \n #### Record action security\n \n Each action specified in the *recordActions* parameter has [security](record-action-security.md) that is checked to ensure only the right users can see the right actions. In most cases where you use security rules, Appian evaluates the security for the entire grid before it is shown to the user. Because security rules are verified in bulk, the overall grid loading time will be shorter than if security expressions are used.\n \n >appian-style-note\n >If you use `a!localVariables()` inside an `a!recordActionItem()`, Appian cannot perform a bulk security evaluation, so the grid may load slower than expected. Whenever possible, create local variables outside `a!recordActionItem()`.\n \n #### Reference related data \n If you use a record type with [data sync](records-data-sync.md) enabled as the source of your grid, you can also reference [related record fields](record-type-relationships.md) in your grid. \n \n You can use related record fields in your columns, or to sort and filter the grid.\n \n #### Filter, limit, and sort related one-to-many data\n If you reference a related record field from a one-to-many relationship as a column in the grid, the maximum number of related records returned for each base record is 10. \n \n To filter, limit, and sort the related record set returned from the one-to-many relationship, you can leverage the *relatedRecordData* parameter in [a!recordData()](fnc_system_recorddata.md#using-the-relatedrecorddata-parameter).\n \n Avoid using relationship references to display related one-to-many data. Instead, you should only reference the specific related record field you want to display. This avoids querying more data than necessary, which can impact the grid's performance and [export behavior](Optimizing_Record_Lists_for_Export_to_Excel.md#export-one-to-many-data). \n \n For example, to display a list of cases associated with each customer, you should use the related record field reference `recordType!Customer.relationships.cases.fields.title` in the grid column. You should not use the relationship reference `recordType!Customer.relationships.cases`.\n \n \n ### Configuring grid display\n \n - If the *value* for a column is empty or null, the grid still renders the column with just the label.\n - The *selectionStyle* of `ROW_HIGHLIGHT` does not have any visual indicator when selection is disabled through the *disableRowSelectionWhen* parameter.\n - For accessibility purposes, every grid should have a row header configured. The first column containing text is usually the correct choice for row header. See the [SAIL Design System](sail/ux-grids.md#accessibility) for more information.\n \n ### Configuring grid paging\n \n - To reduce clutter on smaller grids, the following happens:\n   - No paging controls are displayed when all rows are on one page.\n   - Paging controls to jump to the first or last page are not displayed when a grid has less than 3 pages.\n - When a read-only grid is used offline, paging and sorting don't function and images won't render.\n - If you are [managing your own paging](read-only-grid-configuration.md#manual-paging), you cannot pass a datasubset which has a  paging configuration that uses a batch size of `-1`.\n - When entering a query in the *data* parameter (either directly, or indirectly from a rule reference), the query must return the total count (`fetchTotalCount: true`).\n \n ### Grid height and column width\n \n - Grid heights behave as a fixed height on web but a maximum height on mobile.\n \n - For columns using the `\"AUTO\"` width, each column's width is determined by the length of the longest value in that column. \n   - See the [read-only grid column component](Grid_Column_Component.md#using-the-width-parameter) for more information on using the `\"AUTO\"` width.  \n   - For complete guidance on when and how to use column widths, see [Column Widths](sail/ux-grids.md#column-widths).\n \n ### Design Mode guidance\n \n > appain-style-note\n > This guidance does not apply to grids that use a record type as the data source. See [Configuring the Read-Only Grid](read-only-grid-configuration.md) to learn how to configure a records-powered grid in Design Mode.\n \n The following guidance applies when configuring a read-only grid in Design Mode:\n \n - **Generated columns**:\n   - When you populate the *data* parameter from Design Mode and [let the grid manage the paging](read-only-grid-configuration.md#grid-managed-paging), the grid will automatically generate an initial set of columns in the order they appear.\n   - Grid columns are *not* automatically generated when you select **VARIABLE** as the data source and use a *local variable* to power the read-only grid.\n   - The initial values for automatically-generated columns are:\n \n   | Parameter | Value | Description|\n   | - | - | - |\n   |*label*|`fv!row.<fieldname>`| The field name is converted to title case. If the field name is in camel case, it will be split and converted to title case. If the field name is too long, it will be truncated with ellipses (`...`).|\n   |*value*|`fv!row.<fieldname>`| The field value to display.|\n   |*sortField*|`<fieldname>`| The field name of the primary key.|\n   |*align*|`\"END\"` or `fixed()`|The alignment depends on the field's data type. If the data type for the column value is numerical or date-based, then it will set *align* : `\"END\"`. If the data type for the column value is a decimal, then it will be wrapped in the `fixed()` function to two decimal places. Ex. `value: fixed(fv!row.cost, 2)`.|\n \n \n - **Updating columns**:\n   - After initial columns have been generated, the grid will automatically update with new columns to match any new fields added to the data source.\n   - However, automatic updates *do not* occur when the data source is an **RULE** or **EXPRESSION**. To update the columns displayed in the grid, you must update the data source, and add or remove the columns manually.\n \n - **Selecting QUERY as the data source**:\n   - If you select **QUERY** as the data source, you'll use the [query editor](query-editor.md) to configure the query that powers your grid. \n   - Appian will automatically use the following query values in your grid:\n     - The query's *batchSize* will be the value of the grid's *pageSize* parameter. \n     - The query's *sortInfo* will be used as the grid's *initialSort* parameter.\n \n \n - **Batch size limitation**: \n   - The grid cannot use a query that has a paging info with a batch size of `-1` in Design Mode.\n \n ## Examples\n \n You can find example configurations of the grid at [Configuring the Read-Only Grid](read-only-grid-configuration.md) and [Grid Tutorial](Grid_Tutorial.md)."}, {"doc": "Form_Layout.md", "content": "---\n layout: function\n title: Form Layout\n category: function_page\n compatibility: -crf\n excerpt: Displays any arrangement of layouts and components beneath a title and above\n   buttons. Use this as the top-level layout for start and task forms.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!formLayout\n fncsubcat: Layouts\n reftype: sailcomponent\n scdisplayname: Form Layout\n space: sail_component\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Optional text to display as the interface's title.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Optional text displayed below the field's label.\n - keyword: contents\n   name: Contents\n   types: Any Type Array\n   description: Components and layouts to display in the form body.\n - keyword: buttons\n   name: Buttons\n   types: Button Layout\n   description: 'Buttons to display at the bottom of the form, arranged using `a!buttonLayout()`.\n \n     '\n - keyword: validations\n   name: Validations\n   types: Text or Validation Message\n   description: 'Validation errors displayed above the form buttons. Configured using\n     a text array or an array with a mix of text and Validation Message using `a!validationMessage(message,\n     validateAfter)`.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text or Validation Message Array\n   description: When present, the form is only validated when a button in the same\n     validation group is clicked.\n - keyword: skipAutoFocus\n   name: Don\u2019t automatically focus on first input\n   types: Boolean\n   description: 'Determines whether the first input will receive focus when a form\n     loads. Default is false.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n ---\n \n ## Function\n \n function name: a!formLayout \n  function syntax: a!formLayout (label,instructions,contents,buttons,validations,validationGroup,skipAutoFocus,showWhen)\n \n Displays any arrangement of layouts and components beneath a title and above buttons. Use this as the top-level layout for start and task forms.\n \n **See also**: [Dashboard](Dashboard_Layout.md), [Columns](Columns_Layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Optional text to display as the interface's title.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Optional text displayed below the field's label.\"}, {\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type Array\", \"description\": \"Components and layouts to display in the form body.\"}, {\"keyword\": \"buttons\", \"name\": \"Buttons\", \"types\": \"Button Layout\", \"description\": \"Buttons to display at the bottom of the form, arranged using `a!buttonLayout()`.\\n\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"Text or Validation Message\", \"description\": \"Validation errors displayed above the form buttons. Configured using a text array or an array with a mix of text and Validation Message using `a!validationMessage(message, validateAfter)`.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text or Validation Message Array\", \"description\": \"When present, the form is only validated when a button in the same validation group is clicked.\"}, {\"keyword\": \"skipAutoFocus\", \"name\": \"Don\\u2019t automatically focus on first input\", \"types\": \"Boolean\", \"description\": \"Determines whether the first input will receive focus when a form loads. Default is false.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using `a!formLayout()`\n \n - A button layout must be present for a back button to appear for activity-chained tasks.\n - Use form validation messages for problems that are not specific to a single component.\n - The component is cannot be either read-only or disabled.\n \n ### Initial behavior & focussing\n \n - The component is not in an initially collapsed section.\n - Focus will automatically be applied on initial load to the first component in a form that is one of the following:\n   - [Checkbox](Checkbox_Component.md)\n   - [Date](Date_Component.md)\n   - [Date and Time](Date_and_Time_Component.md)\n   - [Decimal](Floating_Point_Component.md)\n   - [Dropdown](Dropdown_Component.md)\n   - [Encrypted Text](Encrypted_Text_Component.md)\n   - [File-Upload](File_Upload_Component.md)\n   - [Integer](Integer_Component.md)\n   - [Multi-Dropdown](Multiple_Dropdown_Component.md)\n   - [Paragraph](Paragraph_Component.md)\n   - [Picker Components](SAIL_Components.md#pickers)\n   - [Radio Button](Radio_Button_Component.md)\n   - [Text](Radio_Button_Component.md)\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Two-column form\n \n ```sail\n a!formLayout(\n   label: \"Customers for Review\",\n   instructions: \"Review the profiles for the customers below and contact as needed\",\n   contents: {\n     a!columnsLayout(\n       columns: {\n         a!columnLayout(\n           contents: {\n             a!textField(\n               label: \"Customer\",\n               value: \"John Smith\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Status\",\n               value: \"Prospective\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Priority\",\n               value: \"High\",\n               readOnly: true\n             )\n           }\n         ),\n         a!columnLayout(\n           contents: {\n             a!textField(\n               label: \"Customer\",\n               value: \"Michael Johnson\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Status\",\n               value: \"Prospective\",\n               readOnly: true\n             ),\n             a!textField(\n               label: \"Priority\",\n               value: \"Medium\",\n               readOnly: true\n             )\n           }\n         )\n       }\n     )\n   },\n   buttons: a!buttonLayout(\n     primaryButtons: {\n       a!buttonWidget(\n         label: \"Submit\",\n         submit: true\n       )\n     }\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a two-column form](images/Formlayout_simple_172.png){:.screenshot}"}, {"doc": "Document_Browser_Component_173.md", "content": "---\n layout: function\n title: a!documentBrowserFieldColumns_17r3\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays the contents of a folder and allows users to navigate through a\n   series of folders to find and download documents.\n category: function_page\n compatibility: -crf, -om, -portal\n fncname: a!documentBrowserFieldColumns_17r3\n fncsubcat: Browsers\n fncexample: Click on the function name for examples.\n fncsyntax: '**a!documentBrowserFieldColumns_17r3**( [*label*], [*labelPosition*],\n   [*instructions*], [*helpTooltip*], [*folder*], [*height*], [*knowledgeCenter*] )'\n fnccat: Interface_Component\n evolved_fncname: a!documentBrowserFieldColumns\n evolved_reason: Now supports selection in addition to browsing.\n ---\n \n ## Document Browser\n \n **Function**: `a!documentBrowserFieldColumns_17r3()`\n \n Displays the contents of a folder and allows users to navigate through a series of folders to find and download documents.\n \n **Parameters**\n \n <table class=\"appianTable\">\n   <tr>\n     <th> Name </th>\n     <th> Keyword </th>\n     <th> Type </th>\n     <th> Description </th>\n   </tr>\n   <tr>\n     <td> Label </td>\n     <td> label </td>\n     <td> Text </td>\n     <td> Optional text to display as the field label. </td>\n   </tr>\n   <tr>\n     <td> Label Position </td>\n     <td> labelPosition </td>\n     <td> Text </td>\n     <td> Optional text to determine where the label appears. Valid values include\n       <ul>\n         <li><code>\"ABOVE\"</code> (default) Displays the label above the component.</li>\n         <li><code>\"ADJACENT\"</code> Displays the label to the left of the component.</li>\n         <li><code>\"COLLAPSED\"</code> Hides the label. The label will still be read by screen readers; see <a href =\"building_accessible_applications.md\">accessibility considerations</a> for more information.</li>\n         <li><code>\"JUSTIFIED\"</code> Aligns the label alongside the component starting at the edge of the page.\n </li>\n       </ul>\n     </td>\n   </tr>\n   <tr>\n     <td> Instructions </td>\n     <td> instructions </td>\n     <td> Text </td>\n     <td> Use this parameter to supply supplemental text about this field. </td>\n   </tr>\n   <tr>\n     <td> Help Tooltip </td>\n     <td> helpTooltip </td>\n     <td> Text </td>\n     <td> Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is <code>\"COLLAPSED\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Folder </td>\n     <td> folder </td>\n     <td> Folder </td>\n     <td> The contents of the selected folder are displayed in the document browser. </td>\n   </tr>\n   <tr>\n     <td> Height </td>\n     <td> height </td>\n     <td> Text </td>\n     <td> Determines the height of the component. Valid values are <code>SHORT</code>, <code>MEDIUM</code> (default), and <code>TALL</code>. </td>\n   </tr>\n   <tr>\n     <td> Knowledge Center </td>\n     <td> knowledgeCenter </td>\n     <td> Knowledge Center </td>\n     <td> The contents of the selected knowledge center are displayed in the document browser. </td>\n   </tr>\n   <tr>\n     <td> Visibility </td>\n     <td> showWhen </td>\n     <td> Boolean </td>\n     <td> Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. </td>\n   </tr>\n </table>\n \n **Notes**\n \n - You must specify either a folder or a knowledge center, but not both.\n - The current user must have permission to view the selected folder or knowledge center in the parameter.\n - Within a folder or knowledge center, the user can only see contents for which they have permission to view.\n - Each column displays the first 1000 items in alphabetical order. Contents may consist of any combination of folders or documents, and folders are always listed first.\n - Avoid using this component for offline mobile forms because tapping on a folder does not display its contents and tapping on a file does not download it when offline.\n \n **Examples**\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ```sail \n =a!localVariables(\n   local!folder,\n   {\n     a!pickerFieldFolders(\n       label: \"Select a Folder\",\n       maxSelections: 1,\n       value: local!folder,\n       saveInto: local!folder\n     ),\n     a!documentBrowserFieldColumns_17r3(\n       label: \"Document Browser\",\n       folder: local!folder\n     )\n   }\n )\n ```"}, {"doc": "Tree_Browser_Component.md", "content": "---\n layout: function\n title: Hierarchy Browser (Tree) Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays hierarchical data in the form of drillable tree.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!hierarchyBrowserFieldTree\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: pathValue\n   name: Navigation Path\n   types: List of Variant\n   description: 'The first value in the pathValue array appears in the uppermost level\n     of the tree and is the root of the visible hierarchy. As the user clicks through\n     the browser, clicked nodes become highlighted. These clicked nodes'' values are\n     in the pathValue. They should be stored in a variable, for example local!path.\n     A clicked node''s value is used to determine the next level, generated by nextLevelValues.\n     The pathValue must have a default value.\n \n     '\n - keyword: pathSaveInto\n   name: Save Navigation To\n   types: List of Save\n   description: 'Variable or list of variables to update when a user clicks on a drillable\n     node, as determined by the node configurations. For example, local!path. Use a!save()\n     to save a modified or alternative value to a variable.\n \n     '\n - keyword: nodeConfigs\n   name: Node Configurations\n   types: HierarchyBrowserFieldTreeNode\n   description: Describe how to display a value as a node using a!hierarchyBrowserFieldTreeNode()\n     and fv!nodeValue. This rule or expression is evaluated for each value where fv!nodeValue\n     is any node value.\n - keyword: nextLevelValues\n   name: Next Level Values\n   types: List of Variant\n   description: 'Given a node value, describe how to get the next level\u2019s values using\n     the variable fv!nodeValue. For example, rule!CRM_getCustomerUsersBySupervisor(customer:\n     fv!nodeValue, isActive: true). This rule or expression is evaluated for each value\n     in pathValue where fv!nodeValue refers any value in pathValue.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Hierarchy Browser (Tree)\n space: sail_component\n ---\n \n ## Function\n \n function name: a!hierarchyBrowserFieldTree \n  function syntax: a!hierarchyBrowserFieldTree (label,labelPosition,instructions,helpTooltip,pathValue,pathSaveInto,nodeConfigs,nextLevelValues,accessibilityText,showWhen)\n \n Displays hierarchical data in the form of drillable tree.\n \n The Tree Browser Component allows users to vertically navigate hierarchical business objects, each presented as a node with a large image, three lines of metadata, and an optional link.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"pathValue\", \"name\": \"Navigation Path\", \"types\": \"List of Variant\", \"description\": \"The first value in the pathValue array appears in the uppermost level of the tree and is the root of the visible hierarchy. As the user clicks through the browser, clicked nodes become highlighted. These clicked nodes' values are in the pathValue. They should be stored in a variable, for example local!path. A clicked node's value is used to determine the next level, generated by nextLevelValues. The pathValue must have a default value.\\n\"}, {\"keyword\": \"pathSaveInto\", \"name\": \"Save Navigation To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a user clicks on a drillable node, as determined by the node configurations. For example, local!path. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"nodeConfigs\", \"name\": \"Node Configurations\", \"types\": \"HierarchyBrowserFieldTreeNode\", \"description\": \"Describe how to display a value as a node using a!hierarchyBrowserFieldTreeNode() and fv!nodeValue. This rule or expression is evaluated for each value where fv!nodeValue is any node value.\"}, {\"keyword\": \"nextLevelValues\", \"name\": \"Next Level Values\", \"types\": \"List of Variant\", \"description\": \"Given a node value, describe how to get the next level\\u2019s values using the variable fv!nodeValue. For example, rule!CRM_getCustomerUsersBySupervisor(customer: fv!nodeValue, isActive: true). This rule or expression is evaluated for each value in pathValue where fv!nodeValue refers any value in pathValue.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Hierarchy browsers overview\n \n The hierarchy browser tree is a generalized version of the [org chart](Org_Chart_Component.md) in the same way that the [custom picker](Custom_Picker_Component.md) is a generalized version of the [user and group pickers](User_and_Group_Picker_Component.md). The designer has control over what data is shown, how it is retrieved, and how it is displayed, making the component a flexible means of presenting hierarchical business data to users.\n \n {% comment %}\n For an interface recipe using the hierarchy browser tree, see the [Contact Management application page](Hierarchy_Browser_Tree_-_Contact_Management.md). \n {% endcomment %}\n \n For more information on how the hierarchy browser tree works, see the [detailed explanation](#breakdown).\n \n ### Using the pathValue and nodeConfigs parameters\n \n - If a *pathValue* is not specified, only the *label*, *tooltip*, and *instructions* will display.\n - All nodes, including non-drillable nodes, can be clicked and saved to the *pathValue*. Non-drillable nodes do not, however, show as having any values in the next level.\n - Each value in the *pathValue* past the first must be included in the *Next Level Values* generated by the previous value in the *pathValue*. For example, if *Navigation Path* is `{1, 10, 100}`, then `10` must be present in the *nextLevelValues* generated by `1` and `100` in the *nextLevelValues* generated by `10`.\n - The [function variable](parts-of-an-expression.md#function-variables) `fv!nodeValue` is available when configuring the hierarchy browser tree. It is only available in the *nodeConfigs* and *nextLevelValues* parameters.\n  \n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Tree browser\n \n ```sail \n a!localVariables(\n   local!path: {\n     {\n       id: 6,\n       name: \"Node 6\",\n       description:\"Description for node 6\",\n       details: \"I have 6 child nodes\",\n       type: \"AIRPLANE\",\n       numberOfChildren: 6,\n       isDrillable: true\n     }\n   },\n   a!hierarchyBrowserFieldTree(\n     nodeConfigs: a!hierarchyBrowserFieldTreeNode(\n       id: fv!nodeValue.id,\n       label: fv!nodeValue.name,\n       description: fv!nodeValue.description,\n       details: fv!nodeValue.details,\n       image: a!documentImage(\n         document: if(\n           fv!nodeValue.type = \"AIRPLANE\",\n           a!iconNewsEvent(\"PAPER_AIRPLANE\"),\n           a!iconNewsEvent(\"FOUNTAIN_PEN\")\n         )\n       ),\n       nextLevelCount: fv!nodeValue.numberOfChildren,\n       isDrillable: fv!nodeValue.isDrillable\n     ),\n     pathValue: local!path,\n     pathSaveInto: local!path,\n     nextLevelValues: a!foreach(\n       /* Make a number of values in the next level equal to the number of children */\n       enumerate(fv!nodeValue.numberOfChildren),\n       a!localVariables(\n         /* Give the new node a random number of children between 0 and 10 */\n         local!numberOfChilren: tointeger(rand() * 10),\n         /* Make only even nodes drillable */\n         local!isDrillable: mod(fv!item, 2) = 0,\n         {\n           id: fv!item,\n           name: \"Node \" & fv!item,\n           description: \"Description for node \" & fv!item,\n           details: if(\n             local!isDrillable,\n             if(\n               local!numberOfChilren = 1,\n               \"I have 1 child node\",\n               \"I have \" & local!numberOfChilren & \" child nodes\"\n             ),\n             \"I am not drillable\"\n           ),\n           type: if(\n             fv!nodeValue.type = \"AIRPLANE\",\n             \"FOUNTAIN_PEN\",\n             \"AIRPLANE\"\n           ),\n           numberOfChildren: local!numberOfChilren,\n           isDrillable: local!isDrillable\n         }\n       )\n     )\n   )\n )\n ```\n \n ### Hierarchy browser tree example breakdown and explanation {#breakdown}\n \n If you want more information on how the hierarchy browser tree's inputs produce the rendered component, read through this section. This section provides a step-by-step breakdown of how the values provided to the component generate the component's data and guide its display. The interface in this section can be created by pasting the following expression into the **INTERFACE DEFINITION** in **EXPRESSION MODE**.\n \n ```sail \n a!localVariables(\n   local!path: {5,2},\n   a!hierarchyBrowserFieldTree(\n     nodeConfigs: a!hierarchyBrowserFieldTreeNode(\n       id: fv!nodeValue,\n       label: \"Node\" & fv!nodeValue,\n       description: \"Description for node \" & fv!nodeValue,\n       details: \"Details for node \" & fv!nodeValue,\n       image: a!documentImage(document: a!iconIndicator(\"PREVIEW\")),\n       nextLevelCount: fv!nodeValue\n     ),\n     pathValue: local!path,\n     pathSaveInto: local!path,\n     nextLevelValues: enumerate(fv!nodeValue)\n   )\n )\n ```\n \n To configure the tree browser details:\n \n 1. The first step in building the browser is generating the \"trunk\" of the tree, or path nodes. You provide these values to the component through **pathValue**.\n   ![screenshot breaking down the nodes by one level](images/HierarchyBrowserTreeFlowOne.png){:.screenshot}\n 1. Next, the component must know how to display these values as nodes. The component gets the display information from **nodeConfigs**.\n   ![screenshot breaking down the nodes by two levels](images/HierarchyBrowserTreeFlowTwo.png){:.screenshot}\n   - As the purple text (number two) shows, the display information for the path nodes comes from evaluating **nodeConfigs** for each value in **pathValue**. Each evaluation of **nodeConfigs** needs to produce a <a href=\"Tree_Browser_Node_Component.html\">hierarchy browser tree node</a>. In this example, the first value in **pathValue** is 5. Therefore, the first node, or the root, comes from evaluating **nodeConfigs** with `fv!nodeValue` set to 5.\n 1. The component creates a level of nodes for each node in **pathValue**.</li>\n   ![screenshot breaking down the nodes by three levels](images/HierarchyBrowserTreeFlowThree.png){:.screenshot}\n   - The orange text (number three) shows that the second and third levels' values are generated by evaluating **nextLevelValues** for the first and second values in **pathValue**, respectively. In this example, the first value in **pathValue** is 5. The component uses this value to generate the second level's values by evaluating **nextColumnValues** with `fv!nodeValue` set to 5. The evaluation produced 5 values: 0, 1, 2, 3, 4.  \n 1. Finally, the component determines how to display the values produced in step three as nodes using **nodeConfigs**.\n   ![screenshot breaking down the nodes by four levels](images/HierarchyBrowserTreeFlowFour.png){:.screenshot}\n   - The green text (number four) shows that the component evaluates **nodeConfigs** for each value generated by **nextLevelValues**."}, {"doc": "Gauge_Fraction_Component.md", "content": "---\n layout: function\n title: Gauge Fraction\n category: function_page\n compatibility: -crf\n excerpt: ' Displays text in fractional format for use within the gauge field primary\n   text parameter.'\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gaugeFraction\n fncsubcat: Display\n parameters:\n - keyword: denominator\n   name: Denominator\n   types: Number (Integer)\n   description: 'Value to display as the bottom portion of the fraction. Value cannot\n     be negative. Default: 100. Numerator is calculated automatically based on denominator\n     and fill percentage.'\n reftype: sailcomponent\n scdisplayname: Gauge Fraction\n scsubcat: Gauge_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gaugeFraction \n  function syntax: a!gaugeFraction (denominator)\n \n Displays text in a fractional format for use within the [gauge](Gauge_Component.md) field *primaryText* parameter.\n \n **See also**: [Gauge design guidance](sail/ux-gauge.md)\n \n ## Parameters\n \n [{\"keyword\": \"denominator\", \"name\": \"Denominator\", \"types\": \"Number (Integer)\", \"description\": \"Value to display as the bottom portion of the fraction. Value cannot be negative. Default: 100. Numerator is calculated automatically based on denominator and fill percentage.\"}]\n \n > appian-style-tip\n > This component captures the *percentage* value from its parent gauge and automatically calculates the numerator based on the provided *denominator*, rounding to an integer.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n =a!gaugeField(\n   label: \"Evaluations Completed\",\n   percentage: (25 / 26) * 100,\n   primarytext: a!gaugeFraction(denominator: 26)\n )\n {% endsailbox %}"}, {"doc": "Document_Browser_Component.md", "content": "---\n layout: function\n title: Document Browser Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays the contents of a folder and allows users to navigate through a\n   series of folders to find and select a document.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!documentBrowserFieldColumns\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: rootFolder\n   name: Root Folder\n   types: Any Type\n   description: The contents of the specified folder or knowledge center are displayed\n     in the first column of the browser.\n - keyword: navigationValue\n   name: Navigation Folder Value\n   types: Folder\n   description: The folder that has been navigated to whose contents are displayed\n     in the rightmost column.\n - keyword: navigationSaveInto\n   name: Save Navigation Folder To\n   types: List of Save\n   description: Variable or list of variables to update when the navigation folder\n     changes.\n - keyword: selectionValue\n   name: Selection Value\n   types: Document\n   description: The document to show as selected.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: Variable or list of variables to update when a document is clicked.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines whether selection is enabled. Default: false.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the component. Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n reftype: sailcomponent\n scdisplayname: Document Browser\n space: sail_component\n ---\n \n ## Function\n \n function name: a!documentBrowserFieldColumns \n  function syntax: a!documentBrowserFieldColumns (label,labelPosition,instructions,helpTooltip,rootFolder,navigationValue,navigationSaveInto,selectionValue,selectionSaveInto,showWhen,readOnly,height,accessibilityText)\n \n Displays the contents of a folder and allows users to navigate through a series of folders to find and select a document.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"rootFolder\", \"name\": \"Root Folder\", \"types\": \"Any Type\", \"description\": \"The contents of the specified folder or knowledge center are displayed in the first column of the browser.\"}, {\"keyword\": \"navigationValue\", \"name\": \"Navigation Folder Value\", \"types\": \"Folder\", \"description\": \"The folder that has been navigated to whose contents are displayed in the rightmost column.\"}, {\"keyword\": \"navigationSaveInto\", \"name\": \"Save Navigation Folder To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when the navigation folder changes.\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"Document\", \"description\": \"The document to show as selected.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a document is clicked.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines whether selection is enabled. Default: false.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the component. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}]\n \n ## Usage considerations\n \n ### Displaying items and offline use\n \n - Each column displays items in alphabetical order, with folders always listed first.\n - Avoid using this component for offline mobile forms because tapping on a folder does not display its contents.\n \n ### Permissions\n \n - The current user must have permission to view the selected folder or knowledge center in the parameter.\n - Within a folder or knowledge center, the user can only see contents for which they have permission to view.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Document browser\n \n ```sail\n a!localVariables(\n   local!selection,\n   local!navigation: if(\n     isnull(local!selection),\n     null,\n     document(local!selection[1], \"folderId\")\n   ),\n   local!rootFolder: cons!REPORTS_FOLDER,\n   a!sectionLayout(\n     label: \"System Report Picker\",\n     contents: {\n       a!documentBrowserFieldColumns(\n         rootFolder: local!rootFolder,\n         selectionValue: local!selection,\n         selectionSaveInto: local!selection,\n         navigationValue: local!navigation,\n         navigationSaveInto: local!navigation\n       ),\n       a!pickerFieldDocuments(\n         label: \"Selection\",\n         labelPosition: \"JUSTIFIED\",\n         folderFilter: local!rootFolder,\n         maxSelections: 1,\n         value: local!selection,\n         saveInto: local!selection\n       )\n     }\n   )\n )\n ```\n \n A document browser similar to the one pictured below displays. Note that your folder contents may differ from the example:\n \n ![An example of the document browser component](images/doc-browser-example.png){:.screenshot}"}, {"doc": "Billboard_Layout_19r1.md", "content": "---\n layout: basic\n title: a!billboardLayout_19r1 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays a background color, image, or video with optional overlay content.\n category: function_page\n compatibility: -crf, -om\n fncname: a!billboardLayout_19r1\n fncsubcat: Layouts\n fncexample: Click on the function name for examples.\n fncsyntax: '**a!billboardLayout**( [*backgroundMedia*], [*backgroundColor*], [*overlayPositionBar*],\n   [*overlayPositionColumn*], [*overlayColumnWidth*], [*overlayStyle*], [*overlayContents*],\n   [*height*], [*showWhen*] )'\n fnccat: Interface_Component\n scdisplayname: Billboard Layout\n evolved_fncname: a!billboardLayout\n evolved_reason: Replaced multiple parameters with a new parameter that allows the\n   designer to choose between a bar, column, or full overlay style. Added the full\n   overlay style. Added the alignVertical parameter for the column and full overlay\n   styles.\n ---\n \n ## Billboard\n \n **Function**: `a!billboardLayout_19r1()`\n \n Displays a background color, image, or video with optional overlay content.\n \n **Parameters**\n \n <table class=\"appianTable\">\n   <tr>\n     <th> Name </th>\n     <th> Keyword </th>\n     <th> Type </th>\n     <th> Description </th>\n   </tr>\n   <tr>\n     <td> Background Media </td>\n     <td> backgroundMedia </td>\n     <td> Any Type </td>\n     <td> Determines the background content. Takes priority over background color. Configure with  <a href=\"Document_Image_Component.md\">a!documentImage()</a>, <a href=\"Web_Image_Component.md\">a!webImage()</a>, or <a href=\"Web_Video_Component.md\">a!webVideo()</a> </td>\n   </tr>\n   <tr>\n     <td> Background Color </td>\n     <td> backgroundColor </td>\n     <td> Text </td>\n     <td> Determines the background color. When background media is also specified, the background color shows while media is loading or when background image is transparent. Must be a valid hex code. Default is <code>#f0f0f0</code>. </td>\n   </tr>\n   <tr>\n     <td> Bar Overlay Position </td>\n     <td> overlayPositionBar </td>\n     <td> Text </td>\n     <td> Determines where the bar overlay appears. Takes priority over column overlay when both are specified. Valid values: <code>\"TOP\"</code>, <code>\"MIDDLE\"</code>, <code>\"BOTTOM\"</code> (default). </td>\n   </tr>\n   <tr>\n     <td> Column Overlay Position </td>\n     <td> overlayPositionColumn </td>\n     <td> Text </td>\n     <td> Determines where the column overlay appears. Ignored when a bar overlay is also specified. Valid values: <code>\"START\"</code>, <code>\"CENTER\"</code>, <code>\"END\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Column Overlay Width </td>\n     <td> overlayColumnWidth </td>\n     <td> Text </td>\n     <td> Determines the column overlay width. Ignored when a bar overlay is also specified. Valid values: <code>\"NARROW\"</code>, <code>\"MEDIUM\"</code> (default), <code>\"WIDE\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Overlay Style </td>\n     <td> overlayStyle </td>\n     <td> Text </td>\n     <td> Determines the overlay style. Valid values: <code>\"DARK\"</code> (default), <code>\"LIGHT\"</code>, <code>\"NONE\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Overlay Contents </td>\n     <td> overlayContents </td>\n     <td> Any Type </td>\n     <td> The interface to display on top of the background. Accepts layouts and display components. Supported layouts and components: Button, Columns, Image, Link, Milestone, Progress Bar, Rich Text, Section, Side by Side. </td>\n   </tr>\n   <tr>\n     <td> Height </td>\n     <td> height </td>\n     <td> Text </td>\n     <td> Determines the layout height. Valid values: <code>\"SHORT\"</code>, <code>\"MEDIUM\"</code> (default), <code>\"TALL\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Visibility </td>\n     <td> showWhen </td>\n     <td> Boolean </td>\n     <td> Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. </td>\n   </tr>\n  <tr>\n     <td> Margin Below </td>\n     <td> marginBelow </td>\n     <td> Text </td>\n     <td> Determines how much space is added below the layout. Valid values: <code>\u201cNONE\u201d</code> (default), <code>\u201cSTANDARD\u201d</code>. </td>\n   </tr>\n </table>\n \n **Notes**\n \n - A billboard layout may have either a bar overlay or a column overlay.\n - When overlay content does not fit within the layout, it scrolls vertically.\n - When a video is used as the background, it plays automatically and does not have audio.\n - A billboard layout displays background media as large as possible to fill the available width. When the background media's aspect ratio is different from the layout's aspect ratio, the background will be cut off at the top and bottom. It's recommended to use this layout for decoration, rather than for displaying content that must be fully visible at all times.\n \n **Examples**\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ```sail \n =a!billboardLayout_19r1(\n   backgroundColor: \"#619ed6\",\n   overlayPositionBar: \"BOTTOM\",\n   overlayStyle: \"DARK\",\n   overlayContents: {\n     a!columnsLayout(\n       columns: {\n         a!columnLayout(\n           contents: {\n             a!richTextDisplayField(\n               labelPosition: \"COLLAPSED\",\n               value: {\n                 a!richTextItem(\n                   text: \"Finance Summary\",\n                   size: \"LARGE\"\n                 )\n               }\n             )\n           }\n         ),\n         a!columnLayout(\n           contents: {\n             a!columnsLayout(\n               columns: {\n                 a!columnLayout(\n                   contents: {\n                     a!richTextDisplayField(\n                       label: \"Total Spending\",\n                       value: a!richTextItem(\n                         text: \"$31,000.00\",\n                         size: \"MEDIUM\"\n                       )\n                     )\n                   }\n                 ),\n                 a!columnLayout(\n                   contents: {\n                     a!richTextDisplayField(\n                       label: \"Remaining Budget\",\n                       value: a!richTextItem(\n                         text: a!richTextItem(\n                           text: \"79%\",\n                           size: \"MEDIUM\"\n                         ),\n                         color: \"POSITIVE\"\n                       )\n                     )\n                   }\n                 ),\n                 a!columnLayout(\n                   contents: {\n                     a!richTextDisplayField(\n                       label: \"Open Requests\",\n                       value: a!richTextItem(\n                         text: \"36\",\n                         size: \"MEDIUM\"\n                       )\n                     )\n                   }\n                 )\n               },\n               alignVertical: \"TOP\"\n             )\n           }\n         )\n       },\n       alignVertical: \"MIDDLE\"\n     )\n   },\n   height: \"SHORT\",\n   marginBelow: \"STANDARD\"\n )\n ```\n \n Displays the following:\n \n <img src=\"images/billboard-172.png\" class=\"screenshot\"/>"}, {"doc": "Dropdown_By_Index_Component.md", "content": "---\n layout: function\n title: Dropdown By Index Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a list of choices for the user to select one item and saves the\n   index of the selected choice.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!dropdownFieldByIndex\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.''\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.''\n \n     '\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display when nothing is selected and the value is null.\n - keyword: value\n   name: Selected Index\n   types: Number (Integer)\n   description: Index of the choice to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Selection To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice index when\n     the user changes the selection. Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md)\n     for more information about how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: searchDisplay\n   name: Search Display\n   types: Text\n   description: 'Determines when a search box displays above the options. Valid values:\n     `\"AUTO\"` (default), `\"ON\"`, `\"OFF\"`. When set to `\"AUTO\"`, the search box displays\n     if there are more than 11 options.\n \n     '\n reftype: sailcomponent\n scdisplayname: Dropdown By Index\n space: sail_component\n ---\n \n ## Function\n \n function name: a!dropdownFieldByIndex \n  function syntax: a!dropdownFieldByIndex (label,labelPosition,instructions,required,disabled,choiceLabels,placeholder,value,validations,saveInto,validationGroup,requiredMessage,helpTooltip,accessibilityText,showWhen,searchDisplay)\n \n Displays a list of choices for the user to select one item and saves the index of the selected choice. To save a value instead of the index, use a [dropdown component](Dropdown_Component.md). \n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.'\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.'\\n\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display when nothing is selected and the value is null.\"}, {\"keyword\": \"value\", \"name\": \"Selected Index\", \"types\": \"Number (Integer)\", \"description\": \"Index of the choice to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice index when the user changes the selection. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md) for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"searchDisplay\", \"name\": \"Search Display\", \"types\": \"Text\", \"description\": \"Determines when a search box displays above the options. Valid values: `\\\"AUTO\\\"` (default), `\\\"ON\\\"`, `\\\"OFF\\\"`. When set to `\\\"AUTO\\\"`, the search box displays if there are more than 11 options.\\n\"}]\n \n ## Usage considerations\n \n ### Using the selectedIndex, choiceLabels, and placeholder parameters\n \n - Choice index numbers start at 1. \n - The value provided to *selectedIndex* cannot be null, empty, less than 1, or greater than the length of the *choiceLabels* array.\n - Passing a null value to the dropdown's *selectedIndex* parameter causes the placeholder text to appear selected. The *Placeholder* and *Selected Index* parameter cannot both be null.\n - The argument passed to the *placeholder* parameter is `null` and not an index.\n - Options display in the same order as defined in the *choiceLabels* parameter. The *choiceLabels* parameter cannot be null.\n \n ## Examples\n \n ***Dropdown by Index with Initial Value***\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: 1,\n   a!dropdownFieldByIndex(\n   label: \"Language\",\n   instructions: \"In which language are you most proficient?\",\n   choiceLabels: {\n     \"English\",\n     \"Spanish\",\n     \"French\",\n     \"German\"\n   },\n   value: local!language,\n   saveInto: local!language\n )\n )\n \n {% endsailbox %}"}, {"doc": "Styled_Text_Component_181.md", "content": "---\n layout: function\n title: a!richTextItem_18r1 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays styled text within a rich text component.\n category: function_page\n compatibility: -crf\n fncname: a!richTextItem_18r1\n fncsubcat: Display\n fncexample: Click on the function name for examples.\n fncsyntax: '**a!richTextItem_18r1**( [*Text*], [*style*], [*link*], [*linkStyle*],\n   [*showWhen*] )'\n fnccat: Interface_Component\n scsubcat: Rich_Text_Types\n scdisplayname: Styled Text 18.1\n evolved_fncname: a!richTextItem\n evolved_reason: New version supports multiple values in the style parameter, as well\n   as custom hex colors.\n ---\n \n ## Styled Text\n \n **Function**: `a!richTextItem_18r1()`\n \n Displays styled text within a [rich text](Rich_Text_Component.md) component.\n \n **Parameters**\n \n <table class=\"appianTable\">\n   <tr>\n     <th> Name </th>\n     <th> Keyword </th>\n     <th> Type </th>\n     <th> Description </th>\n   </tr>\n   <tr>\n     <td> Text </td>\n     <td> text </td>\n     <td> Text or Styled Text </td>\n     <td> Array of text to display as a rich text item. Text can be further styled by nesting multiple <code>a!richTextItem_18r1()</code> calls. </td>\n   </tr>\n   <tr>\n     <td> Style </td>\n     <td> style </td>\n     <td> Text </td>\n     <td> Determines the style to apply to the text value. Valid values include <code>\"NORMAL\"</code> (default), <code>\"EMPHASIS\"</code>, <code>\"STRONG\"</code>, <code>\"UNDERLINE\"</code>, <code>\"LARGE\"</code>, <code>\"MEDIUM\"</code>, <code>\"SMALL\"</code>, <code>\"HEADER_LARGE\"</code>, <code>\"HEADER_MEDIUM\"</code>, <code>\"HEADER_SMALL\"</code>, <code>\"POSITIVE\"</code>, <code>\"NEGATIVE\"</code>, <code>\"ACCENT\"</code>, and <code>\"SECONDARY\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Link </td>\n     <td> link </td>\n     <td> <a href=\"SAIL_Components.md#display\">Link</a> </td>\n     <td> Link to apply to the text. Create links with\n       <ul>\n         <li> <a href=\"authorization_link_component.html\">a!authorizationLink()</a> </li>\n         <li> <a href=\"Document_Link_Component.html\">a!documentDownloadLink()</a> </li>\n         <li> <a href=\"Dynamic_Link_Component.html\">a!dynamicLink()</a> </li>\n         <li> <a href=\"News_Entry_Link_Component.html\">a!newsEntryLink()</a> </li>\n         <li> <a href=\"Process_Task_Link_Component.html\">a!processTaskLink()</a> </li>\n         <li> <a href=\"Record_Link_Component.html\">a!recordLink()</a> </li>\n         <li> <a href=\"Report_Link_Component.html\">a!reportLink()</a> </li>\n         <li> <a href=\"Start_Process_Link_Component.html\">a!startProcessLink()</a> </li>\n         <li> <a href=\"Submit_Link_Component.html\"> a!submitLink()</a> </li>\n         <li> <a href=\"User_Record_Link_Component.html\">a!userRecordLink()</a> </li>\n         <li> <a href=\"Web_Link_Component.html\">a!safeLink()</a> </li>\n       </ul>\n     </td>\n   </tr>\n   <tr>\n     <td> Link Style </td>\n     <td> linkStyle </td>\n     <td> Text </td>\n     <td> Determines how the link is underlined. Valid values: <code>\"INLINE\"</code> (default), <code>\"STANDALONE\"</code>. </td>\n   </tr>\n   <tr>\n     <td> Visibility </td>\n     <td> showWhen </td>\n     <td> Boolean </td>\n     <td> Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. </td>\n   </tr>\n </table>\n \n **Notes**\n \n - If *Text* is null or contains an empty array, no text is displayed.\n - If *Link* is null, the *Text* is not displayed as a link.\n - While rich text components can be placed inside a grid layout, header styles are not supported within a grid layout.\n - Header styles cannot be combined with other styles, e.g. an underlined header is not supported.\n - Header styles cannot be applied to items within a bulleted list or numbered list.\n - For nested rich text, if two conflicting styles are found (e.g. both SMALL and LARGE), the innermost style will be displayed.\n \n \n ## Example\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n \n {% sailbox 600 %}\n a!richTextDisplayField(\n   labelPosition: \"COLLAPSED\",\n   value: {\n     a!richTextItem_18r1(\n       text: \"Large Header\",\n       style: \"HEADER_LARGE\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Medium Header\",\n       style: \"HEADER_MEDIUM\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Small Header\",\n       style: \"HEADER_SMALL\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Normal \",\n       style: \"NORMAL\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Emphasis \",\n       style: \"EMPHASIS\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Strong \",\n       style: \"STRONG\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Underline\",\n       style: \"UNDERLINE\"\n     ),\n     a!richTextItem_18r1(\n       text: \" Positive \",\n       style: \"POSITIVE\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Negative \",\n       style: \"NEGATIVE\"\n     ),\n     a!richTextItem_18r1(\n       text: \" Accent \",\n       style: \"ACCENT\"\n     ),\n     a!richTextItem_18r1(\n       text: \" Secondary \",\n       style: \"SECONDARY\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Large \",\n       style: \"LARGE\"\n     ),\n     a!richTextItem_18r1(\n       text: \"Medium \",\n       style: \"MEDIUM\"\n     ),\n     a!richTextItem_18r1(\n       text: \" Small \",\n       style: \"SMALL\"\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Group_Browser_Components.md", "content": "---\n layout: function\n title: Group Browser Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays group membership structure in columns. Users can navigate through\n   the structure and select a single group.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!groupBrowserFieldColumns\n fncsubcat: Browsers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: rootGroup\n   name: Initial Group\n   types: Group\n   description: The direct members of the initial group are displayed in the first\n     column.\n - keyword: pathValue\n   name: Navigation Path\n   types: List of Group\n   description: The path from the first column to the current navigation.\n - keyword: pathSaveInto\n   name: Save Navigation To\n   types: List of Save\n   description: Variable or list of variables to update when a user clicks on a group.\n - keyword: selectionValue\n   name: Selection Value\n   types: Group\n   description: This group is displayed as selected when it is present in the navigation\n     path array.\n - keyword: selectionSaveInto\n   name: Save Selection To\n   types: List of Save\n   description: Variable or list of variables to update upon selection of a group.\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines whether selection is enabled. Default: false.'\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the height of the component. Valid values: `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`.\n \n     '\n - keyword: hideUsers\n   name: Hide Users\n   types: Boolean\n   description: 'Determines whether users will be displayed. Default: false.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Group Browser\n space: sail_component\n ---\n \n ## Function\n \n function name: a!groupBrowserFieldColumns \n  function syntax: a!groupBrowserFieldColumns (label,labelPosition,instructions,helpTooltip,rootGroup,pathValue,pathSaveInto,selectionValue,selectionSaveInto,readOnly,height,hideUsers,accessibilityText,showWhen)\n \n Displays group membership structure in columns. Users can navigate through the structure and select a single group.\n \n **See also**: [Example Interfaces](browser_examples.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"rootGroup\", \"name\": \"Initial Group\", \"types\": \"Group\", \"description\": \"The direct members of the initial group are displayed in the first column.\"}, {\"keyword\": \"pathValue\", \"name\": \"Navigation Path\", \"types\": \"List of Group\", \"description\": \"The path from the first column to the current navigation.\"}, {\"keyword\": \"pathSaveInto\", \"name\": \"Save Navigation To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update when a user clicks on a group.\"}, {\"keyword\": \"selectionValue\", \"name\": \"Selection Value\", \"types\": \"Group\", \"description\": \"This group is displayed as selected when it is present in the navigation path array.\"}, {\"keyword\": \"selectionSaveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"Variable or list of variables to update upon selection of a group.\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines whether selection is enabled. Default: false.\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the height of the component. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"hideUsers\", \"name\": \"Hide Users\", \"types\": \"Boolean\", \"description\": \"Determines whether users will be displayed. Default: false.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### User, group, and user and group browser components comparison\n \n The user and group browser components create Miller-columns-style browsers that allow users to select a user or group while browsing through a group membership tree.\n \n ![screenshot of a group browser expanded](images/Group_Browsers_Main_Image.png){:.screenshot}\n \n The three group membership browsing components are:\n \n - [User Browser](User_Browser_Components.md)\n - Group Browser\n - [User and Group Browser](User_and_Group_Browser_Components.md)\n \n Similar to the user and group picker fields, these three components appear the same but differ in what they allow to be selected. Depending on whether users, groups, or users and groups should be selected, choose the group browser, user browser, or user and group browser, respectively. If the interface is only for browsing, use the  group browser, as it is the only browser that can be configured to show only groups and not users.\n \n To learn how to use these components, see the examples listed below:\n \n - [Example Interfaces for Group Browser Components](browser_examples.md)\n   - [Navigation & the Initial Group](browser_examples.md#navigation-&-the-initial-group)\n   - [Selection for More Information](browser_examples.md#selection-for-more-information)\n   - [Selection for Picking](browser_examples.md#selection-for-picking)\n \n ### Saving, selecting, and displaying values\n \n - If an initial group is not specified, only the *label*, *tooltip*, and *instructions* will be displayed.\n - The group browser is the only browser of the three that allows users to be hidden. For groups with many user members, hiding users can improve performance.\n - Click a selected group to deselect the value. When a group is deselected, a null value is saved.\n - To make the selection required for submission or display validation messages based on the selection, [pair the browser with a picker](browser_examples.md#selection-for-picking) or other component.\n \n ### Using the pathValue and pathSaveInto parameters\n \n - Because groups can appear in multiple places in the browser at one time, a group only appears as selected if it is present in the *pathValue* array.\n - When a group is selected, the variables in *selectionSaveInto* are updated after the variables in *pathSaveInto*. This means that if a variable is updated in both saves, it will be updated to the value assigned in the *selectionSaveInto* when a group is selected.\n - When the component is read-only, the variables in *selectionSaveInto* are not updated when a group is clicked. However, if the *selectionValue* is set, a group can still be displayed as selected. *pathSaveInto* still updates as normal.\n - A group can only be deselected if present in the *pathValue*.\n - The first group in the *pathValue* must be a member of the initial group. Each subsequent group in the *pathValue* must be a member of the group that comes before it in the array. Otherwise, an error will occur.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Using group browsers with picker fields\n \n ```sail \n a!localVariables(\n   local!initialGroup,\n   /* Reset the path value each time you change the initial group */\n   local!pathValue: a!refreshVariable(\n     value: {},\n     refreshOnVarChange: local!initialGroup\n   ),\n   local!selectionValue,\n   local!hideUsers,\n   local!readOnly,\n   {\n       a!sectionLayout(\n         label:\"Controls\",\n         contents: a!columnsLayout(\n           columns: {\n             a!columnLayout(\n               contents: {\n                 a!pickerFieldGroups(\n                   label: \"Initial Group\",\n                   maxSelections: 1,\n                   value: local!initialGroup,\n                   saveInto: local!initialGroup\n                 )\n               }\n             ),\n             a!columnLayout(\n               contents: {\n                 a!checkboxField(\n                   labelPosition: \"COLLAPSED\",\n                   choiceLabels: {\"Read-only\"},\n                   choiceValues: {true},\n                   value: local!readOnly,\n                   saveInto: local!readOnly\n                 ),\n                 a!checkboxField(\n                   labelPosition: \"COLLAPSED\",\n                   choiceLabels: {\"Hide Users\"},\n                   choiceValues: {true},\n                   value: local!hideUsers,\n                   saveInto: local!hideUsers\n                 )\n               }\n             )\n           }\n         )\n       ),\n       a!sectionLayout(\n         label:\"Component\",\n         contents: {\n           a!groupBrowserFieldColumns(\n             label: \"Group Browser\",\n             rootGroup: local!initialGroup,\n             pathValue: local!pathValue,\n             pathSaveInto: local!pathValue,\n             selectionValue: local!selectionValue,\n             selectionSaveInto: local!selectionValue,\n             readOnly: local!readOnly,\n             hideUsers: local!hideUsers\n           )\n         }\n       ),\n       a!sectionLayout(\n         label: \"Selection & Path\",\n         contents: {\n           a!pickerFieldGroups(\n             label: \"Navigation Path\",\n             instructions: \"Represents the current navigation from the rootGroup. Changing this could cause errors in the interface.\",\n             value: local!pathValue,\n             saveInto: local!pathValue\n           ),\n           a!pickerFieldGroups(\n             label: \"Selected Group\",\n             instructions: \"The selected group only appears as selected if contained in the pathValue.\",\n             value: local!selectionValue,\n             saveInto: local!selectionValue\n           )\n         }\n       )\n   }\n )\n ```"}, {"doc": "Multiple_Dropdown_By_Index_Component.md", "content": "---\n layout: function\n title: Multiple Dropdown By Index Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a list of choices for the user to select multiple items and saves\n   the indices of the selected choices.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!multipleDropdownFieldByIndex\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty.\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: value\n   name: Selected Indices\n   types: List of Number (Integer)\n   description: Indices of choices to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Selection To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice indexes when\n     the user changes the selections. Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md)\n     for more information about how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: searchDisplay\n   name: Search Display\n   types: Text\n   description: 'Determines when a search box displays above the options. Valid values:\n     `\"AUTO\"` (default), `\"ON\"`, `\"OFF\"`. When set to `\"AUTO\"`, the search box displays\n     if there are more than 11 options.\n \n     '\n reftype: sailcomponent\n scdisplayname: Multiple Dropdown By Index\n space: sail_component\n ---\n \n ## Function\n \n function name: a!multipleDropdownFieldByIndex \n  function syntax: a!multipleDropdownFieldByIndex (label,labelPosition,instructions,required,disabled,placeholder,choiceLabels,value,validations,saveInto,validationGroup,requiredMessage,helpTooltip,accessibilityText,showWhen,searchDisplay)\n \n Displays a list of choices for the user to select multiple items and saves the indices of the selected choices.  To save a value instead of the index, use a [multiple dropdown component](Multiple_Dropdown_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty.\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"value\", \"name\": \"Selected Indices\", \"types\": \"List of Number (Integer)\", \"description\": \"Indices of choices to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice indexes when the user changes the selections. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md) for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"searchDisplay\", \"name\": \"Search Display\", \"types\": \"Text\", \"description\": \"Determines when a search box displays above the options. Valid values: `\\\"AUTO\\\"` (default), `\\\"ON\\\"`, `\\\"OFF\\\"`. When set to `\\\"AUTO\\\"`, the search box displays if there are more than 11 options.\\n\"}]\n \n ## Usage considerations\n \n ### Using the selectedIndices parameter \n \n - The indices passed to the *selectedIndices* parameter display as selected by default. If null is passed to *selectedIndices*, none of the options are selected. However, if a list is passed to *selectedIndices*, it cannot contain a null value.\n - Choice index numbers start at 1. Indices passed *selectedIndices* cannot be less than 1 or greater than the length of the *choiceLabels* array.\n - If a single item is selected, the system saves a single-item array.\n \n ### Using the choiceLabels parameters\n \n - Options display in the same order as defined in the *choiceLabels* parameter. The *choiceLabels* argument cannot be null.\n \n ### Saving and clearing values\n \n - If no selection is made or the selection is cleared, the system saves a null value into the component's *Save Selection To* field.\n - Users can always clear the value using the `x` icon on web or the `Clear` link on the mobile application.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Multiple dropdown by index with initial values \n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: { 1, 3 },\n   a!multipleDropdownFieldByIndex(\n     label: \"Language\",\n     instructions: \"In which language(s) are you most proficient?\",\n     choiceLabels: { \"English\", \"Spanish\", \"French\", \"German\" },\n     value: local!language,\n     saveInto: local!language\n   )\n )\n {% endsailbox %}"}, {"doc": "Checkbox_By_Index_Component.md", "content": "---\n layout: function\n title: Checkbox By Index Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a limited set of choices from which the user may select none, one,\n   or many items and saves the indices of the selected choices.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!checkboxFieldByIndex\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: value\n   name: Display Value\n   types: List of Number (Integer)\n   description: Indices of choices to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice indexes when\n     the user changes the selections. Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of choice labels. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: choiceLayout\n   name: Choice Layout\n   types: Text\n   description: 'Determines the layout. Valid values include `\"STACKED\"` (default)\n     to display the choices one on top of another and `\"COMPACT\"` to display the choices\n     side-by-side.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: choiceStyle\n   name: Choice Style\n   types: Text\n   description: 'Determines how the choices should be displayed on the interface. Valid\n     values: `\"STANDARD\"` (default), `\"CARDS\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Checkbox By Index\n space: sail_component\n ---\n \n ## Function\n \n function name: a!checkboxFieldByIndex \n  function syntax: a!checkboxFieldByIndex (label,instructions,required,disabled,choiceLabels,value,validations,saveInto,validationGroup,requiredMessage,align,labelPosition,helpTooltip,choiceLayout,accessibilityText,showWhen,choiceStyle)\n \n Displays a limited set of choices from which the user may select none, one, or many items and saves the indices of the selected choices. To save a value instead of an index, use [checkboxes](Checkbox_Component.md). This component is not available from the interface component picker in the design view.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Number (Integer)\", \"description\": \"Indices of choices to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice indexes when the user changes the selections. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of choice labels. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"choiceLayout\", \"name\": \"Choice Layout\", \"types\": \"Text\", \"description\": \"Determines the layout. Valid values include `\\\"STACKED\\\"` (default) to display the choices one on top of another and `\\\"COMPACT\\\"` to display the choices side-by-side.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"choiceStyle\", \"name\": \"Choice Style\", \"types\": \"Text\", \"description\": \"Determines how the choices should be displayed on the interface. Valid values: `\\\"STANDARD\\\"` (default), `\\\"CARDS\\\"`.\\n\"}]\n \n ## Usage Considerations\n \n ### Saving values \n \n - If a single item is selected, the system saves a single-item array.\n - If no selection is made, the system saves a null value into the component's *saveInto* parameter. If a single item is selected, the system saves a single-item array.\n \n ### Using the choiceLabels and choiceLayout parameters\n \n - Choices display in the same order as defined in the *choiceLabels* parameter. The *choiceLabels* argument cannot be null.\n - The `\"COMPACT\"` option for *choiceLayout* should only be used for checkboxes with short choice labels, such as \"Yes\", \"No\", or \"Maybe\". When using the `\"COMPACT\"` option, labels with text longer than two lines will be truncated. \n - For long labels, use the `\"STACKED\"` option for *choiceLayout*."}, {"doc": "Encrypted_Text_Component.md", "content": "---\n layout: function\n title: Encrypted Text Component\n category: function_page\n compatibility: -crf, -portal\n excerpt: Allows entry of a single line of text that is encrypted when saved into a\n   variable. The value remains encrypted while on the server and is only decrypted\n   when displayed in the component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!encryptedTextField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Decrypted Text\n   description: Text to display in the text field.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the encrypted text when\n     the user changes the field.\n - keyword: refreshAfter\n   name: Refresh After\n   types: Text\n   description: 'Determines when the interface is refreshed with the saved value from\n     the barcode field. Valid values are `\"KEYPRESS\"` to refresh after every character\n     typed into the field and `\"UNFOCUS\"` (the default value) to refresh when the user\n     deselects the field after changing its value.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of text value. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: masked\n   name: Masked\n   types: Boolean\n   description: 'Determines if the value is obscured from view. Default: false.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: inputPurpose\n   name: Input Purpose\n   types: Text\n   description: 'Indicates the intent of input for accessibility improvements, like\n     autocomplete, used by browsers and assistive technologies. Valid values are `\"NAME\"`,\n     `\"EMAIL\"`, `\"PHONE_NUMBER\"`, `\"STREET_ADDRESS\"`, `\"POSTAL_CODE\"`, `\"CREDIT_CARD_NUMBER\"`,\n     and `\"OFF\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Encrypted Text\n space: sail_component\n ---\n \n ## Function\n \n function name: a!encryptedTextField \n  function syntax: a!encryptedTextField (label,instructions,required,readOnly,disabled,value,saveInto,refreshAfter,validationGroup,requiredMessage,align,labelPosition,placeholder,helpTooltip,masked,accessibilityText,showWhen,inputPurpose)\n \n Allows entry of a single line of text that is encrypted when saved into a variable. The value remains encrypted while on the server and is only decrypted when displayed in the component.\n \n The entered value is encrypted before being stored in the variable specified by the *Save Input To* parameter. The *Display Value* parameter is decrypted just before being displayed. The value remains encrypted when stored on disk.\n \n **See Also:** [Encrypted Text Data Type](Appian_Data_Types.md#encrypted-text), [Text](Text_Component.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Decrypted Text\", \"description\": \"Text to display in the text field.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the encrypted text when the user changes the field.\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"Text\", \"description\": \"Determines when the interface is refreshed with the saved value from the barcode field. Valid values are `\\\"KEYPRESS\\\"` to refresh after every character typed into the field and `\\\"UNFOCUS\\\"` (the default value) to refresh when the user deselects the field after changing its value.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of text value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"masked\", \"name\": \"Masked\", \"types\": \"Boolean\", \"description\": \"Determines if the value is obscured from view. Default: false.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"inputPurpose\", \"name\": \"Input Purpose\", \"types\": \"Text\", \"description\": \"Indicates the intent of input for accessibility improvements, like autocomplete, used by browsers and assistive technologies. Valid values are `\\\"NAME\\\"`, `\\\"EMAIL\\\"`, `\\\"PHONE_NUMBER\\\"`, `\\\"STREET_ADDRESS\\\"`, `\\\"POSTAL_CODE\\\"`, `\\\"CREDIT_CARD_NUMBER\\\"`, and `\\\"OFF\\\"`.\\n\"}]\n \n ## Usage considerations\n \n ### Using validations\n \n - Since the value is encrypted before it can be acted upon by a validation expression, no validation beyond checking for requiredness is possible with this component. For example, it is not possible to write an expression that validates that an id number matches the form `xxx-xx-xxxx`, nor is it possible to compare to values of type Encrypted Text to determine if they are equal.\n \n ### Accessing rule input values\n \n - When creating an interface that uses this component to save into an rule input of type Encrypted Text, the value of that input is not displayed inline in the Data pane. To access the value, click `[Encrypted Text]` in the value column.\n \n ### Appearance & placeholder text\n \n - This component has the same appearance as the text component.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Display values & data types\n \n - The variable given as the *value* parameter and the *saveInto* parameter must be of type Encrypted Text.\n   - Variables declared as `a!localVariables()` are valid. \n   - Literal values or variables of other types are not valid.\n - The value given to the *Display Value* parameter cannot be modified by an expression that expects Text because Encrypted Text is a different [data type](Appian_Data_Types.md#encrypted-text). \n   - No modification to the user input before storing it into the *Save Input To* variable is possible for the same reason.\n \n ### Using the inputPurpose parameter\n \n - When using *inputPurpose*, there is no visible change in the form factor preview.\n - If *inputPurpose* is set to `\"OFF\"`, autocomplete may be disabled depending on your browser settings. The default behavior allows for autocomplete, but does not require you to specify inputs.\n - *inputPurpose* is not supported if the *masked* parameter is set to `true`. \n \n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Encrypting and decrypting a value from a user\n \n {% sailbox 520 %}\n a!localVariables(\n   local!secret,\n   {\n     a!columnsLayout(\n       columns: {\n         a!columnLayout(\n           contents: {\n             a!encryptedTextField(\n               label: \"Input\",\n               instructions: \"Enter a secret here\",\n               masked: true,\n               value: local!secret,\n               saveInto: local!secret,\n               refreshAfter: \"KEYPRESS\"\n             )\n           }\n         ),\n         a!columnLayout(\n           contents: {\n             a!encryptedTextField(\n               label: \"Output\",\n               instructions: \"The value is displayed here\",\n               value: local!secret,\n               readOnly: true\n             )\n           }\n         )\n       }\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Signature_Component.md", "content": "---\n layout: function\n title: Signature Component\n category: function_page\n compatibility: -crf\n excerpt: Allows users to capture and save a .png signature file. To upload signatures\n   outside of a [start form](process-model-object.md#process-start-form-tab) or [task](Tasks.html),\n   use [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md) in the *saveInto*\n   parameter of a submit [button](Button_Component.md) or [link](Link_Component.md).\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!signatureField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: target\n   name: Target Folder\n   types: Document or Folder\n   description: Determines the eventual location of the saved signature file.\n - keyword: fileName\n   name: File Name\n   types: Text\n   description: 'Determines the name for the signature file. When not provided, the\n     timestamp will be used.\n \n     '\n - keyword: fileDescription\n   name: File Description\n   types: Text\n   description: 'Determines the description for the signature file. When not provided,\n     the description of the new file is empty.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Document\n   description: The signature file associated with this field.\n - keyword: saveInto\n   name: Save Input To\n   types: Save\n   description: 'Variable that is updated with the signature file when the user saves\n     a signature. Removing a signature file removes the document and saves a null.\n     Use `a!save()` to save a modified or alternative value to a variable.\n \n     '\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: Custom message to display when the value of the field is required but\n     not provided.\n - keyword: buttonStyle\n   name: Button Style\n   types: Text\n   description: 'Determines the style of the signature button. Valid values: `\"PRIMARY\"`,\n     `\"SECONDARY\"` (default), `\"STANDARD\"`, `\"LINK\"`.\n \n     '\n - keyword: buttonSize\n   name: Button Size\n   types: Text\n   description: 'Determines the size of the signature button. Valid values: `\"SMALL\"`\n     (default), `\"STANDARD\"`, `\"LARGE\"`.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. When a signature is present in this state, it may not be deleted.\n     Default: false.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Signature\n space: sail_component\n ---\n \n ## Function\n \n function name: a!signatureField \n  function syntax: a!signatureField (label,labelPosition,instructions,helpTooltip,target,fileName,fileDescription,value,saveInto,required,requiredMessage,buttonStyle,buttonSize,readOnly,disabled,validationGroup,accessibilityText,showWhen)\n \n Allows users to capture and save a .png signature file. To upload signatures outside of a [start form](process-model-object.md#process-start-form-tab) or [task](Tasks.html), use [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md) in the *saveInto* parameter of a submit [button](Button_Component.md) or [link](Link_Component.md).\n \n The signature field cannot upload multiple signature files or a pre-existing signature file.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"target\", \"name\": \"Target Folder\", \"types\": \"Document or Folder\", \"description\": \"Determines the eventual location of the saved signature file.\"}, {\"keyword\": \"fileName\", \"name\": \"File Name\", \"types\": \"Text\", \"description\": \"Determines the name for the signature file. When not provided, the timestamp will be used.\\n\"}, {\"keyword\": \"fileDescription\", \"name\": \"File Description\", \"types\": \"Text\", \"description\": \"Determines the description for the signature file. When not provided, the description of the new file is empty.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Document\", \"description\": \"The signature file associated with this field.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"Save\", \"description\": \"Variable that is updated with the signature file when the user saves a signature. Removing a signature file removes the document and saves a null. Use `a!save()` to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the value of the field is required but not provided.\"}, {\"keyword\": \"buttonStyle\", \"name\": \"Button Style\", \"types\": \"Text\", \"description\": \"Determines the style of the signature button. Valid values: `\\\"PRIMARY\\\"`, `\\\"SECONDARY\\\"` (default), `\\\"STANDARD\\\"`, `\\\"LINK\\\"`.\\n\"}, {\"keyword\": \"buttonSize\", \"name\": \"Button Size\", \"types\": \"Text\", \"description\": \"Determines the size of the signature button. Valid values: `\\\"SMALL\\\"` (default), `\\\"STANDARD\\\"`, `\\\"LARGE\\\"`.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. When a signature is present in this state, it may not be deleted. Default: false.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Submitting the signature\n \n After a user draws their signature, it is saved to a temporary folder. It is not saved to the target folder until it is submitted.\n \n In start forms and tasks, on the button used to submit the form, make sure that the *submit* parameter set to `true`. When this button is clicked, the signature will be saved to the target folder.\n \n Outside of start forms and tasks, use `a!submitUploadedFiles()` in the *saveInto* parameter of a button or link. This button or link could be used to submit the signature, as in [this a!submitUploadedFiles() example](fnc_system_a_submituploadedfiles.md#using-the-documents-parameter-with-more-than-one-file-upload-component), or the entire form, as in [this example](#signature-upload-outside-of-a-start-form-or-task). When this button is clicked, the signature will be saved to the target folder.\n \n ### Give end users Editor permissions to the target\n \n In order to submit a signature, users must have at least **Editor** permissions to the target folder or document. For portals, give the [portal service account](portals-service-accounts.md#required-permissions-for-portal-service-accounts) **Editor** permissions to the target folder or document.\n \n Any issue with creating or updating the target folder or document will cancel the signature submission and display an error.\n \n ### Avoid saving unnecessary signatures\n \n #### In a start form or task\n \n For a start form or task, both the cancel and submit buttons will usually have the *submit* parameter set to `true`. As soon as one of these buttons are clicked, any signature that has been drawn will be saved to its destination.\n \n To avoid saving a signature from a canceled form, configure the [cancel flow](Process_Modeling_Tutorial.md#add-a-cancel-flow) in the process model to [delete](Delete_Document_Smart_Service.md) the unnecessary signature file.\n \n #### Outside of a start form or task\n \n If you are using the signature component outside of a start form or task, use `a!submitUploadedFiles()` in the *saveInto* parameter of a button or link. Do not use it in the signature component's *saveinto* parameter. This ensures that the signature is only saved to the target when the user is ready to submit it.\n \n See [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md#only-use-this-function-in-the-saveinto-parameter-of-a-button-or-link) for more information.\n \n ### For portals, test the signature upload in a published portal\n \n To make sure signature files will be uploaded correctly in a portal, publish the portal and test it on the portal website. The signature may seem to submit correctly when you test it in the interface object, but it may not work in the portal itself. For example, if the portal service account doesn't have **Editor** permissions to the target folder, you will see an error in the portal, but not in the interface object.\n \n See [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.html#testing-and-troubleshooting-asubmituploadedfiles-in-portals) for more information on testing and troubleshooting signature uploads in portals.\n \n ### Saving a task as a draft with a signature\n \n If a user has uploaded a signature to a task, they won't be able to save the task as a draft unless it is an [offline-enabled task](enable-offline-actions-and-tasks.md) that they are viewing on Appian Mobile. They can remove the signature to save the task as a draft.\n \n ### Signatures are stored as temporary documents until submission\n \n Between drawing the signature and submitting it, the signature file is an inactive temporary document and not accessible.\n \n If a signature is uploaded but never submitted, the temporary file is automatically deleted after 30 days.\n \n ### File names\n \n By default, the signature file uses the time stamp of when the signature was captured as a file name. You can define a custom file name in the *fileName* parameter. Check out the [Signature upload in a start form or task](#signature-upload-in-a-start-form-or-task) example to see a custom file name in use.\n \n If any of the following characters appear in a signature's file name, they are replaced by underscores: `\\ / \" ; : | ? ' < > *`.\n \n ## Examples\n \n *Copy and paste an example into an interface object in **EXPRESSION MODE** to see it displayed.*\n \n ### Signature upload in a start form or task\n \n This example shows how to use the signature component in an interface that will be used in a [start form](process-model-object.md#process-start-form-tab) or [task](Tasks.html).\n \n Keep in mind that if you don't use this interface in a start form or task, on the submit button, you would need to replace `submit: true` with `saveInto: a!submitUploadedFiles()`. See [Signature upload outside of a start form or task](#signature-upload-outside-of-a-start-form-or-task) for more information.\n \n ```sail\n a!localVariables(\n   local!signature,\n   a!formLayout(\n     label: \"Signature Form\",\n     instructions: \"Use this example in a start form or task\",\n     contents: {\n       a!signatureField(\n         label: \"Signature\",\n         labelPosition: \"ABOVE\",\n         /* The file name and description are used for the uploaded signature file */\n         fileName: loggedInUser() & \"_signature_\" & today(),\n         fileDescription: loggedInUser() & \"'s signature on \" & today(),\n         /* Replace this with a constant of type Folder in your environment */\n         target: cons!FOLDER_CONSTANT,\n         value: local!signature,\n         saveInto: local!signature\n       )\n     },\n     buttons: a!buttonLayout(\n       primaryButtons: {\n         a!buttonWidget(\n           label: \"Submit\",\n           style: \"PRIMARY\",\n           loadingIndicator: true,\n           /* If you don't set the submit parameter to true, the signature will not be uploaded */\n           submit: true\n         )\n       },\n       secondaryButtons: {\n         a!buttonWidget(\n           label: \"Cancel\",\n           value: true,\n           saveInto: {},\n           submit: true,\n           style: \"NORMAL\",\n           validate: false\n         )\n       }\n     )\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot showing the signature component in a form](images/signature_example.png){:.screenshot style=\"width:65%\"}\n \n ### Signature upload outside of a start form or task\n \n This example shows how to use the signature component outside of a start form or task using `a!submitUploadedFiles()` in the *saveInto* parameter of a button. See [a!submitUploadedFiles()](fnc_system_a_submituploadedfiles.md#examples) for more examples.\n \n Keep in mind that if you use this interface in a start form or task, on the submit button you would need to replace `saveInto: a!submitUploadedFiles()` with `submit: true`. See [Signature upload in a start form or task](#signature-upload-in-a-start-form-or-task) for more information.\n \n ```sail\n a!localVariables(\n   local!signature,\n   local!submissionSuccessful,\n   local!errorCode,\n   {\n     a!signatureField(\n       label: \"Signature\",\n       value: local!signature,\n       saveInto: local!signature,\n       /* Replace this with a constant of type Folder in your environment */\n       target: cons!FOLDER_CONSTANT,\n     ),\n     a!buttonArrayLayout(\n       buttons: {\n         a!buttonWidget(\n           label: \"Submit\",\n           style: \"PRIMARY\",\n           /* If you don't use a!submitUploadedFiles(), the signature will not be uploaded */\n           saveInto: a!submitUploadedFiles(\n             onSuccess: a!save(local!submissionSuccessful, true),\n             onError: {\n               a!save(local!submissionSuccessful, false),\n               a!save(local!errorCode, fv!error)\n             }\n           )\n         )\n       },\n       align: \"END\"\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![Signature component with a submit button](images/signature_submituploadedfiles.png){:.screenshot style=\"width:65%\"}"}, {"doc": "Document_Link_Component.md", "content": "---\n layout: function\n title: Document Download Link\n category: function_page\n compatibility: -crf\n excerpt: Defines a link used to download a document.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!documentDownloadLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text displayed as the link name the user clicks on.\n - keyword: document\n   name: Document\n   types: Document\n   description: The ID of the document that downloads when the user clicks the link.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Document Download Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!documentDownloadLink \n  function syntax: a!documentDownloadLink (label,document,showWhen)\n \n Defines a link used to download a document. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [Link](Link_Component.md)\n - [Read-Only Grid](Paging_Grid_Component.md)\n - [Images](Image_Component.md)\n - [Folder and Document Management](folder-and-document-management.md)\n - [Buttons and links design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text displayed as the link name the user clicks on.\"}, {\"keyword\": \"document\", \"name\": \"Document\", \"types\": \"Document\", \"description\": \"The ID of the document that downloads when the user clicks the link.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using document links with the link field component\n \n To display a single link or an array of links, use this component inside the [Link component](Link_Component.md). \n \n You can display the document download link in the following places:\n \n - To display a link in a grid, use inside a [Read-Only Grid Column component](Grid_Column_Component.md). \n - To add a link in a chart, use inside the [Chart Series component](Chart_Series_Component.md).\n - To add a link to an image, use inside a [document image](Document_Image_Component.md) or [web image](Web_Image_Component.md) component.\n \n \n ## Examples\n \n *Copy and paste an example into an interface object in **EXPRESSION MODE** to see it displayed.*\n \n ### Downloading files using a constant\n \n To test this example, replace `cons!myDocument` with a constant that points to a document in your environment.\n \n Note that this uses the `document()` function to access the name of the document to display in the interface.\n \n ```sail\n {\n   a!linkField(\n     label: \"Download document\",\n     labelPosition: \"ABOVE\",\n     links: {\n       a!documentDownloadLink(\n         label: document(\n           documentId: cons!myDocument,\n           property: \"name\"\n         ),\n         document: cons!myDocument\n       )\n     }\n   )\n }\n ```"}, {"doc": "Multiple_Dropdown_Component.md", "content": "---\n layout: function\n title: Multiple Dropdown Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a list of choices for the user to select multiple items and saves\n   values based on the selected choices.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!multipleDropdownField\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty.\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: choiceValues\n   name: Choice Values\n   types: List of Variant\n   description: Array of values associated with the available choices.\n - keyword: value\n   name: Selected Values\n   types: List of Variant\n   description: Values of choices to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Selection To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice values when\n     the user changes the selections.  Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md)\n     for more information about how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: searchDisplay\n   name: Search Display\n   types: Text\n   description: 'Determines when a search box displays above the options. Valid values:\n     `\"AUTO\"` (default), `\"ON\"`, `\"OFF\"`. When set to `\"AUTO\"`, the search box displays\n     if there are more than 11 options.\n \n     '\n reftype: sailcomponent\n scdisplayname: Multiple Dropdown\n space: sail_component\n ---\n \n ## Function\n \n function name: a!multipleDropdownField \n  function syntax: a!multipleDropdownField (label,instructions,required,disabled,placeholder,choiceLabels,choiceValues,value,validations,saveInto,validationGroup,requiredMessage,labelPosition,helpTooltip,accessibilityText,showWhen,searchDisplay)\n \n Displays a list of choices for the user to select multiple items and saves values based on the selected choices.\n \n If users should only select one choice, use [radio buttons](Radio_Button_Component.md) or a [dropdown](Dropdown_Component.md) component instead.\n \n If there aren't many choices and users would benefit from easily seeing them all at once, consider using [checkboxes](Checkbox_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty.\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"choiceValues\", \"name\": \"Choice Values\", \"types\": \"List of Variant\", \"description\": \"Array of values associated with the available choices.\"}, {\"keyword\": \"value\", \"name\": \"Selected Values\", \"types\": \"List of Variant\", \"description\": \"Values of choices to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Selection To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice values when the user changes the selections.  Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See [this recipe](recipe-use-validation-group-for-buttons-with-multiple-validation-rules.md) for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"searchDisplay\", \"name\": \"Search Display\", \"types\": \"Text\", \"description\": \"Determines when a search box displays above the options. Valid values: `\\\"AUTO\\\"` (default), `\\\"ON\\\"`, `\\\"OFF\\\"`. When set to `\\\"AUTO\\\"`, the search box displays if there are more than 11 options.\\n\"}]\n \n ## Usage considerations\n \n ### Using the choiceLabels and choiceValues parameters\n \n - The *Choice Labels* list and *Choice Values* list must be the same length.\n - *Choice Values* cannot contain nulls or duplicate values.\n - Choices display in the same order as defined in the *Choice Labels* parameter. The *Choice Labels* argument cannot be null.\n \n ### Selecting, saving, and clearing values\n \n - If a single item is selected, the system saves a single-item array.\n - If no selection is made or the selection is cleared, the system saves a null value into the component's *Save Selection To* field.\n - Users can always clear the value using the `x` icon on web or the `Clear` link on the mobile application.\n \n ### Dropdowns vs pickers\n \n - If you are trying to decide whether to use a dropdown with search or a [picker component](Custom_Picker_Component.md), keep in mind that the dropdown search runs client-side and the performance cost of loading options happens on initial load whereas the picker search runs server-side and the performance cost of loading options happens while the user is searching. For small sets of options, we recommend using the dropdown component.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Multiple dropdown with the first choice selected by default and search on auto\n \n Since the `searchDisplay` parameter is set to `AUTO` and the number of `choiceValues`  is less than 12, no search box will be displayed.\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: {\"en_US\", \"fr_FR\"},\n   a!multipleDropdownField(\n     label: \"Language\",\n     instructions: \"Which language(s) are you proficient in?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language,\n     searchDisplay: \"AUTO\"\n   )\n )\n {% endsailbox %}\n \n \n Since the `searchDisplay` parameter is set to `AUTO` and the number of `choiceValues`  is more than 11, a search box will be displayed.\n \n {% sailbox 600 %}\n   a!localVariables(\n       local!language: {\"en_US\", \"fr_FR\", \"zh_CN\"},\n       a!multipleDropdownField(\n         label: \"Language\",\n         instructions: \"Which language(s) are you proficient in?\",\n         choiceLabels: {\n           \"English\",\n           \"Arabic\",\n           \"Chinese (Simplified)\",\n           \"Chinese (Traditional)\",\n           \"Spanish\",\n           \"French\",\n           \"German\",\n           \"Japanese\",\n           \"Korean\",\n           \"Polish\",\n           \"Portuguese\",\n           \"Russian\"\n         },\n         choiceValues: {\n           \"en_US\",\n           \"ar\",\n           \"zh_CN\",\n           \"zh_HK\",\n           \"es_ES\",\n           \"fr_FR\",\n           \"de_DE\",\n           \"ja\",\n           \"ko\",\n           \"pl\",\n           \"pt\",\n           \"ru\"\n         },\n         value: local!language,\n         saveInto: local!language,\n         searchDisplay: \"AUTO\"\n       )\n     )\n {% endsailbox %}\n \n ### Dropdown with no choice selected by default and search on\n \n Since the `searchDisplay` parameter is set to `ON`, even though the number of `choiceValues`  is less than 12, a search box will be displayed.\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: null,\n   a!multipleDropdownField(\n     label: \"Language\",\n     instructions: \"Which language(s) are you proficient in?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language,\n     placeholder: \"Select a language\",\n     searchDisplay: \"ON\"\n   )\n )\n {% endsailbox %}"}, {"doc": "Button_Array_Layout.md", "content": "---\n layout: function\n title: Button Array Layout\n category: function_page\n compatibility: -crf\n excerpt: Displays a list of buttons in the order they are specified. Use this layout\n   for buttons within interfaces rather than for submission buttons at the bottom of\n   forms\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!buttonArrayLayout\n fncsubcat: Action\n parameters:\n - keyword: buttons\n   name: Buttons\n   types: List of ButtonWidget\n   description: Array of buttons created with a!buttonWidget().\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the button(s). Valid values: `\"START\"`, `\"CENTER\"`,\n     `\"END\"`.\n \n     '\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: 'Determines how much space is added below the buttons. Valid values:\n     `\"NONE\"`, `\"EVEN_LESS\"`, `\"LESS\"`, `\"STANDARD\"` (default), `\"MORE\"`, `\"EVEN_MORE\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n reftype: sailcomponent\n scdisplayname: Button Array Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!buttonArrayLayout \n  function syntax: a!buttonArrayLayout (buttons,showWhen,align,marginBelow,accessibilityText)\n \n Displays a list of buttons in the order they are specified. Use this layout for buttons within interfaces rather than for submission buttons at the bottom of forms This layout cannot be selected from the interface component picker in the design view.\n \n **See also**: [Button design guidance](sail/ux-buttons.md)\n \n ## Parameters\n \n [{\"keyword\": \"buttons\", \"name\": \"Buttons\", \"types\": \"List of ButtonWidget\", \"description\": \"Array of buttons created with a!buttonWidget().\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the button(s). Valid values: `\\\"START\\\"`, `\\\"CENTER\\\"`, `\\\"END\\\"`.\\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the buttons. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}]\n \n ## Usage considerations\n \n ### Buttons formatting\n \n - If you pass one button to *Buttons*, it renders right-justified. If you pass more than one button, they render left-justified.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Buttons in a toolbar\n \n ```sail \n a!buttonArrayLayout(\n   align: \"START\",\n   buttons: {\n     a!buttonWidget(\n       label: \"Refresh\",\n       size: \"SMALL\",\n       style: \"SECONDARY\"\n     ),\n     a!buttonWidget(\n       label: \"Edit\",\n       size: \"SMALL\",\n       style: \"SECONDARY\"\n     ),\n     a!buttonWidget(\n       label: \"Add Item\",\n       size: \"SMALL\",\n       style: \"SECONDARY\"\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of three buttons in a toolbar](images/buttons-in-toolbar.png){:.screenshot}\n \n ### Button with no margin below\n \n ```sail\n {\n   a!sideBySideLayout(\n     items: {\n       a!sideBySideItem(\n         item: a!textField(\n           labelPosition: \"COLLAPSED\"\n         )\n       ),\n       a!sideBySideItem(\n         width: \"MINIMIZE\",\n         item: a!buttonArrayLayout(\n           marginBelow: \"NONE\",\n           buttons: {\n             a!buttonWidget(\n               label: \"Test\",\n               size: \"SMALL\",\n               style: \"SECONDARY\"\n             )\n           }\n         )\n       )\n     }\n   )\n }\n ```\n \n Displays the following:\n \n ![screenshot of a text field with a button beside it](images/button-in-sbs.png){:.screenshot}"}, {"doc": "Styled_Icon_Component.md", "content": "---\n layout: function\n title: Styled Icon\n category: function_page\n compatibility: -crf\n excerpt: Displays a style icon within a rich text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextIcon\n fncsubcat: Display\n parameters:\n - keyword: icon\n   name: Icon\n   types: Text\n   description: The key of the icon to display. See Available Icons below.\n - keyword: altText\n   name: Alternative Text\n   types: Text\n   description: Equivalent alternate text to display when accessibility or browser\n     compatibility issues prevent the icon from displaying.\n - keyword: caption\n   name: Caption\n   types: Text\n   description: Text to display in mouseovers.\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the icon size. Valid values: `\"STANDARD\"` (default), `\"SMALL\"`,\n     `\"MEDIUM\"`, `\"MEDIUM_PLUS\"`, `\"LARGE\"`, `\"LARGE_PLUS\"`, and `\"EXTRA_LARGE\"`.\n \n     '\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Determines the icon color. Valid values: Any hex color or `\"STANDARD\"`\n     (default), `\"ACCENT\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`, and `\"SECONDARY\"`.\n \n     '\n - keyword: link\n   name: Link\n   types: Link\n   description: \"Link that determines the behavior of the icon when clicked. Create\n     links with:\\n  - [a!authorizationLink()](authorization_link_component.md)\\n  -\n     [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n\n     \\ - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n\n     \\ - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n\n     \\ - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: linkStyle\n   name: Link Style\n   types: Text\n   description: 'Determines how the link is underlined. Valid values: `\"INLINE\"` (default),\n     `\"STANDALONE\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Styled Icon\n scsubcat: Rich_Text_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextIcon \n  function syntax: a!richTextIcon (icon,altText,caption,size,color,link,linkStyle,showWhen)\n \n Display a styled icon within a [rich text](Rich_Text_Component.md) component. Icons can be styled by configuring a color, size, or link.\n \n To show documents as images within rich text, see [Inline Image](Inline_Image_Component.md).\n \n **See also**: [Styled icon design guidance](sail/ux-styled-icons.md), [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"icon\", \"name\": \"Icon\", \"types\": \"Text\", \"description\": \"The key of the icon to display. See Available Icons below.\"}, {\"keyword\": \"altText\", \"name\": \"Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text to display when accessibility or browser compatibility issues prevent the icon from displaying.\"}, {\"keyword\": \"caption\", \"name\": \"Caption\", \"types\": \"Text\", \"description\": \"Text to display in mouseovers.\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the icon size. Valid values: `\\\"STANDARD\\\"` (default), `\\\"SMALL\\\"`, `\\\"MEDIUM\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"LARGE\\\"`, `\\\"LARGE_PLUS\\\"`, and `\\\"EXTRA_LARGE\\\"`.\\n\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Determines the icon color. Valid values: Any hex color or `\\\"STANDARD\\\"` (default), `\\\"ACCENT\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, and `\\\"SECONDARY\\\"`.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Link\", \"description\": \"Link that determines the behavior of the icon when clicked. Create links with:\\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"linkStyle\", \"name\": \"Link Style\", \"types\": \"Text\", \"description\": \"Determines how the link is underlined. Valid values: `\\\"INLINE\\\"` (default), `\\\"STANDALONE\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the icon, link, and style parameters\n \n - If *icon* is null or contains an empty array, no icon is displayed.\n - If *link* is null, the *icon* is not displayed as a link.\n - For nested rich text, if two conflicting styles are found (for example, both SMALL and LARGE), the innermost style will be displayed.\n \n ### Adding decorative icons\n \n A styled icon is considered decorative if it only serves a design purpose and does not add meaning or provide information. To meet accessibility guidelines for decorative elements, you should not include the `altText`, `caption`, or `link` parameters for a decorative icon. Appian will indicate the icon's purpose as decorative&mdash;and screen readers will skip it&mdash;when those parameters are not set and the icon is used in one of the following components:\n \n * [Button](Button_Component.md)\n * [Card choices](card-choices-component.md)\n * [Gauge](Gauge_Component.md)\n * [Rich text](Rich_Text_Component.md)\n * [Section layout](Section_Layout.md)\n * [Stamp](Stamp_Component.md)\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Linked icons within text\n \n {% sailbox 600 %} \n a!richTextDisplayField(\n   value: {\n     \"In addition to a personal statement, candidates may submit up to three \",\n     a!richTextItem(\n       text: {\n         a!richTextIcon(icon: \"picture-o\"),\n         \" Fine Art\"\n       },\n       link: a!dynamicLink()\n     ),\n     \", \",\n     a!richTextItem(\n       text: {\n         a!richTextIcon(icon: \"headphones\"),\n         \" Audio\"\n       },\n       link: a!dynamicLink()\n     ),\n     \", or \",\n     a!richTextItem(\n       text: {\n         a!richTextIcon(icon: \"video-camera\"),\n         \" Video\"\n       },\n       link: a!dynamicLink()\n     ),\n     \" media samples.\"\n   }\n )\n {% endsailbox %}\n \n \n ### Icons in a grid\n \n {% sailbox 600 %} \n a!gridLayout(\n   label: \"Today's Incidents\",\n   headerCells: {\n     a!gridLayoutHeaderCell(label: \"Type\"),\n     a!gridLayoutHeaderCell(label: \"Status\"),\n     a!gridLayoutHeaderCell(label: \"Summary\"),\n     a!gridLayoutHeaderCell(label: \"Assignee\")\n   },\n   columnConfigs: {\n     a!gridLayoutColumnConfig(width: \"ICON\"),\n     a!gridLayoutColumnConfig(width: \"ICON\")\n   },\n   rows: {\n     a!gridRowLayout(\n       contents: {\n         a!richTextDisplayField(\n           value: a!richTextIcon(\n             icon: \"wrench\",\n             color: \"#a600a6\"\n           ),\n           align: \"CENTER\"\n         ),\n         a!richTextDisplayField(\n           value: a!richTextIcon(\n             icon: \"exclamation\",\n             color: \"NEGATIVE\"\n           ),\n           align: \"CENTER\"\n         ),\n         a!textField(\n           value: \"Broken escalator in Atrium B\",\n           readOnly: true\n         ),\n         a!textField(\n           value: \"Unassigned\",\n           readOnly: true\n         )\n       }\n     ),\n     a!gridRowLayout(\n       contents: {\n         a!richTextDisplayField(\n           value: a!richTextIcon(\n             icon: \"ticket\",\n             color: \"#a600a6\"\n           ),\n           align: \"CENTER\"\n         ),\n         a!richTextDisplayField(\n           value: a!richTextIcon(\n             icon: \"arrow-right\",\n             color: \"POSITIVE\"\n           ),\n           align: \"CENTER\"\n         ),\n         a!textField(\n           value: \"Ticketing queue back-up\",\n           readOnly: true\n         ),\n         a!textField(\n           value: \"Karen Anderson\",\n           readOnly: true\n         )\n       }\n     ),\n     a!gridRowLayout(\n       contents: {\n         a!richTextDisplayField(\n           value: a!richTextIcon(\n             icon: \"video-camera\",\n             color: \"#a600a6\"\n           ),\n           align: \"CENTER\"\n         ),\n         a!richTextDisplayField(\n           value: a!richTextIcon(\n             icon: \"check\",\n             color: \"POSITIVE\"\n           ),\n           align: \"CENTER\"\n         ),\n         a!textField(\n           value: \"Faulty security camera\",\n           readOnly: true\n         ),\n         a!textField(\n           value: \"Amy Lee\",\n           readOnly: true\n         )\n       }\n     )\n   },\n   rowHeader: 3\n )\n {% endsailbox %}\n \n \n ### Standalone links\n \n {% sailbox 600 %} \n a!richTextDisplayField(\n   value: {\n     a!richTextItem(\n       text: {\n         a!richTextIcon(\n           icon: \"home\"\n         ),\n         \" Home\"\n       },\n       link: a!dynamicLink(),\n       linkStyle: \"STANDALONE\"\n     ),\n     char(10),\n     a!richTextItem(\n       text: {\n         a!richTextIcon(\n           icon: \"check-square-o\"\n         ),\n         \" My Open Requests\"\n       },\n       link: a!dynamicLink(),\n       linkStyle: \"STANDALONE\"\n     ),\n     char(10),\n     a!richTextItem(\n       text: {\n         a!richTextIcon(\n           icon: \"file-text-o\"\n         ),\n         \" My Documents\"\n       },\n       link: a!dynamicLink(),\n       linkStyle: \"STANDALONE\"\n     )\n   }\n )\n {% endsailbox %}\n \n \n ## Available icons\n \n The following table shows all available icons. Search the table to find specific icons.\n \n [INCLUDE PAGE: Styled Icon Table](_includeLibrary/Styled_Icon_Table.md)"}, {"doc": "Document_Picker_Component.md", "content": "---\n layout: function\n title: Document Picker Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for the selection of one or more documents.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldDocuments\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n \n     '\n - keyword: folderFilter\n   name: Folder Filter\n   types: Folder\n   description: 'When present, only documents that are inside this folder and its sub-folders\n     are suggested.\n \n     '\n - keyword: value\n   name: Display Value\n   types: List of Document\n   description: Array of currently selected documents.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected documents\n     when the user selects or removes a document. Use a!save() to save a modified or\n     alternative value to a variable.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Document Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldDocuments \n  function syntax: a!pickerFieldDocuments (label,labelPosition,instructions,required,requiredMessage,readOnly,disabled,maxSelections,folderFilter,value,validations,validationGroup,saveInto,placeholder,helpTooltip,accessibilityText,showWhen)\n \n Displays an autocompleting input for the selection of one or more documents.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\\n\"}, {\"keyword\": \"folderFilter\", \"name\": \"Folder Filter\", \"types\": \"Folder\", \"description\": \"When present, only documents that are inside this folder and its sub-folders are suggested.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Document\", \"description\": \"Array of currently selected documents.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected documents when the user selects or removes a document. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Saving and displaying values and placeholders\n \n - Any nulls in the array passed into selected Documents are not displayed.\n - The component always saves an array regardless of how many selections have been made.\n - Whether placeholder text clears on focus or input varies by device and browser.\n \n ### Permissions and placeholders\n \n - The user viewing the picker must have access to view documents passed to the value. Only documents that the viewing user has permissions to see appear in the suggestions list. When *folderFilter* is not null, the viewing user must have permission to view the filtering folder for any suggestions to be made."}, {"doc": "Column_Layout.md", "content": "---\n layout: function\n title: Column Layout\n category: function_page\n compatibility: -crf\n excerpt: Displays a column that can be used within the columns layout.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!columnLayout\n fncsubcat: Layouts\n parameters:\n - keyword: contents\n   name: Contents\n   types: Any Type\n   description: Values that define the interface components for a column.\n - keyword: width\n   name: Width\n   types: Text\n   description: 'Determines the width of the column. Valid values: `\"AUTO\"` (default),\n     `\"EXTRA_NARROW\"`, `\"NARROW\"`, `\"NARROW_PLUS\"`, `\"MEDIUM\"`, `\"MEDIUM_PLUS\"`, `\"WIDE\"`,\n     `\"WIDE_PLUS\"`, `\"1X\"`, `\"2X\"`, `\"3X\"`, `\"4X\"`, `\"5X\"`, `\"6X\"`, `\"7X\"`, `\"8X\"`,\n     `\"9X\"`, `\"10X\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Column Layout\n scsubcat: Layout_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!columnLayout \n  function syntax: a!columnLayout (contents,width,showWhen)\n \n Displays a column that can be used within the [columns layout](Columns_Layout.md).\n \n **See also**:\n \n - [Columns](Columns_Layout.md)\n - [Columns and Side By Side design guidance](sail/ux-columns-and-side-by-side.md)\n - [Columns layout design guidance](sail/ux-columns-layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type\", \"description\": \"Values that define the interface components for a column.\"}, {\"keyword\": \"width\", \"name\": \"Width\", \"types\": \"Text\", \"description\": \"Determines the width of the column. Valid values: `\\\"AUTO\\\"` (default), `\\\"EXTRA_NARROW\\\"`, `\\\"NARROW\\\"`, `\\\"NARROW_PLUS\\\"`, `\\\"MEDIUM\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"WIDE\\\"`, `\\\"WIDE_PLUS\\\"`, `\\\"1X\\\"`, `\\\"2X\\\"`, `\\\"3X\\\"`, `\\\"4X\\\"`, `\\\"5X\\\"`, `\\\"6X\\\"`, `\\\"7X\\\"`, `\\\"8X\\\"`, `\\\"9X\\\"`, `\\\"10X\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the contents parameter\n \n - The following layouts are not supported in the contents parameter: form layout, header content layout, and column layout. All other layouts can be used, including columns layout.\n \n ## Column widths\n \n Use the *width* parameter to set the width of each column. See the [SAIL Design System](sail/ux-columns-layout.md#choosing-between-column-width-types) for guidance on choosing between column widths.\n \n Valid values are:\n \n - \"AUTO\" (Default)\n - Relative widths: \"1X\", \"2X\", \"3X\", \"4X\", \"5X\", \"6X\", \"7X\", \"8X\", \"9X\", \"10X\".\n - Fixed widths: \"EXTRA_NARROW\", \"NARROW\", \"NARROW_PLUS\", \"MEDIUM\", \"MEDIUM_PLUS\", \"WIDE\", \"WIDE_PLUS\".\n \n ### Auto width\n \n The \"AUTO\" column width distributes the space evenly across all columns. As you resize the screen, the columns will remain distributed evenly.\n \n ![resizing auto column width gif](images/ux_pages/columns_layout_auto_resize.gif){:.screenshot}\n \n ### Relative widths\n \n Relative column widths are always proportional to other columns in the same columns layout. If there is only one column in a columns layout and it is set it to a relative width, it would take up the entire width because there isn't another column to compare it to.\n \n Relative widths are always a multiple of \"1X\". If you have two columns and one uses \"2X\" and the other uses \"3X\", you could imagine the columns being split into five sections. The \"2X\" column takes up 2/5 of the space, and the \"3X\" column takes up 3/5 of the space.\n \n ![relative column width example](images/ux_pages/columns_layout_relative.png){:.screenshot}\n \n As you resize the screen, columns with a relative width will maintain the same proportions.\n \n ![resizing relative column widths gif](images/ux_pages/columns_layout_relative_resize.gif){:.screenshot}\n \n ### Fixed widths\n \n As long as they have enough room on the screen, fixed column widths will always maintain the same pixel width.\n \n {% include zoompic.html url=\"images/ux_pages/columns_layout_fixed.png\" alt=\"fixed column width example\" %}\n \n If their combined width takes up more than the width of the screen, they will size down appropriately.\n \n <div class=\"padded_image\">\n   <img src=\"images/ux_pages/columns_layout_fixed_resize.gif\" class=\"screenshot\"/>\n     <p><em>In this example, the \"WIDE_PLUS\" columns will almost always be wider than the \"MEDIUM\" column. But none of them will be as wide as their default width when the screen is wide enough to use their full width.</em></p>\n </div>\n \n ### Combining column width types\n \n #### Fixed and relative column widths\n \n If you use fixed column widths and relative column widths in the same columns layout, the fixed width applies first. The relative columns split the remaining space.\n \n <div class=\"padded_image\">\n   <img src=\"images/ux_pages/columns_layout_fixed_relative.png\" class=\"screenshot\"/>\n     <p><em>In this example, the \"NARROW_PLUS\" and \"MEDIUM\" columns will first take up the specified amount of space. The \"1X\" and \"3X\" columns will take up 1/4 and 3/4 of the remaining space, respectively.</em></p>\n </div>\n \n If the screen is resized, the fixed column widths will maintain their size for as long as possible. The relative column widths will maintain their proportion to each other in the remaining space.\n \n ![resizing fixed column width gif](images/ux_pages/columns_layout_fixed_relative_resize.gif){:.screenshot}\n \n #### Auto column widths\n \n If used with relative column widths, \"AUTO\" column widths are equal to \"1X\".\n \n If used with fixed column widths, \"AUTO\" column widths will take up the remaining space on the page.\n \n ## Examples\n \n ### Single column\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 580 %}\n a!columnLayout(\n   width: \"AUTO\",\n   contents: {\n     a!textField(\n       label: \"Customer\",\n       value: \"John Smith\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Status\",\n       value: \"Prospective\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Priority\",\n       value: \"High\",\n       readOnly: true\n     )\n   }\n )\n {% endsailbox %}\n \n ### Relative column width: aligning columns across rows\n \n This example has three columns on the top row and two columns on the bottom row. The columns on the top row each take up 1/3 of the space and the columns on the bottom take up 1/3 and 2/3 of the space.\n \n ![column layout relative width example](images/column_layout_relative_example.png){:.screenshot}\n \n To do this, create two rows with the same number of columns. Use the same relative column widths for each row. This ensures that the margins will line up.\n \n ![relative_column_width_spacing_step1.png](images/relative_column_width_spacing_step1.png){:.screenshot}\n \n Then, for the column on the top row that lines up with the longer column on the bottom row, nest an `a!columnsLayout()` to split the space into to more columns.\n \n ![relative_column_width_spacing_finalstep.png](images/relative_column_width_spacing_finalstep.png){:.screenshot}\n \n Copy and paste the example into an Appian Expression Editor to experiment with it.\n \n ```sail\n {a!columnsLayout(\n     columns: {\n       a!columnLayout(\n         width: \"1X\",\n         contents: {\n           a!columnsLayout(\n             columns: {\n               a!columnLayout(\n                 contents: {\n                   a!cardLayout(\n                     height: \"AUTO\",\n                     style: \"NONE\",\n                     marginBelow: \"STANDARD\",\n                     contents: {\n                       a!richTextDisplayField(\n                         labelPosition: \"COLLAPSED\",\n                         value: {\n                           a!richTextItem(text: \"Energy Consumption\", color: \"SECONDARY\"),\n                           char(10),\n                           a!richTextItem(text: \"3,415\", size: \"LARGE\", style: \"STRONG\")\n                         }\n                       )\n                     }\n                   )\n                 }\n               )\n             }\n           )\n         }\n       ),\n       a!columnLayout(\n         width: \"2X\",\n         contents: {\n           a!columnsLayout(\n             columns: {\n               a!columnLayout(\n                 contents: {\n                   a!cardLayout(\n                     height: \"AUTO\",\n                     style: \"NONE\",\n                     marginBelow: \"STANDARD\",\n                     contents: {\n                       a!richTextDisplayField(\n                         labelPosition: \"COLLAPSED\",\n                         value: {\n                           a!richTextItem(text: \"Transportation\", color: \"SECONDARY\"),\n                           char(10),\n                           a!richTextItem(text: \"3,415\", size: \"LARGE\", style: \"STRONG\"\n                           )\n                         }\n                       )\n                     }\n                   )\n                 }\n               ),\n               a!columnLayout(\n                 contents: {\n                   a!cardLayout(\n                     height: \"AUTO\",\n                     style: \"NONE\",\n                     marginBelow: \"STANDARD\",\n                     contents: {\n                       a!richTextDisplayField(\n                         labelPosition: \"COLLAPSED\",\n                         value: {\n                           a!richTextItem(text: \"Waste\", color: \"SECONDARY\"),\n                           char(10),\n                           a!richTextItem(text: \"3,415\", size: \"LARGE\", style: \"STRONG\")\n                         }\n                       )\n                     }\n                   )\n                 }\n               )\n             }\n           )\n         }\n       )\n     }\n   ),\n   a!columnsLayout(\n     columns: {\n       a!columnLayout(\n         width: \"1X\",\n         contents: {\n           a!columnsLayout(\n             columns: {\n               a!columnLayout(\n                 contents: {\n                   a!cardLayout(\n                     height: \"AUTO\",\n                     style: \"NONE\",\n                     marginBelow: \"STANDARD\",\n                     contents: {\n                       a!pieChartField(\n                         label: \"Emissions by Category\",\n                         labelPosition: \"ABOVE\",\n                         series: {\n                           a!chartSeries(label: \"Energy\", data: 314),\n                           a!chartSeries(label: \"Transportation\", data: 219),\n                           a!chartSeries(label: \"Waste\", data: 89)\n                         },\n                         colorScheme: \"RAINFOREST\",\n                         style: \"DONUT\",\n                         seriesLabelStyle: \"ON_CHART\",\n                         height: \"MEDIUM\"\n                       )\n                     }\n                   )\n                 }\n               )\n             }\n           )\n         }\n       ),\n       a!columnLayout(\n         width: \"2X\",\n         contents: {\n           a!columnsLayout(\n             columns: {\n               a!columnLayout(\n                 contents: {\n                   a!cardLayout(\n                     height: \"AUTO\",\n                     style: \"NONE\",\n                     marginBelow: \"STANDARD\",\n                     contents: {\n                       a!areaChartField(\n                         label: \"Emissions over Time\",\n                         labelPosition: \"ABOVE\",\n                         categories: {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"},\n                         series: {\n                           a!chartSeries(\n                             label: \"Energy\",\n                             data: {29.8, 28, 24.9, 21.5, 27.4, 27.2, 22.1, 29.9, 25.6, 26.4, 23.1, 25.3}\n                           ),\n                           a!chartSeries(\n                             label: \"Transportation\",\n                             data: {15.2, 19.8, 17.1, 16.7, 18.8, 15, 19.5, 19.4, 16.9, 16.7, 15.3,16.6\n                             }\n                           ),\n                           a!chartSeries(\n                             label: \"Waste\",\n                             data: {7.1, 6.2, 7.1, 7.6, 7.9, 7.6, 6, 7.9, 6.5, 6.3, 6.6, 6.4\n                             }\n                           )\n                         },\n                         xAxisTitle: \"2021\",\n                         yAxisTitle: \"MTCO2e\",\n                         stacking: \"NONE\",\n                         showLegend: true,\n                         showTooltips: true,\n                         colorScheme: \"RAINFOREST\",\n                         height: \"MEDIUM\"\n                       )\n                     }\n                   )\n                 }\n               )\n             }\n           )\n         }\n       )\n     }\n   )\n }\n ```"}, {"doc": "bar-overlay.md", "content": "---\n layout: function\n title: Bar Overlay\n category: function_page\n compatibility: -crf\n excerpt: Displays a horizontal bar overlay for use in billboard layout.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!barOverlay\n fncsubcat: Layouts\n parameters:\n - keyword: position\n   name: Position\n   types: Text\n   description: 'Determines where the bar overlay appears. Valid values: `\"TOP\"`, `\"MIDDLE\"`,\n     `\"BOTTOM\"` (default).\n \n     '\n - keyword: contents\n   name: Contents\n   types: Any Type\n   description: 'The interface to display in the overlay. Accepts layouts and display\n     components. Supported layouts and components: Box, Button, Card, Columns, Image,\n     Link, Milestone, Progress Bar, Rich Text, Section, Side By Side.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the overlay is displayed on the interface. When\n     set to false, the overlay is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Determines the overlay style. Valid values: `\"DARK\"` (default), `\"SEMI_DARK\"`,\n     `\"NONE\"`, `\"SEMI_LIGHT\"`, `\"LIGHT\"`.\n \n     '\n - keyword: padding\n   name: Padding\n   types: Text\n   description: 'Determines the space between the overlay''s edges and its contents.\n     Valid values: `\"NONE\"`, `\"EVEN_LESS\"`, `\"LESS\"`, `\"STANDARD\"`(default), `\"MORE\"`,\n     `\"EVEN_MORE\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Bar Overlay\n scsubcat: Layout_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!barOverlay \n  function syntax: a!barOverlay (position,contents,showWhen,style,padding)\n \n Displays a horizontal bar overlay for use in billboard layout.\n \n **See also**: [Billboard](Billboard_Layout.md), [Billboard layout design guidance](sail/ux-billboard-layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"position\", \"name\": \"Position\", \"types\": \"Text\", \"description\": \"Determines where the bar overlay appears. Valid values: `\\\"TOP\\\"`, `\\\"MIDDLE\\\"`, `\\\"BOTTOM\\\"` (default).\\n\"}, {\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type\", \"description\": \"The interface to display in the overlay. Accepts layouts and display components. Supported layouts and components: Box, Button, Card, Columns, Image, Link, Milestone, Progress Bar, Rich Text, Section, Side By Side.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the overlay is displayed on the interface. When set to false, the overlay is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines the overlay style. Valid values: `\\\"DARK\\\"` (default), `\\\"SEMI_DARK\\\"`, `\\\"NONE\\\"`, `\\\"SEMI_LIGHT\\\"`, `\\\"LIGHT\\\"`.\\n\"}, {\"keyword\": \"padding\", \"name\": \"Padding\", \"types\": \"Text\", \"description\": \"Determines the space between the overlay's edges and its contents. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`(default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Bar overlay with intro message\n \n ```sail\n a!billboardLayout(\n   backgroundcolor: \"#073763\",\n   marginBelow: \"STANDARD\",\n   overlay: a!barOverlay(\n     position: \"MIDDLE\",\n     contents: {\n       a!richTextDisplayField(\n         labelPosition: \"COLLAPSED\",\n         value: {\n           a!richTextItem(text: {\"Hello, \" & user(loggedinuser(), \"firstName\") & \".\"}, size: \"MEDIUM\"),\n           char(10),\n           a!richTextItem(text: {\"What do you need help with?\"}, size: \"LARGE\")\n         },\n         align: \"CENTER\"\n       )\n     },\n     style: \"DARK\"\n   )\n )\n ```\n \n Displays the following:\n \n ![Bar Overlay Example](images/barOverlayExample.png)"}, {"doc": "Time_Component.md", "content": "---\n layout: function\n title: Time Display Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a single time (hour, minute, second) but cannot take input.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!timeDisplayField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: value\n   name: Display Value\n   types: Time\n   description: The time to display.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Time Display\n space: sail_component\n ---\n \n ## Function\n \n function name: a!timeDisplayField \n  function syntax: a!timeDisplayField (label,instructions,value,labelPosition,helpTooltip,accessibilityText,showWhen)\n \n Displays a single [time](Appian_Data_Types.md#time) (hour, minute, second) but cannot take input.\n \n When working with a [date](Appian_Data_Types.md#date) (year, month, day), use a [date](Date_and_Time_Component.md) component. When working with [date and time](Appian_Data_Types.md#date-and-time) (year, month, day, hour, minute, second), use a [date & time](Date_and_Time_Component.md) component. To display a time using a custom format, use a [text](Text_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Time\", \"description\": \"The time to display.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Formatting\n \n - The time is shown in the current user's time zone. For example, 1:20 PM.\n - If you want to display a time with formatting other than the default, use the Text component.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Time with only a label\n \n ```sail \n a!timeDisplayField(\n   label: \"Daily Meeting Time\",\n   value: time(13, 20)\n )\n ```\n \n Displays the following:\n \n ![screenshot of a time field with a label](images/Time_label_75.png){:.screenshot}"}, {"doc": "Floating_Point_Component.md", "content": "---\n layout: basic\n title: Decimal (Floating Point) Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays and allows entry of a single decimal number, stored with a floating\n   point representation.\n category: function_page\n compatibility: -crf\n fncname: a!floatingPointField\n fncsubcat: Inputs\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scdisplayname: Decimal (Floating Point)\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: 'Text to display as the field label.\n \n     '\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: 'Supplemental text about this field.\n \n     '\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Number (Decimal)\n   description: Number to display in the field.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: 'Validation errors to display below the field when the value is not\n     null.\n \n     '\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the number when the user\n     changes it. Use a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the number value. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: refreshAfter\n   name: Refresh After\n   types: Text\n   description: 'Determines when the interface is refreshed with the saved value from\n     the barcode field. Valid values are `\"KEYPRESS\"` to refresh after every character\n     typed into the field and `\"UNFOCUS\"` (the default value) to refresh when the user\n     deselects the field after changing its value.\n \n     '\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: 'Text to display in the field when it is empty. Does not show if the\n     field is read only.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: 'Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n ---\n \n ## Function\n \n function name: a!floatingPointField \n  function syntax: a!floatingPointField (label,instructions,required,readOnly,disabled,value,validations,saveInto,validationGroup,requiredMessage,align,labelPosition,refreshAfter,placeholder,helpTooltip,accessibilityText,showWhen)\n \n Displays and allows entry of a single [decimal](Appian_Data_Types.md#number-decimal) number, stored with a floating point representation.\n \n When working with an [integer](Appian_Data_Types.md#number-integer), use an [integer](Integer_Component.md) component. To display a number using a custom format, use a [text](Text_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\\n\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Number (Decimal)\", \"description\": \"Number to display in the field.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\\n\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the number when the user changes it. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the number value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"Text\", \"description\": \"Determines when the interface is refreshed with the saved value from the barcode field. Valid values are `\\\"KEYPRESS\\\"` to refresh after every character typed into the field and `\\\"UNFOCUS\\\"` (the default value) to refresh when the user deselects the field after changing its value.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using text and placeholder text\n \n - If you want to display a number with thousand separators or with special formatting such as a currency, use the [text](Text_Component.md) component.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Collect a decimal value from a user\n \n {% sailbox 600 %}\n a!localVariables(\n   local!referenceNumber: 0,\n   a!floatingPointField(\n     label: \"Reference Number\",\n     value: local!referenceNumber,\n     saveInto: local!referenceNumber\n   )\n )\n {% endsailbox %}\n \n ### Display a decimal with a label\n \n {% sailbox 600 %}\n a!floatingPointField(\n   label: \"Reference Number\",\n   readOnly: true,\n   value: 12345.6551\n )\n {% endsailbox %}\n \n \n ### Decimal with a validation\n \n {% sailbox 600 %} \n a!localVariables(\n   local!storedPrice:0,\n   a!floatingPointField(\n     label: \"Unit Price\",\n     value: local!storedPrice,\n     saveInto: local!storedPrice,\n     validations: if(\n       local!storedPrice <= 0,\n       \"A valid price greater than $0.00 must be entered\",\n       \"\"\n     )\n   )\n )\n {% endsailbox %}"}, {"doc": "Grid_Row_Component.md", "content": "---\n layout: function\n title: Editable Grid Row Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a row of components within an editable grid (a!gridLayout).\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gridRowLayout\n fncsubcat: Grids and Lists\n parameters:\n - keyword: contents\n   name: Contents\n   types: List of Variant\n   description: 'Array of components to display in the grid cell. Supported components:\n     Barcode, Checkboxes, Date, Date & Time, Dropdown, Decimal, Encrypted Text, File\n     Upload, Image, Integer, Link, Multiple Dropdown, Paragraph, Pickers, Progress\n     Bar, Radio Buttons, Rich Text, and Text.\n \n     '\n - keyword: id\n   name: Identifier\n   types: Any Type\n   description: Value that uniquely identifies this row for selection.\n - keyword: selectionDisabled\n   name: Selection disabled\n   types: Boolean\n   description: 'When selection is enabled, determines if the selection checkbox is\n     disabled for this row. Default: false.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the row is displayed in the grid. When set to false,\n     the row is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Editable Grid Row\n scsubcat: Editable_Grid_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gridRowLayout \n  function syntax: a!gridRowLayout (contents,id,selectionDisabled,showWhen)\n \n Displays a row of components within an [editable grid](Editable_Grid_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"List of Variant\", \"description\": \"Array of components to display in the grid cell. Supported components: Barcode, Checkboxes, Date, Date & Time, Dropdown, Decimal, Encrypted Text, File Upload, Image, Integer, Link, Multiple Dropdown, Paragraph, Pickers, Progress Bar, Radio Buttons, Rich Text, and Text.\\n\"}, {\"keyword\": \"id\", \"name\": \"Identifier\", \"types\": \"Any Type\", \"description\": \"Value that uniquely identifies this row for selection.\"}, {\"keyword\": \"selectionDisabled\", \"name\": \"Selection disabled\", \"types\": \"Boolean\", \"description\": \"When selection is enabled, determines if the selection checkbox is disabled for this row. Default: false.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the row is displayed in the grid. When set to false, the row is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Component behavior\n \n - Some interface component configurations do not take effect when placed in a grid cell. Refer to the [grid layout section](Editable_Grid_Component.md) for details.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Grid row\n \n *This example needs to be used with the `a!gridLayout()` function for it to display anything. Examples that you can see in action are available in the [Grid Layout](Editable_Grid_Component.md) component section.*\n \n ```sail \n a!gridRowLayout(\n   contents: {\n     a!textField(\n       value: \"Cell\"\n     )\n   }\n )\n ```"}, {"doc": "Line_Chart_Component.md", "content": "---\n layout: function\n title: Line Chart Component\n category: function_page\n compatibility: -crf, -om\n excerpt: Displays a series of numerical data as points connected by lines. Use a line\n   chart to visualize trends of data that changes over time.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!lineChartField\n fncsubcat: Charts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: categories\n   name: Categories\n   types: List of Variant\n   description: 'Text, Date, or Date and Time array to display on the x-axis below\n     each data point. If you are using an array of Date or Date and Time, make sure\n     the data is sorted prior to using it as a category.\n \n     '\n - keyword: series\n   name: Series\n   types: List of LineChartSeries\n   description: Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\n - keyword: xAxisTitle\n   name: X-Axis Title\n   types: Text\n   description: Title for the independent (horizontal) axis.\n - keyword: yAxisTitle\n   name: Y-Axis Title\n   types: Text\n   description: Title for the dependent (vertical) axis.\n - keyword: yAxisMin\n   name: Min Y-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the vertical axis.\n - keyword: yAxisMax\n   name: Max Y-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the vertical axis.\n - keyword: referenceLines\n   name: Reference Lines\n   types: List of Variant\n   description: 'Array of reference line values for each threshold to be defined on\n     the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\n \n     '\n - keyword: showLegend\n   name: Show legend\n   types: Boolean\n   description: 'Determines if a color legend displays below the chart. Default: _true_.\n \n     '\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: 'Determines if data values are displayed next to each data point. Default:\n     _false_.\n \n     '\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for each data point.\n     Default: _true_.\n \n     '\n - keyword: allowDecimalAxisLabels\n   name: Allow decimal axis labels\n   types: Boolean\n   description: 'Allows dependent (vertical) values to display as decimal numbers instead\n     of integers. Default: _false_.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: _true_.\n \n     '\n - keyword: connectNulls\n   name: Connect Null Data Points\n   types: Boolean\n   description: 'Determines whether to connect a graph line across null points, or\n     render a gap between the two points on either side of the null. Default: _false_.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: colorScheme\n   name: Color scheme\n   types: Any type\n   description: 'Determines which color scheme to use in the chart. Use one of the\n     following valid values: `\"CLASSIC\"` (default), `\"MIDNIGHT\"`, `\"OCEAN\"`, `\"MOSS\"`,\n     `\"BERRY\"`, `\"PARACHUTE\"`, `\"RAINFOREST\"`, `\"SUNSET\"` or define a custom color\n     scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See\n     [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the chart height. Valid values: `\"MICRO\"`, `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`. See [Chart Heights](Chart_Heights.md) for guidance on using\n     the `\"MICRO\"` size.\n \n     '\n - keyword: xAxisStyle\n   name: X-Axis Style\n   types: Text\n   description: 'Determines how to display the labels and axis separators for the X-Axis.\n     Valid values: `\"STANDARD\"` (default), `\"NONE\"`.\n \n     '\n - keyword: yAxisStyle\n   name: Y-Axis Style\n   types: Text\n   description: 'Determines how to display the labels, axis separators, and grid lines\n     for the Y-Axis. Valid values: `\"STANDARD\"` (default), `\"MINIMAL\"`, `\"NONE\"`.\n \n     '\n - keyword: data\n   name: Data\n   types: Any type\n   description: Reference to the record type used for the source of this chart. Can\n     accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\n - keyword: config\n   name: Chart Configuration\n   types: LineChartConfig\n   description: 'Configures how to display data on the chart, including fields used\n     for calculations and grouping, using [a!lineChartConfig()](Line_Chart_Config_Component.md).\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, chart data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes chart data each time a specified event completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: \"How often chart data gets refreshed in minutes. When null, chart data\n     will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`,\n     `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: \"When true, chart data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh chart data\n     when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_. \\n\"\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: \"Refreshes chart data each time any of these specific variables change.\n     This allows you to refresh the chart data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n     \\n\"\n reftype: sailcomponent\n scdisplayname: Line Chart\n space: sail_component\n ---\n \n ## Function\n \n function name: a!lineChartField \n  function syntax: a!lineChartField (label,instructions,categories,series,xAxisTitle,yAxisTitle,yAxisMin,yAxisMax,referenceLines,showLegend,showDataLabels,showTooltips,allowDecimalAxisLabels,labelPosition,helpTooltip,showWhen,connectNulls,accessibilityText,colorScheme,height,xAxisStyle,yAxisStyle,data,config,refreshAlways,refreshAfter,refreshInterval,refreshOnReferencedVarChange,refreshOnVarChange)\n \n Displays a series of numerical data as points connected by lines. Use a line chart to visualize trends of data that changes over time. This component can display thousands of data points without scrolling. \n \n Users can easily find trends in their data by zooming in to a selected area to see additional details. See [Display Date and Time Fields in a Line Chart](Line_Chart_Component.md#display-date-and-time-fields-in-a-line-chart) example below.\n \n When the chart shows date or date and time fields, the x-axis labels are formatted to match the end user's time zone and conveniently resize to avoid clutter.\n \n If specific values are more important than the trend, consider using a [column chart](Column_Chart_Component.md).\n \n **See also**:\n \n - [Configure Charts Using Records](Chart_Configuration_Using_Records.md)\n - [Chart Color Schemes](Chart_Color_Scheme.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"categories\", \"name\": \"Categories\", \"types\": \"List of Variant\", \"description\": \"Text, Date, or Date and Time array to display on the x-axis below each data point. If you are using an array of Date or Date and Time, make sure the data is sorted prior to using it as a category.\\n\"}, {\"keyword\": \"series\", \"name\": \"Series\", \"types\": \"List of LineChartSeries\", \"description\": \"Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\"}, {\"keyword\": \"xAxisTitle\", \"name\": \"X-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the independent (horizontal) axis.\"}, {\"keyword\": \"yAxisTitle\", \"name\": \"Y-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the dependent (vertical) axis.\"}, {\"keyword\": \"yAxisMin\", \"name\": \"Min Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the vertical axis.\"}, {\"keyword\": \"yAxisMax\", \"name\": \"Max Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the vertical axis.\"}, {\"keyword\": \"referenceLines\", \"name\": \"Reference Lines\", \"types\": \"List of Variant\", \"description\": \"Array of reference line values for each threshold to be defined on the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\\n\"}, {\"keyword\": \"showLegend\", \"name\": \"Show legend\", \"types\": \"Boolean\", \"description\": \"Determines if a color legend displays below the chart. Default: _true_.\\n\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed next to each data point. Default: _false_.\\n\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for each data point. Default: _true_.\\n\"}, {\"keyword\": \"allowDecimalAxisLabels\", \"name\": \"Allow decimal axis labels\", \"types\": \"Boolean\", \"description\": \"Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: _false_.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: _true_.\\n\"}, {\"keyword\": \"connectNulls\", \"name\": \"Connect Null Data Points\", \"types\": \"Boolean\", \"description\": \"Determines whether to connect a graph line across null points, or render a gap between the two points on either side of the null. Default: _false_.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"colorScheme\", \"name\": \"Color scheme\", \"types\": \"Any type\", \"description\": \"Determines which color scheme to use in the chart. Use one of the following valid values: `\\\"CLASSIC\\\"` (default), `\\\"MIDNIGHT\\\"`, `\\\"OCEAN\\\"`, `\\\"MOSS\\\"`, `\\\"BERRY\\\"`, `\\\"PARACHUTE\\\"`, `\\\"RAINFOREST\\\"`, `\\\"SUNSET\\\"` or define a custom color scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the chart height. Valid values: `\\\"MICRO\\\"`, `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`. See [Chart Heights](Chart_Heights.md) for guidance on using the `\\\"MICRO\\\"` size.\\n\"}, {\"keyword\": \"xAxisStyle\", \"name\": \"X-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels and axis separators for the X-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"yAxisStyle\", \"name\": \"Y-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"MINIMAL\\\"`, `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Any type\", \"description\": \"Reference to the record type used for the source of this chart. Can accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\"}, {\"keyword\": \"config\", \"name\": \"Chart Configuration\", \"types\": \"LineChartConfig\", \"description\": \"Configures how to display data on the chart, including fields used for calculations and grouping, using [a!lineChartConfig()](Line_Chart_Config_Component.md).\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes chart data each time a specified event completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh chart data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_. \\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`). \\n\"}]\n \n ## Configuration\n \n There are two ways to configure a line chart:\n \n 1. Set a record type as the data source and define fields to display on the chart.\n 1. Perform your own query and define lists of data within the categories and series.\n \n If you have a record type that uses a database as the source, or a record type with [data sync](records-data-sync.md) enabled, we recommend using the record type as the source of your chart. This configuration is easier because Appian will perform the query for you and display the results directly in the chart.\n \n If your record type uses a web service as the source and does not have data sync enabled, use the *categories* and *series* to construct the chart manually.\n \n ### Using record data\n \n Configuring a line chart using a record type as the source requires using two parameters: *data* and *config*. Once you provide a record type in the *data* parameter and provide the fields in the *config* parameter, the chart displays the results.\n \n See [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md) for details on using a record type as the source. See [Build Reports from Records](report-with-records.md) for examples of reports created with different charts.\n \n ### Using categories and series\n \n When using *categories* and *series*, you must provide the list of data labels and values directly to these parameters. \n \n #### Categories\n \n - The order of items in the *categories* array determines the display order of categories on the chart with the left-most item in the array appearing on the far left of the x-axis.\n - For each null or empty item in the array passed to *categories*, `[Category #]` displays on the x-axis with `#` as the index number in the *categories* array of the null or empty item. For example, `[Category 1]`.\n - The index of each item in the *categories* array must match with the index of its *series* data value. \n \n #### Series\n \n - A single *Series* item produces a single line with line points for each *categories* item. Multiple *series* items produce multiple lines with one line for each series label item displayed in a distinct color and line points for each *categories* item with a different data marker shape (for example, square, circle, diamond) for each line.\n - Use [a!chartSeries()](Chart_Series_Component.md) to create the Chart Series array.\n - If a series data value is greater than the *Max Y-Axis* value or less than the *Min Y-Axis* value, the line continues off the chart, but the line point does not display.\n - If the *series* argument has a non-null label value paired with a 0, null, or empty data value, the data value still displays in the legend.\n - If the *series* argument has a null or empty label value paired with a non-null data value, the label value displays as `[Series #]` with `#` as the index number of the data value. For example, `[Series 1]`.\n \n ## Usage considerations\n \n ### Chart data\n \n - If data values are small and less than a whole number, Appian recommends settings *allowDecimalAxisLabels* to `true`.\n - If *data* contains `a!recordData` or a record type reference, the categories and series parameters are ignored.\n \n ### Chart line and background color\n \n When the chart is placed in a colored card, the chart background will match the color of the card. Text labels and lines in the chart will also adjust if a dark background color is used. See the [SAIL Design System](sail/ux-charts.md#background-colors) for best practices on using charts with background colors.\n \n ### Chart refresh behavior\n \n - You can define `a!refreshVariable` parameters directly in the chart without creating additional local variables. The only exception being `refreshOnVarChange`, which refreshes the chart after a specific local variable has changed.\n - When you use a record type as the source of your chart, use the refresh parameters in the chart instead of using local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function. This is because the refresh behavior will automatically apply to the fields specified in the *data* parameter of the chart.\n - If you're not using a record type as the source of your chart, it's recommended to use local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function to define refresh behavior since you won't use the *data* parameter to configure your chart. \n \n ## Examples\n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n The examples below demonstrate how to configure your charts using categories and series. For examples on using record data, see [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md).\n \n ### Single series line chart with label and instructions\n \n ```sail\n a!lineChartField(\n   label: \"Annual Conference Registrants\",\n   instructions: \"The number of registrations received for the annual conference each month.\",\n   categories: {\"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\"},\n   series: {\n     a!chartSeries(label: \"Sales\", data: {72, 91, 93, 95, 92, 99, 98, 99, 79, 83, 90, 99})\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of a line chart with a single series](images/Linechart_single_75.png){:.screenshot}\n \n ### Display date and time fields in a line chart\n \n ```sail\n a!localVariables(\n /* ~~~ Open vs. Closed Cases ~~~ /\n / Query for the count of Closed cases, aggregating by the date they were closed on. */\n local!resolvedByDate: a!dataSubset(\n data: {\n {created_on: datetime(2019, 1, 1, 0, 0, 0, 0), id_count: 50},\n {created_on: datetime(2019, 1, 2, 0, 0, 0, 0), id_count: 55},\n {created_on: datetime(2019, 1, 3, 0, 0, 0, 0), id_count: 52},\n {created_on: datetime(2019, 1, 4, 0, 0, 0, 0), id_count: 50},\n {created_on: datetime(2019, 1, 5, 0, 0, 0, 0), id_count: 55},\n {created_on: datetime(2019, 1, 6, 0, 0, 0, 0), id_count: 56},\n {created_on: datetime(2019, 1, 7, 0, 0, 0, 0), id_count: 58},\n {created_on: datetime(2019, 1, 8, 0, 0, 0, 0), id_count: 52},\n {created_on: datetime(2019, 1, 9, 0, 0, 0, 0), id_count: 60},\n {created_on: datetime(2019, 1, 10, 0, 0, 0, 0), id_count: 65},\n {created_on: datetime(2019, 1, 11, 0, 0, 0, 0), id_count: 66},\n {created_on: datetime(2019, 1, 12, 0, 0, 0, 0), id_count: 67},\n {created_on: datetime(2019, 1, 13, 0, 0, 0, 0), id_count: 70},\n {created_on: datetime(2019, 1, 14, 0, 0, 0, 0), id_count: 72},\n {created_on: datetime(2019, 1, 15, 0, 0, 0, 0), id_count: 69},\n {created_on: datetime(2019, 1, 16, 0, 0, 0, 0), id_count: 75},\n {created_on: datetime(2019, 1, 17, 0, 0, 0, 0), id_count: 73},\n {created_on: datetime(2019, 1, 18, 0, 0, 0, 0), id_count: 77},\n {created_on: datetime(2019, 1, 19, 0, 0, 0, 0), id_count: 80},\n {created_on: datetime(2019, 1, 20, 0, 0, 0, 0), id_count: 76},\n {created_on: datetime(2019, 1, 21, 0, 0, 0, 0), id_count: 78},\n {created_on: datetime(2019, 1, 22, 0, 0, 0, 0), id_count: 80},\n {created_on: datetime(2019, 1, 23, 0, 0, 0, 0), id_count: 77},\n {created_on: datetime(2019, 1, 24, 0, 0, 0, 0), id_count: 75},\n {created_on: datetime(2019, 1, 25, 0, 0, 0, 0), id_count: 80},\n {created_on: datetime(2019, 1, 26, 0, 0, 0, 0), id_count: 83},\n {created_on: datetime(2019, 1, 27, 0, 0, 0, 0), id_count: 86},\n {created_on: datetime(2019, 1, 28, 0, 0, 0, 0), id_count: 83},\n {created_on: datetime(2019, 1, 29, 0, 0, 0, 0), id_count: 88},\n {created_on: datetime(2019, 1, 30, 0, 0, 0, 0), id_count: 90},\n {created_on: datetime(2019, 1, 31, 0, 0, 0, 0), id_count: 94},\n {created_on: datetime(2019, 2, 1, 0, 0, 0, 0), id_count: 93},\n {created_on: datetime(2019, 2, 2, 0, 0, 0, 0), id_count: 100},\n {created_on: datetime(2019, 2, 3, 0, 0, 0, 0), id_count: 99},\n {created_on: datetime(2019, 2, 4, 0, 0, 0, 0), id_count: 105},\n {created_on: datetime(2019, 2, 5, 0, 0, 0, 0), id_count: 106},\n {created_on: datetime(2019, 2, 6, 0, 0, 0, 0), id_count: 108},\n {created_on: datetime(2019, 2, 7, 0, 0, 0, 0), id_count: 105},\n {created_on: datetime(2019, 2, 8, 0, 0, 0, 0), id_count: 104},\n {created_on: datetime(2019, 2, 9, 0, 0, 0, 0), id_count: 109},\n {created_on: datetime(2019, 2, 10, 0, 0, 0, 0), id_count: 108},\n {created_on: datetime(2019, 2, 11, 0, 0, 0, 0), id_count: 111},\n {created_on: datetime(2019, 2, 12, 0, 0, 0, 0), id_count: 115},\n {created_on: datetime(2019, 2, 13, 0, 0, 0, 0), id_count: 112},\n {created_on: datetime(2019, 2, 14, 0, 0, 0, 0), id_count: 118},\n {created_on: datetime(2019, 2, 15, 0, 0, 0, 0), id_count: 119},\n {created_on: datetime(2019, 2, 16, 0, 0, 0, 0), id_count: 117},\n {created_on: datetime(2019, 2, 17, 0, 0, 0, 0), id_count: 120},\n {created_on: datetime(2019, 2, 18, 0, 0, 0, 0), id_count: 122},\n {created_on: datetime(2019, 2, 19, 0, 0, 0, 0), id_count: 124},\n {created_on: datetime(2019, 2, 20, 0, 0, 0, 0), id_count: 123},\n {created_on: datetime(2019, 2, 21, 0, 0, 0, 0), id_count: 125},\n {created_on: datetime(2019, 2, 22, 0, 0, 0, 0), id_count: 25},\n {created_on: datetime(2019, 2, 23, 0, 0, 0, 0), id_count: 127},\n {created_on: datetime(2019, 2, 24, 0, 0, 0, 0), id_count: 126},\n {created_on: datetime(2019, 2, 25, 0, 0, 0, 0), id_count: 129},\n {created_on: datetime(2019, 2, 26, 0, 0, 0, 0), id_count: 130},\n {created_on: datetime(2019, 2, 27, 0, 0, 0, 0), id_count: 128},\n {created_on: datetime(2019, 2, 28, 0, 0, 0, 0), id_count: 131},\n {created_on: datetime(2019, 3, 1, 0, 0, 0, 0), id_count: 135},\n {created_on: datetime(2019, 3, 2, 0, 0, 0, 0), id_count: 132},\n {created_on: datetime(2019, 3, 3, 0, 0, 0, 0), id_count: 136},\n {created_on: datetime(2019, 3, 4, 0, 0, 0, 0), id_count: 138},\n {created_on: datetime(2019, 3, 5, 0, 0, 0, 0), id_count: 134},\n {created_on: datetime(2019, 3, 6, 0, 0, 0, 0), id_count: 137},\n {created_on: datetime(2019, 3, 7, 0, 0, 0, 0), id_count: 135},\n {created_on: datetime(2019, 3, 8, 0, 0, 0, 0), id_count: 137},\n {created_on: datetime(2019, 3, 9, 0, 0, 0, 0), id_count: 135},\n {created_on: datetime(2019, 3, 10, 0, 0, 0, 0), id_count: 138},\n {created_on: datetime(2019, 3, 11, 0, 0, 0, 0), id_count: 137},\n {created_on: datetime(2019, 3, 12, 0, 0, 0, 0), id_count: 139},\n {created_on: datetime(2019, 3, 13, 0, 0, 0, 0), id_count: 140},\n {created_on: datetime(2019, 3, 14, 0, 0, 0, 0), id_count: 136},\n {created_on: datetime(2019, 3, 15, 0, 0, 0, 0), id_count: 142},\n {created_on: datetime(2019, 3, 16, 0, 0, 0, 0), id_count: 146},\n {created_on: datetime(2019, 3, 17, 0, 0, 0, 0), id_count: 144},\n {created_on: datetime(2019, 3, 18, 0, 0, 0, 0), id_count: 146},\n {created_on: datetime(2019, 3, 19, 0, 0, 0, 0), id_count: 150},\n {created_on: datetime(2019, 3, 20, 0, 0, 0, 0), id_count: 146},\n {created_on: datetime(2019, 3, 21, 0, 0, 0, 0), id_count: 146},\n {created_on: datetime(2019, 3, 22, 0, 0, 0, 0), id_count: 148},\n {created_on: datetime(2019, 3, 23, 0, 0, 0, 0), id_count: 145},\n {created_on: datetime(2019, 3, 24, 0, 0, 0, 0), id_count: 147},\n {created_on: datetime(2019, 3, 25, 0, 0, 0, 0), id_count: 145}\n }\n ),\n \n /* Query for the count of Open cases, aggregating by the date they were created on. */\n local!openByDate: a!dataSubset(\n data: {\n {created_on: datetime(2019, 1, 1, 0, 0, 0, 0), id_count: 220},\n {created_on: datetime(2019, 1, 2, 0, 0, 0, 0), id_count: 220},\n {created_on: datetime(2019, 1, 3, 0, 0, 0, 0), id_count: 221},\n {created_on: datetime(2019, 1, 4, 0, 0, 0, 0), id_count: 224},\n {created_on: datetime(2019, 1, 5, 0, 0, 0, 0), id_count: 225},\n {created_on: datetime(2019, 1, 6, 0, 0, 0, 0), id_count: 227},\n {created_on: datetime(2019, 1, 7, 0, 0, 0, 0), id_count: 229},\n {created_on: datetime(2019, 1, 8, 0, 0, 0, 0), id_count: 233},\n {created_on: datetime(2019, 1, 9, 0, 0, 0, 0), id_count: 229},\n {created_on: datetime(2019, 1, 10, 0, 0, 0, 0), id_count: 231},\n {created_on: datetime(2019, 1, 11, 0, 0, 0, 0), id_count: 229},\n {created_on: datetime(2019, 1, 12, 0, 0, 0, 0), id_count: 222},\n {created_on: datetime(2019, 1, 13, 0, 0, 0, 0), id_count: 224},\n {created_on: datetime(2019, 1, 14, 0, 0, 0, 0), id_count: 222},\n {created_on: datetime(2019, 1, 15, 0, 0, 0, 0), id_count: 218},\n {created_on: datetime(2019, 1, 16, 0, 0, 0, 0), id_count: 223},\n {created_on: datetime(2019, 1, 17, 0, 0, 0, 0), id_count: 220},\n {created_on: datetime(2019, 1, 18, 0, 0, 0, 0), id_count: 216},\n {created_on: datetime(2019, 1, 19, 0, 0, 0, 0), id_count: 217},\n {created_on: datetime(2019, 1, 20, 0, 0, 0, 0), id_count: 215},\n {created_on: datetime(2019, 1, 21, 0, 0, 0, 0), id_count: 212},\n {created_on: datetime(2019, 1, 22, 0, 0, 0, 0), id_count: 210},\n {created_on: datetime(2019, 1, 23, 0, 0, 0, 0), id_count: 215},\n {created_on: datetime(2019, 1, 24, 0, 0, 0, 0), id_count: 218},\n {created_on: datetime(2019, 1, 25, 0, 0, 0, 0), id_count: 220},\n {created_on: datetime(2019, 1, 26, 0, 0, 0, 0), id_count: 211},\n {created_on: datetime(2019, 1, 27, 0, 0, 0, 0), id_count: 219},\n {created_on: datetime(2019, 1, 28, 0, 0, 0, 0), id_count:205},\n {created_on: datetime(2019, 1, 29, 0, 0, 0, 0), id_count:229},\n {created_on: datetime(2019, 1, 30, 0, 0, 0, 0), id_count:218},\n {created_on: datetime(2019, 1, 31, 0, 0, 0, 0), id_count:221},\n {created_on: datetime(2019, 2, 1, 0, 0, 0, 0), id_count: 219},\n {created_on: datetime(2019, 2, 2, 0, 0, 0, 0), id_count: 218},\n {created_on: datetime(2019, 2, 3, 0, 0, 0, 0), id_count: 211},\n {created_on: datetime(2019, 2, 4, 0, 0, 0, 0), id_count: 216},\n {created_on: datetime(2019, 2, 5, 0, 0, 0, 0), id_count: 218},\n {created_on: datetime(2019, 2, 6, 0, 0, 0, 0), id_count: 220},\n {created_on: datetime(2019, 2, 7, 0, 0, 0, 0), id_count: 219},\n {created_on: datetime(2019, 2, 8, 0, 0, 0, 0), id_count: 217},\n {created_on: datetime(2019, 2, 9, 0, 0, 0, 0), id_count: 215},\n {created_on: datetime(2019, 2, 10, 0, 0, 0, 0), id_count: 211},\n {created_on: datetime(2019, 2, 11, 0, 0, 0, 0), id_count: 206},\n {created_on: datetime(2019, 2, 12, 0, 0, 0, 0), id_count: 211},\n {created_on: datetime(2019, 2, 13, 0, 0, 0, 0), id_count: 209},\n {created_on: datetime(2019, 2, 14, 0, 0, 0, 0), id_count: 210},\n {created_on: datetime(2019, 2, 15, 0, 0, 0, 0), id_count: 207},\n {created_on: datetime(2019, 2, 16, 0, 0, 0, 0), id_count: 205},\n {created_on: datetime(2019, 2, 17, 0, 0, 0, 0), id_count: 216},\n {created_on: datetime(2019, 2, 18, 0, 0, 0, 0), id_count: 211},\n {created_on: datetime(2019, 2, 19, 0, 0, 0, 0), id_count: 214},\n {created_on: datetime(2019, 2, 20, 0, 0, 0, 0), id_count: 210},\n {created_on: datetime(2019, 2, 21, 0, 0, 0, 0), id_count: 211},\n {created_on: datetime(2019, 2, 22, 0, 0, 0, 0), id_count: 320},\n {created_on: datetime(2019, 2, 23, 0, 0, 0, 0), id_count: 209},\n {created_on: datetime(2019, 2, 24, 0, 0, 0, 0), id_count: 204},\n {created_on: datetime(2019, 2, 25, 0, 0, 0, 0), id_count: 206},\n {created_on: datetime(2019, 2, 26, 0, 0, 0, 0), id_count: 208},\n {created_on: datetime(2019, 2, 27, 0, 0, 0, 0), id_count: 205},\n {created_on: datetime(2019, 2, 28, 0, 0, 0, 0), id_count: 207},\n {created_on: datetime(2019, 3, 1, 0, 0, 0, 0), id_count: 205},\n {created_on: datetime(2019, 3, 2, 0, 0, 0, 0), id_count: 201},\n {created_on: datetime(2019, 3, 3, 0, 0, 0, 0), id_count: 200},\n {created_on: datetime(2019, 3, 4, 0, 0, 0, 0), id_count: 192},\n {created_on: datetime(2019, 3, 5, 0, 0, 0, 0), id_count: 190},\n {created_on: datetime(2019, 3, 6, 0, 0, 0, 0), id_count: 184},\n {created_on: datetime(2019, 3, 7, 0, 0, 0, 0), id_count: 186},\n {created_on: datetime(2019, 3, 8, 0, 0, 0, 0), id_count: 188},\n {created_on: datetime(2019, 3, 9, 0, 0, 0, 0), id_count: 185},\n {created_on: datetime(2019, 3, 10, 0, 0, 0, 0), id_count: 183},\n {created_on: datetime(2019, 3, 11, 0, 0, 0, 0), id_count: 178},\n {created_on: datetime(2019, 3, 12, 0, 0, 0, 0), id_count: 181},\n {created_on: datetime(2019, 3, 13, 0, 0, 0, 0), id_count: 180},\n {created_on: datetime(2019, 3, 14, 0, 0, 0, 0), id_count: 184},\n {created_on: datetime(2019, 3, 15, 0, 0, 0, 0), id_count: 178},\n {created_on: datetime(2019, 3, 16, 0, 0, 0, 0), id_count: 180},\n {created_on: datetime(2019, 3, 17, 0, 0, 0, 0), id_count: 177},\n {created_on: datetime(2019, 3, 18, 0, 0, 0, 0), id_count: 175},\n {created_on: datetime(2019, 3, 19, 0, 0, 0, 0), id_count: 173},\n {created_on: datetime(2019, 3, 20, 0, 0, 0, 0), id_count: 175},\n {created_on: datetime(2019, 3, 21, 0, 0, 0, 0), id_count: 178},\n {created_on: datetime(2019, 3, 22, 0, 0, 0, 0), id_count: 170},\n {created_on: datetime(2019, 3, 23, 0, 0, 0, 0), id_count: 172},\n {created_on: datetime(2019, 3, 24, 0, 0, 0, 0), id_count: 175},\n {created_on: datetime(2019, 3, 25, 0, 0, 0, 0), id_count: 176}\n }\n ),\n {\n a!lineChartField(\n label: \"Open vs. Closed Cases\",\n yAxisTitle: \"# of Cases\",\n categories: index(local!resolvedByDate.data, \"created_on\"),\n series: {\n a!chartSeries(\n label: \"Closed\",\n data: index(local!resolvedByDate.data, \"id_count\"),\n color: \"GREEN\"\n ),\n a!chartSeries(\n label: \"Open\",\n data: index(local!openByDate.data, \"id_count\"),\n color: \"RED\"\n )\n }\n )\n }\n )\n ```\n \n Displays the following:\n ![gif which zooms in on a section of data in the line chart](images/date_fields_example.gif){:.screenshot}\n \n ### Multiple series line chart with label, x-axis title, y-axis title, and legend\n \n ```sail\n a!lineChartField(\n   label: \"Tempo Usage Trends\",\n   categories: {\"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\"},\n   series: {\n     a!chartSeries(label: \"IT\", data: {92, 94, 93, 95, 96, 99, 98, 100, 99, 91, 98, 99}),\n     a!chartSeries(label: \"Human Services\", data: {84, 83, 85, 86, 87, 89, 91, 90, 89, 83, 93, 95}),\n     a!chartSeries(label: \"Sales\", data: {70, 63, 90, 72, 74, 74, 76, 89, 72, 65, 100, 85}),\n     a!chartSeries(label: \"Marketing\", data: {80, 80, 80, 90, 90, 90, 90, 90, 90, 70, 90, 90})\n   },\n   colorScheme: \"PARACHUTE\",\n   xAxisTitle: \"Month\",\n   yAxisTitle: \"% Active\",\n   yAxisMax: 100,\n   showLegend: true\n )\n ```\n \n Displays the following:\n \n ![screenshot of a line chart with chart label, axes titles, and legend](images/lineChartParachute.png){:.screenshot}\n \n ### Multiple series line chart with tooltips and a null data point\n \n ```sail\n a!lineChartField(\n   categories: {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"},\n   series: {\n     a!chartSeries(label: \"High\", data: {76, 82, null, 92, 87, 79, 80}),\n     a!chartSeries(label: \"Low\", data: {64, 70, 82, 81, 75, 67, null})\n   },\n   colorScheme: a!colorSchemeCustom(\n     colors: {\n       \"#3c78d8\",\n       \"#6aa84f\"\n     }\n   ),\n   xAxisTitle: \"Day\",\n   yAxisTitle: \"Temperature (F)\",\n   showLegend: true\n )\n ```\n \n Displays the following:\n \n ![screenshot of a line chart with two lines, one with null data points](images/nullLineChartCustom.png){:.screenshot}\n \n ### Connect null data points in a line chart\n \n ```sail\n a!localVariables(\n   local!agent: {\n     \"Hi! Thanks for calling today! How may I help you?\",\n     null,\n     \"I can help! First, please verify your data of birth.\",\n     null,\n     \"Ok, thank you. Now I'll look up your order.\",\n     null,\n     \"Thanks for your patience.I've found it.\",\n     null,\n     \"Oh no! Which item is it?\",\n     null,\n     \"I'm sorry about that. We'll send you another one free of charge.\",\n     null,\n     \"Is there anything else I can help with?\",\n     null\n   },\n   local!customer: {\n     null,\n     \"I have a problem with my order\",\n     null,\n     \"My birth date is January 1st, 1970.\",\n     null,\n     \"This is so slow. What's the problem?\",\n     null,\n     \"An item is damaged. I'm so annoyed.\",\n     null,\n     \"The prongs are bent on the charging cable. It's useless.\",\n     null,\n     \"OK. Thank you for fixing it.\",\n     null,\n     \"That's it. Thanks for your help.\"\n   },\n   {\n     a!lineChartField(\n       label: \"Conversation Sentiment Analysis\",\n       labelPosition: \"ABOVE\",\n       categories: a!forEach(\n         items: local!agent,\n         expression: if(\n           isNull(\n             fv!item\n           ),\n           local!customer[fv!index],\n           fv!item\n         )\n       ),\n       series: {\n         a!chartSeries(\n           label: \"Agent\",\n           data: a!forEach(\n             items: local!agent,\n             expression: if(\n               isNull(\n                 fv!item\n               ),\n               null,\n               a!sentimentScore(\n                 {\n                   fv!item\n                 }\n               )\n             )\n           )\n         ),\n         a!chartSeries(\n           label: \"Customer\",\n           data: a!forEach(\n             items: local!customer,\n             expression: if(\n               isNull(\n                 fv!item\n               ),\n               null,\n               a!sentimentScore(\n                 {\n                   fv!item\n                 }\n               )\n             )\n           )\n         )\n       },\n       colorScheme: a!colorSchemeCustom(\n         colors: {\n           \"#FFC300\",\n           \"#800080\"\n         }\n       ),\n       referenceLines: {\n         a!chartReferenceLine(\n           label: \"Positive\",\n           value: 0.5,\n           color: \"#008000\"\n         ),\n         a!chartReferenceLine(\n           label: \"Negative\",\n           value: - 0.5,\n           color: \"#FF0000\"\n         )\n       },\n       showLegend: true,\n       showTooltips: true,\n       connectNulls: true\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of a line chart that connects null data points](images/connect_null_points_example.png){:.screenshot}"}, {"doc": "Area_Chart_Component.md", "content": "---\n layout: function\n title: Area Chart Component\n category: function_page\n excerpt: Displays a series of numerical data as points connected by lines with the\n   area between the line and axis shaded. Use an area chart to visualize trends over\n   time and compare multiple values. If specific values are more important than the\n   trend, consider using a [column chart](Column_Chart_Component.md).\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!areaChartField\n fncsubcat: Charts\n fncsyntax: '**a!areaChartField**(*label*, *instructions*, *categories*, *series*,\n   *xAxisTitle*, *yAxisTitle*, *yAxisMin*, *yAxisMax*, *stacking*, *referenceLines*,\n   *showLegend*, *showDataLabels*, *showTooltips*, *allowDecimalAxisLabels*, *labelPosition*,\n   *helpTooltip*, *showWhen*, *connectNulls*, *accessibilityText*, *colorScheme*, *height*,\n   *xAxisStyle*, *yAxisStyle*, *data*, *config*, *refreshAlways*, *refreshInterval*,\n   *refreshOnReferencedVarChange*, *refreshOnVarChange*, *refreshAfter*)'\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: categories\n   name: Categories\n   types: List of Variant\n   description: 'Text, Date, or Date and Time array to display on the x-axis below\n     each data point. If you are using an array of Date or Date and Time, make sure\n     the data is sorted prior to using it as a category.\n \n     '\n - keyword: series\n   name: Series\n   types: List of AreaChartSeries\n   description: Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\n - keyword: xAxisTitle\n   name: X-Axis Title\n   types: Text\n   description: Title for the independent (horizontal) axis.\n - keyword: yAxisTitle\n   name: Y-Axis Title\n   types: Text\n   description: Title for the dependent (vertical) axis.\n - keyword: yAxisMin\n   name: Min Y-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the vertical axis.\n - keyword: yAxisMax\n   name: Max Y-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the vertical axis.\n - keyword: stacking\n   name: Stacking\n   types: Text\n   description: \"Determines if series values display as stacked, or stacked to a height\n     of 100% to show the contribution to the whole, or overlapping. Valid values: `\\\"NORMAL\\\"`\n     (default), `\\\"PERCENT_TO_TOTAL\\\"`, `\\\"NONE\\\"`.    \\n\"\n - keyword: referenceLines\n   name: Reference Lines\n   types: List of Variant\n   description: 'Array of reference line values for each threshold to be defined on\n     the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\n \n     '\n - keyword: showLegend\n   name: Show legend\n   types: Boolean\n   description: 'Determines if a color legend displays below the chart. Default: _true_.\n \n     '\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: 'Determines if data values are displayed next to each data point. Default:\n     _false_.\n \n     '\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for each data point.\n     Default: _true_.\n \n     '\n - keyword: allowDecimalAxisLabels\n   name: Allow decimal axis labels\n   types: Boolean\n   description: 'Allows dependent (vertical) values to display as decimal numbers instead\n     of integers. Default: _false_.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: _true_.\n \n     '\n - keyword: connectNulls\n   name: Connect Null Data Points\n   types: Boolean\n   description: 'Determines whether to connect an area across null points, or render\n     a gap between the two points on either side of the null. Default: _false_.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: colorScheme\n   name: Color scheme\n   types: Any type\n   description: 'Determines which color scheme to use in the chart. Use one of the\n     following valid values: `\"CLASSIC\"` (default), `\"MIDNIGHT\"`, `\"OCEAN\"`, `\"MOSS\"`,\n     `\"BERRY\"`, `\"PARACHUTE\"`, `\"RAINFOREST\"`, `\"SUNSET\"` or define a custom color\n     scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See\n     [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the chart height. Valid values: `\"MICRO\"`, `\"SHORT\"`, `\"MEDIUM\"`\n     (default), `\"TALL\"`. See [Chart Heights](Chart_Heights.md) for guidance on using\n     the `\"MICRO\"` size.\n \n     '\n - keyword: xAxisStyle\n   name: X-Axis Style\n   types: Text\n   description: 'Determines how to display the labels and axis separators for the X-Axis.\n     Valid values: `\"STANDARD\"` (default), `\"NONE\"`.\n \n     '\n - keyword: yAxisStyle\n   name: Y-Axis Style\n   types: Text\n   description: 'Determines how to display the labels, axis separators, and grid lines\n     for the Y-Axis. Valid values: `\"STANDARD\"` (default), `\"MINIMAL\"`, `\"NONE\"`.\n \n     '\n - keyword: data\n   name: Data\n   types: Any type\n   description: Reference to the record type used for the source of this chart. Can\n     accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\n - keyword: config\n   name: Chart Configuration\n   types: AreaChartConfig\n   description: 'Configures how to display data on the chart, including fields used\n     for calculations and grouping, using [a!areaChartConfig()](Area_Chart_Config_Component.md).\n     Only applies when using a record type as a source in the _data_ parameter.\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, chart data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: \"How often chart data gets refreshed in minutes. When null, chart data\n     will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`,\n     `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: \"When true, chart data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh chart data\n     when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_. \\n\"\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: \"Refreshes chart data each time any of these specific variables change.\n     This allows you to refresh the chart data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n     \\n\"\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes chart data each time a specified event completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Area Chart\n space: sail_component\n ---\n \n ## Function\n \n {{ page.fncsyntax }}\n \n Displays a series of numerical data as points connected by lines with the area between the line and axis shaded. Use an area chart to visualize trends over time and compare multiple values. If specific values are more important than the trend, consider using a [column chart](Column_Chart_Component.md). \n \n **See also**:\n \n - [Chart Color Schemes](Chart_Color_Scheme.md)\n - [Configure Charts Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"categories\", \"name\": \"Categories\", \"types\": \"List of Variant\", \"description\": \"Text, Date, or Date and Time array to display on the x-axis below each data point. If you are using an array of Date or Date and Time, make sure the data is sorted prior to using it as a category.\\n\"}, {\"keyword\": \"series\", \"name\": \"Series\", \"types\": \"List of AreaChartSeries\", \"description\": \"Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\"}, {\"keyword\": \"xAxisTitle\", \"name\": \"X-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the independent (horizontal) axis.\"}, {\"keyword\": \"yAxisTitle\", \"name\": \"Y-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the dependent (vertical) axis.\"}, {\"keyword\": \"yAxisMin\", \"name\": \"Min Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the vertical axis.\"}, {\"keyword\": \"yAxisMax\", \"name\": \"Max Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the vertical axis.\"}, {\"keyword\": \"stacking\", \"name\": \"Stacking\", \"types\": \"Text\", \"description\": \"Determines if series values display as stacked, or stacked to a height of 100% to show the contribution to the whole, or overlapping. Valid values: `\\\"NORMAL\\\"` (default), `\\\"PERCENT_TO_TOTAL\\\"`, `\\\"NONE\\\"`.    \\n\"}, {\"keyword\": \"referenceLines\", \"name\": \"Reference Lines\", \"types\": \"List of Variant\", \"description\": \"Array of reference line values for each threshold to be defined on the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\\n\"}, {\"keyword\": \"showLegend\", \"name\": \"Show legend\", \"types\": \"Boolean\", \"description\": \"Determines if a color legend displays below the chart. Default: _true_.\\n\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed next to each data point. Default: _false_.\\n\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for each data point. Default: _true_.\\n\"}, {\"keyword\": \"allowDecimalAxisLabels\", \"name\": \"Allow decimal axis labels\", \"types\": \"Boolean\", \"description\": \"Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: _false_.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: _true_.\\n\"}, {\"keyword\": \"connectNulls\", \"name\": \"Connect Null Data Points\", \"types\": \"Boolean\", \"description\": \"Determines whether to connect an area across null points, or render a gap between the two points on either side of the null. Default: _false_.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"colorScheme\", \"name\": \"Color scheme\", \"types\": \"Any type\", \"description\": \"Determines which color scheme to use in the chart. Use one of the following valid values: `\\\"CLASSIC\\\"` (default), `\\\"MIDNIGHT\\\"`, `\\\"OCEAN\\\"`, `\\\"MOSS\\\"`, `\\\"BERRY\\\"`, `\\\"PARACHUTE\\\"`, `\\\"RAINFOREST\\\"`, `\\\"SUNSET\\\"` or define a custom color scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the chart height. Valid values: `\\\"MICRO\\\"`, `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`. See [Chart Heights](Chart_Heights.md) for guidance on using the `\\\"MICRO\\\"` size.\\n\"}, {\"keyword\": \"xAxisStyle\", \"name\": \"X-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels and axis separators for the X-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"yAxisStyle\", \"name\": \"Y-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"MINIMAL\\\"`, `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Any type\", \"description\": \"Reference to the record type used for the source of this chart. Can accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\"}, {\"keyword\": \"config\", \"name\": \"Chart Configuration\", \"types\": \"AreaChartConfig\", \"description\": \"Configures how to display data on the chart, including fields used for calculations and grouping, using [a!areaChartConfig()](Area_Chart_Config_Component.md). Only applies when using a record type as a source in the _data_ parameter.\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh chart data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_. \\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`). \\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes chart data each time a specified event completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}]\n \n ## Configuration\n \n There are two ways to configure an area chart:\n \n 1. Set a record type as the data source and define fields to display on the chart.\n 2. Perform your own query and define lists of data within the categories and series.\n \n If you have a record type that uses a database as the source, or a record type with [data sync](records-data-sync.md) enabled, we recommend using the record type as the source of your chart. This configuration is easier because Appian will perform the query for you and display the results directly in the chart.\n \n If your record type uses a web service as the source and does not have data sync enabled, use the *categories* and *series* to construct the chart manually.\n \n ### Using record data\n \n Configuring an area chart using a record type as the source requires using two parameters: *data* and *config*. Once you provide a record type in the *data* parameter and provide the fields in the *config* parameter, the chart displays the results.\n \n See [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md) for details on using a record type as the source. See [Build Reports from Records](report-with-records.md) for examples of reports created with different charts.\n \n ### Using categories and series\n \n When using *categories* and *series*, you must provide the list of data labels and values directly to these parameters. \n \n #### Categories\n \n - The order of items in the *categories* array determines the display order of categories on the chart with the left-most item in the array appearing on the far left of the x-axis.\n - For each null or empty item in the array passed to *categories*, `[Category #]` displays on the x-axis with `#` as the index number in the *categories* array of the null or empty item. For example, `[Category 1]`.\n - The index of each item in the *categories* array must match with the index of its *series* data value. \n \n #### Series\n \n - A single *Series* item produces a single line with line points for each *categories* item. Multiple *series* items produce multiple lines with one line for each series label item displayed in a distinct color.\n - Use [a!chartSeries()](Chart_Series_Component.md) to create the Chart Series array.\n - If a series data value is greater than the *Max Y-Axis* value or less than the *Min Y-Axis* value, the line line and shaded area will not appear on the chart.\n - If the *series* argument has a non-null label value paired with a 0, null, or empty data value, the data value still displays in the legend.\n - If the *series* argument has a null or empty label value paired with a non-null data value, the label value displays as `[Series #]` with `#` as the index number of the data value. For example, `[Series 1]`.\n \n ## Usage considerations\n \n ### Using the stacking parameter\n - The stacking parameter has three possible values: \n   - `\"NONE\"` is best for showing an overlapping area chart. This will shade each line from its vertical value to the common baseline (zero). Use this value when you want to compare two values. If you need to compare more than two values, consider using a [line chart](Line_Chart_Component.md) instead since it may be hard for users to read multiple overlapping areas. See [Area charts vs. line charts](#area-charts-vs-line-charts) for other considerations.\n \n   - `\"NORMAL\"` is best for showing part-to-whole relationships. This will stack each value on top of each other so the topmost line corresponds to the total of all values. Use this value when you want to see a breakdown of a total.\n \n   - `\"PERCENT_TO_TOTAL\"` is best for showing the distribution of categories as part of a whole. The Y-axis will display values starting from 0% (the baseline) to 100%. Use this value when the cumulative total is unimportant.\n   \n     > appian-style-note\n     > If you've set a *Min Y-Axis* or *Max Y-Axis* value, the value will correspond to a percentage. For example, if you set a *Min Y-Axis* of 20, it will display as 20%.\n \n ### Area charts vs. line charts\n - Area charts are most similar to [line charts](Line_Chart_Component.md) in that they are great for showing trends over time. So when should you choose an area chart or a line chart?\n   - Consider using an area chart to display large differences between multiple data points, or when you need to show how multiple data points relate to a total value.\n   - Consider using a line chart to show multiple data comparisons over time.\n - For more information on which type of chart to use in your reports, see [Charts design guidance](sail/ux-charts.md).\n \n ### Chart refresh behavior\n \n - You can define `a!refreshVariable` parameters directly in the chart without creating additional local variables. The only exception being `refreshOnVarChange`, which refreshes the chart after a specific local variable has changed.\n - When you use a record type as the source of your chart, it's recommended to use the refresh parameters in the chart instead of using local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function. This is because the refresh behavior will automatically apply to the fields specified in the *data* parameter of the chart.\n - If you're not using a record type as the source of your chart, use local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function to define refresh behavior since you won't use the *data* parameter to configure your chart. \n \n ## Example\n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n The examples below demonstrate how to configure your charts using categories and series. For examples on using record data, see [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md).\n \n ### Multiple series area chart with normal stacking\n \n ```sail\n {\n   a!areaChartField(\n     label: \"Cases by Month\",\n     labelPosition: \"ABOVE\",\n     categories: {\"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\"},\n     series: {\n       a!chartSeries(label: \"Met SLA\", data: {72, 91, 93, 95, 92, 99, 98, 99, 79, 83, 90, 99}),\n       a!chartSeries(label: \"Missed SLA\", data: {12, 55, 26, 61, 30, 29, 49, 37, 62, 51, 33, 29})\n     },\n     stacking: \"NORMAL\",\n     colorScheme: \"SUNSET\",\n   )\n }\n ```\n \n Displays the following:\n \n ![Area chart with normal stacking](images/example-1-area-chart.png){:.screenshot}\n \n ### Multiple series area chart with percent to total stacking\n \n ```sail\n {\n   a!areaChartField(\n     label: \"New Customers by Industry\",\n     labelPosition: \"ABOVE\",\n     categories: {\"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"},\n     series: {\n       a!chartSeries(label: \"Retail\", data: {69, 54, 81, 74, 73, 64, 74, 52, 64, 63, 72}),\n       a!chartSeries(label: \"Healthcare\", data: {28, 29, 39, 34, 40, 45, 47, 51, 62, 66, 69}),\n       a!chartSeries(label: \"Real Estate\", data: {2, 5, 6, 9, 23, 9, 17, 17, 62, 51, 50}),\n       a!chartSeries(label: \"Food Services\", data: {1, 2, 2, 7, 1, 2, 10, 7, 22, 21, 29})\n     },\n     stacking: \"PERCENT_TO_TOTAL\",\n     colorScheme: \"CLASSIC\"\n   )\n }\n ```\n \n Displays the following:\n \n ![Area chart with percent to toal stacking](images/example-2-area-chart.png){:.screenshot}\n \n \n ### Multiple series area chart with no stacking\n \n To learn how to create this area chart, see the [Dynamically Show Sales by Product Category Compared to Total Sales](recipe-show-total-sales-compared-to-sales-per-category.md) pattern.\n \n \n ![Area chart with no stacking](images/example-3-area-chart.png){:.screenshot}"}, {"doc": "Columns_Layout.md", "content": "---\n layout: function\n title: Columns Layout\n category: function_page\n compatibility: -crf\n excerpt: Displays any number of columns alongside each other. On narrow screens and\n   mobile devices, columns are stacked.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!columnsLayout\n fncsubcat: Layouts\n parameters:\n - keyword: columns\n   name: Columns\n   types: Any Type\n   description: 'Columns to display using a [column layout](Column_Layout.md), `a!columnLayout()`.\n \n     '\n - keyword: alignVertical\n   name: Vertical Alignment\n   types: Text\n   description: 'Determines vertical alignment of all column content with the layout.\n     Valid values are `\"TOP\"` (default), `\"MIDDLE\"`, and `\"BOTTOM\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: stackWhen\n   name: Stack When\n   types: List of Text\n   description: 'Determines the window width at which column layouts stack vertically.\n     List all widths where columns should stack. Valid Values: `\"PHONE\"` (default),\n     `\"TABLET_PORTRAIT\"`, `\"TABLET_LANDSCAPE\"`,`\"DESKTOP\"`, `\"DESKTOP_WIDE\"`, `\"NEVER\"`.\n \n     '\n - keyword: showDividers\n   name: Show Dividers\n   types: Boolean\n   description: 'Determines whether dividers appear between the columns. Default: false.\n \n     '\n - keyword: spacing\n   name: Column Spacing\n   types: Text\n   description: 'Determines the space between columns in the layout when they are not\n     stacked. Valid values: `\u201cSTANDARD\u201d` (default), `\u201cNONE\u201d`, `\u201cDENSE\u201d`, `\u201cSPARSE\u201d`.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Columns Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!columnsLayout \n  function syntax: a!columnsLayout (columns,alignVertical,showWhen,marginBelow,stackWhen,showDividers,spacing,marginAbove)\n \n Displays any number of columns alongside each other. On narrow screens and mobile devices, columns are stacked.\n \n **See also**:\n \n - [Responsive Design](responsive_design.md)\n - [Columns and Side By Side design guidance](sail/ux-columns-and-side-by-side.md)\n \n ## Parameters\n \n [{\"keyword\": \"columns\", \"name\": \"Columns\", \"types\": \"Any Type\", \"description\": \"Columns to display using a [column layout](Column_Layout.md), `a!columnLayout()`.\\n\"}, {\"keyword\": \"alignVertical\", \"name\": \"Vertical Alignment\", \"types\": \"Text\", \"description\": \"Determines vertical alignment of all column content with the layout. Valid values are `\\\"TOP\\\"` (default), `\\\"MIDDLE\\\"`, and `\\\"BOTTOM\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"stackWhen\", \"name\": \"Stack When\", \"types\": \"List of Text\", \"description\": \"Determines the window width at which column layouts stack vertically. List all widths where columns should stack. Valid Values: `\\\"PHONE\\\"` (default), `\\\"TABLET_PORTRAIT\\\"`, `\\\"TABLET_LANDSCAPE\\\"`,`\\\"DESKTOP\\\"`, `\\\"DESKTOP_WIDE\\\"`, `\\\"NEVER\\\"`.\\n\"}, {\"keyword\": \"showDividers\", \"name\": \"Show Dividers\", \"types\": \"Boolean\", \"description\": \"Determines whether dividers appear between the columns. Default: false.\\n\"}, {\"keyword\": \"spacing\", \"name\": \"Column Spacing\", \"types\": \"Text\", \"description\": \"Determines the space between columns in the layout when they are not stacked. Valid values: `\\u201cSTANDARD\\u201d` (default), `\\u201cNONE\\u201d`, `\\u201cDENSE\\u201d`, `\\u201cSPARSE\\u201d`.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Stacking on mobile\n - On mobile phones, columns are stacked by default.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Three columns within one columns layout\n \n ```sail \n a!columnsLayout(\n   columns: {\n     a!columnLayout(\n       contents: {\n         a!textField(\n           label: \"Customer\",\n           value: \"Jane Doe\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Status\",\n           value: \"Active\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Priority\",\n           value: \"High\",\n           readOnly: true\n         )\n       }\n     ),\n     a!columnLayout(\n       contents: {\n         a!textField(\n           label: \"Customer\",\n           value: \"John Smith\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Status\",\n           value: \"Prospective\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Priority\",\n           value: \"High\",\n           readOnly: true\n         )\n       }\n     ),\n     a!columnLayout(\n       contents: {\n         a!textField(\n           label: \"Customer\",\n           value: \"Michael Johnson\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Status\",\n           value: \"Prospective\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Priority\",\n           value: \"Medium\",\n           readOnly: true\n         )\n       }\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of three columns within one columns layouts](images/Columnslayout_simple_172.png){:.screenshot}\n \n ### Columns layout nested in another columns layout\n \n ```sail \n a!columnsLayout(\n   columns: {\n     a!columnLayout(\n       contents: {\n         a!textField(\n           label: \"Customer\",\n           value: \"Jane Doe\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Status\",\n           value: \"Active\",\n           readOnly: true\n         ),\n         a!textField(\n           label: \"Priority\",\n           value: \"High\",\n           readOnly: true\n         )\n       }\n     ),\n     a!columnLayout(\n       contents: {\n         a!columnsLayout(\n           columns: {\n             a!columnLayout(\n               contents: {\n                 a!textField(\n                   label: \"Customer\",\n                   value: \"John Smith\",\n                   readOnly: true\n                 ),\n                 a!textField(\n                   label: \"Status\",\n                   value: \"Prospective\",\n                   readOnly: true\n                 ),\n                 a!textField(\n                   label: \"Priority\",\n                   value: \"High\",\n                   readOnly: true\n                 )\n               }\n             ),\n             a!columnLayout(\n               contents: {\n                 a!textField(\n                   label: \"Customer\",\n                   value: \"Michael Johnson\",\n                   readOnly: true\n                 ),\n                 a!textField(\n                   label: \"Status\",\n                   value: \"Prospective\",\n                   readOnly: true\n                 ),\n                 a!textField(\n                   label: \"Priority\",\n                   value: \"Medium\",\n                   readOnly: true\n                 )\n               }\n             )\n           }\n         )\n       }\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of nested columns layouts](images/Columnslayout_nested_172.png){:.screenshot}"}, {"doc": "User_Picker_Component.md", "content": "---\n layout: function\n title: User Picker Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for the selection of one or more users.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldUsers\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n \n     '\n - keyword: groupFilter\n   name: Group Filter\n   types: Group\n   description: 'When present, only users who are members of this group are suggested.\n \n     '\n - keyword: value\n   name: Display Value\n   types: List of Username\n   description: Array of currently selected users.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected users\n     when the user selects or removes a user. Use a!save() to save a modified or alternative\n     value to a variable.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: User Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldUsers \n  function syntax: a!pickerFieldUsers (label,instructions,required,requiredMessage,readOnly,disabled,maxSelections,groupFilter,value,validations,validationGroup,saveInto,labelPosition,placeholder,helpTooltip,accessibilityText,showWhen)\n \n Displays an autocompleting input for the selection of one or more users.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\\n\"}, {\"keyword\": \"groupFilter\", \"name\": \"Group Filter\", \"types\": \"Group\", \"description\": \"When present, only users who are members of this group are suggested.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Username\", \"description\": \"Array of currently selected users.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected users when the user selects or removes a user. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Saving and displaying values and placeholders\n \n - Any nulls in the array passed to selected users are not displayed.\n - The component always saves an array regardless of how many selections have been made.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Filtering and permissions\n \n - All user members are suggested when *groupFilter* is used, including users who are members of member groups and users who are members by rule.\n - The user viewing the picker must have access to view any users passed to the value. Only users that the viewing user has permissions to see appear in the suggestions list. When *Group Filter* is not null, the viewing user must have permission to view members of the filter group for any suggestions to be made."}, {"doc": "card-choices-tiles.md", "content": "---\n layout: function\n title: Tiles Template\n category: function_page\n compatibility: -crf\n excerpt: 'Displays a tile card template with a stacked icon, primary text, and secondary\n   text. For use in the [Card Choice Field](card-choices-component.md) *cardTemplate*\n   parameter.\n \n   '\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!cardTemplateTile\n fncsubcat: Selection\n parameters:\n - keyword: id\n   name: Id\n   types: Any Type\n   description: 'Value that identifies the card.\n \n     '\n - keyword: primaryText\n   name: Primary Text\n   types: Text\n   description: 'Optional text to display on the first line inside the card.\n \n     '\n - keyword: secondaryText\n   name: Secondary Text\n   types: Text\n   description: 'Optional text to display beneath the primary text inside the card.\n \n     '\n - keyword: icon\n   name: Icon\n   types: Text\n   description: 'Icon to display inside the card.\n \n     '\n - keyword: iconColor\n   name: Icon Color\n   types: Text\n   description: 'Determines the icon color. Valid values: Any hex color or `\"ACCENT\"`\n     (default), `\"STANDARD\"`, `\"SECONDARY\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`.\n \n     '\n - keyword: iconAltText\n   name: Icon Alternative Text\n   types: Text\n   description: 'Equivalent alternate text for use by screen readers.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: 'Text to display on mouseover (web) or tap (mobile).\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the card is displayed in the set of card choices.\n     When set to false, the card is hidden. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Tiles Template\n scsubcat: Card_Choices_Templates\n space: sail_component\n ---\n \n ## Function\n \n function name: a!cardTemplateTile \n  function syntax: a!cardTemplateTile (id,primaryText,secondaryText,icon,iconColor,iconAltText,tooltip,showWhen)\n \n Displays a tile card template with a stacked icon, primary text, and secondary text. For use in the [Card Choice Field](card-choices-component.md) *cardTemplate* parameter.\n \n \n ## Parameters\n \n [{\"keyword\": \"id\", \"name\": \"Id\", \"types\": \"Any Type\", \"description\": \"Value that identifies the card.\\n\"}, {\"keyword\": \"primaryText\", \"name\": \"Primary Text\", \"types\": \"Text\", \"description\": \"Optional text to display on the first line inside the card.\\n\"}, {\"keyword\": \"secondaryText\", \"name\": \"Secondary Text\", \"types\": \"Text\", \"description\": \"Optional text to display beneath the primary text inside the card.\\n\"}, {\"keyword\": \"icon\", \"name\": \"Icon\", \"types\": \"Text\", \"description\": \"Icon to display inside the card.\\n\"}, {\"keyword\": \"iconColor\", \"name\": \"Icon Color\", \"types\": \"Text\", \"description\": \"Determines the icon color. Valid values: Any hex color or `\\\"ACCENT\\\"` (default), `\\\"STANDARD\\\"`, `\\\"SECONDARY\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`.\\n\"}, {\"keyword\": \"iconAltText\", \"name\": \"Icon Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text for use by screen readers.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display on mouseover (web) or tap (mobile).\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the card is displayed in the set of card choices. When set to false, the card is hidden. Default: true.\\n\"}]\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 580 %} \n a!localVariables(\n   local!save, \n   {\n     a!sectionLayout(\n       label: \"What can we help you with today?\",\n       labelSize: \"LARGE\",\n       contents: {\n         a!cardChoiceField(\n           label: \"What can we help you with today?\",\n           labelPosition: \"COLLAPSED\",\n           instructions: \"\",\n           data: {\n             a!map(id: 1, icon: \"shipping-fast\", primaryText: \"Order Tracking\", iconAltText: \"Delivery truck\"),\n             a!map(id: 2, icon: \"box-open\", primaryText: \"Problem with Order\", iconAltText: \"open box\" ),\n             a!map(id: 3, icon: \"credit-card\", primaryText: \"Refund\", iconAltText: \"credit card\"),\n             a!map(id: 4, icon: \"tachometer\", primaryText: \"Order Status\", iconAltText: \"gauge\")\n \n           },\n           sort: {\n             a!sortInfo(\n               field: \"primaryText\",\n               ascending: true\n             )\n           },\n           cardTemplate: a!cardTemplateTile(\n             id: fv!data.id,\n             primaryText: fv!data.primaryText,\n             icon: fv!data.icon,\n             iconAltText: fv!data.iconAltText\n           ),\n           value: local!save,\n           saveInto: local!save,\n           maxSelections: 1\n         )\n       }\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Column_Chart_Config_Component.md", "content": "---\n layout: function\n title: Column Chart Configuration\n category: function_page\n compatibility: -crf\n excerpt: Contains configuration for how to display data in a column chart.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples\n fncname: a!columnChartConfig\n fncsubcat: Charts\n fncsyntax: a!columnChartConfig(primaryGrouping, secondaryGrouping, measures, sort,\n   dataLimit, link, showIntervalsWithNoData)\n parameters:\n - keyword: primaryGrouping\n   name: Primary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display on the axis in the chart, configured\n     using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: secondaryGrouping\n   name: Secondary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display in the stacking or grouped bars\n     in the chart, configured using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: measures\n   name: Measures\n   types: Measure\n   description: 'Defines the numerical calculations for data in the chart, configured\n     using [a!measure()](Measure_Component.md). If no measure is provided, a count\n     of records shows as the measurement in the chart.\n \n     '\n - keyword: sort\n   name: Sort\n   types: SortInfo\n   description: 'Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending\n     or descending order. Use the alias of any groupings or measures to sort by the\n     values in the chart. Use a record field or related record field reference to sort\n     by data that is not referenced in the chart.\n \n     '\n - keyword: dataLimit\n   name: Data Limit\n   types: Integer\n   description: 'Maximum number of data points to display on the chart. Default: 100.\n     Valid values: 1-5000.\n \n     '\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to execute when a user selects a data point on the chart. Use\n     `fv!selection` to pass context from the selection made on the chart to the link.\n     Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\n \n     '\n - keyword: showIntervalsWithNoData\n   name: Show time intervals with no data\n   types: Boolean\n   description: 'Determines whether the axis in the chart displays date or time values\n     that do not have a value associated with them. For example, show January, February,\n     and March, even if February has no data. This parameter is only available when\n     a Date, Time, or Date and Time field is used as the primary grouping. Default:\n     _false_.\n \n     '\n reftype: sailcomponent\n scdisplayname: Column Chart Configuration\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!columnChartConfig \n  function syntax: a!columnChartConfig (primaryGrouping,secondaryGrouping,measures,sort,dataLimit,link,showIntervalsWithNoData)\n \n Contains configuration for how to display data in a column chart. See the [Column Chart Component](Column_Chart_Component.md) page for examples on using this configuration supporting function.\n \n **See also**:\n \n - [Chart Configuration Using Records](Chart_Configuration_Using_Records.md)\n - [Chart Color Schemes](Chart_Color_Scheme.md)\n \n ## Parameters\n \n [{\"keyword\": \"primaryGrouping\", \"name\": \"Primary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display on the axis in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"secondaryGrouping\", \"name\": \"Secondary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display in the stacking or grouped bars in the chart, configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"measures\", \"name\": \"Measures\", \"types\": \"Measure\", \"description\": \"Defines the numerical calculations for data in the chart, configured using [a!measure()](Measure_Component.md). If no measure is provided, a count of records shows as the measurement in the chart.\\n\"}, {\"keyword\": \"sort\", \"name\": \"Sort\", \"types\": \"SortInfo\", \"description\": \"Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart.\\n\"}, {\"keyword\": \"dataLimit\", \"name\": \"Data Limit\", \"types\": \"Integer\", \"description\": \"Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to execute when a user selects a data point on the chart. Use `fv!selection` to pass context from the selection made on the chart to the link. Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\\n\"}, {\"keyword\": \"showIntervalsWithNoData\", \"name\": \"Show time intervals with no data\", \"types\": \"Boolean\", \"description\": \"Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: _false_.\\n\"}]\n \n ## Usage considerations\n \n ### Using a!columnChartConfig()\n \n - `a!columnChartConfig()` is always used within a column chart component.\n - This configuration is used when a record type is defined as the data source for a column chart.\n - If no measure is provided, the chart displays a count of records. Also, the label displays as `Count of <primary key field name>`.\n \n ### Using groups and data limits\n \n - The *primaryGrouping* is required to display data on the chart. The data values returned from the grouping display on the horizontal axis.\n - The *secondaryGrouping* is optional; if this parameter is provided, the data values for the secondary grouping will display in the legend and / or tooltips if they are enabled.\n - The *dataLimit* determines the total number of data points displayed in the chart. When both a primary and secondary grouping are provided, there is a data point for each unique combination of values: with 3 values in your primary grouping and 4 values in your secondary grouping, you will have 12 values on your chart.\n \n ### Using dynamic links and aliases\n \n - When a dynamic link is added to the *link* parameter, the current selected data is available using `fv!selection`. This variable returns a map that contains each of the field aliases as the key and the unformatted value as the value. Since the alias is used for the key, aliases are required for each grouping and measure when using a link. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#configure-chart-links) for an example of how to configure a link.\n \n ### Using the sort parameter\n - You can sort by the alias of any groupings or measures, or by any fields that are not directly referenced in the chart as long as they are of type Number (Integer), Number (Decimal), Date, Date and Time, Time, or Boolean. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md#stacked-column-chart-of-cases-by-status-and-priority) for an example of sorting by a field not referenced in the chart.\n - When configuring sort in Design Mode, you must use the alias of any groupings or measures to sort by the fields in the chart. In Expression Mode, you can use the alias or the field name if the alias is not provided.\n \n ### Using the showIntervalsWithNoData parameter\n - To use the *showIntervalsWithNoData* parameter, the *primaryGrouping* must be a Date, Time, or Date and Time field, and have a [time interval](Grouping_Component.md#interval) set to a value other than `\"AUTO\"`.  For example:\n   \n   {% include zoompic.html url=\"images/column-chart-show-no-data.png\" %}\n \n - When you configure your chart in Design Mode, the *showIntervalsWithNoData* parameter will automatically be set to `true` when you select a time interval for your primary grouping.\n - When *showIntervalsWithNoData* is `true`, the sort must be on the *primaryGrouping* field.\n - The *dataLimit* applies to this parameter, so any dates without data will be counted in the total number of data points that can be displayed in the chart."}, {"doc": "Record_Picker_Component_22r1.md", "content": "---\n layout: function\n title: a!pickerFieldRecords_22r1\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for the selection of one or more records,\n   filtered by a single record type. Suggestions and picker tokens use the title of\n   the record.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldRecords_22r1\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n \n     '\n - keyword: recordType\n   name: Record Type\n   types: RecordType\n   description: 'Required, singular. Filters picker to select records of this type.\n \n     '\n - keyword: filters\n   name: Filters\n   types: List of QueryFilter\n   description: List of filters to apply when searching for records.\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: 'Array of currently selected records. This will be either a List of\n     Text or a List of Number (Integer), depending on the recordType selected.\n \n     '\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected records\n     when the user selects or removes a record. Use a!save() to save a modified or\n     alternative value to a variable.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: showRecordLinks\n   name: Show Record Links\n   types: Boolean\n   description: \"Determines whether selected records display links to their summary\n     views. Default: true.     \\n\"\n reftype: sailcomponent\n scdisplayname: Record Picker\n space: sail_component\n evolved_fncname: a!pickerFieldRecords\n evolved_reason: Updated the _filters_ parameter so it can now accept a single [logical\n   expression](fnc_system_a_querylogicalexpression.md) or a list of [query filters](fnc_system_a_queryfilter.md)\n   to determine which records appear in the picker\n ---\n \n ## Function\n \n function name: a!pickerFieldRecords_22r1 \n  function syntax: a!pickerFieldRecords_22r1 (label,labelPosition,instructions,helpTooltip,placeholder,maxSelections,recordType,filters,value,saveInto,required,requiredMessage,readOnly,disabled,validations,validationGroup,accessibilityText,showWhen,showRecordLinks)\n \n Displays an autocompleting input for the selection of one or more records, filtered by a single record type. Suggestions and picker tokens use the title of the record.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\\n\"}, {\"keyword\": \"recordType\", \"name\": \"Record Type\", \"types\": \"RecordType\", \"description\": \"Required, singular. Filters picker to select records of this type.\\n\"}, {\"keyword\": \"filters\", \"name\": \"Filters\", \"types\": \"List of QueryFilter\", \"description\": \"List of filters to apply when searching for records.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"Array of currently selected records. This will be either a List of Text or a List of Number (Integer), depending on the recordType selected.\\n\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected records when the user selects or removes a record. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"showRecordLinks\", \"name\": \"Show Record Links\", \"types\": \"Boolean\", \"description\": \"Determines whether selected records display links to their summary views. Default: true.     \\n\"}]\n \n ## Usage considerations\n \n ### Suggestions and permissions\n \n - Suggestions are based on the fields used in the record title. This is equivalent to the search functionality in a feed-style record list.\n   - If you are having trouble getting your record picker to work for a service-backed record type, make sure the record list search is working correctly. See the [Service-Backed Record Type Tutorial](Service-Backed_Record_Tutorial.md) for an example of how to configure this.\n - Only records that the viewing user has permissions to see appear in the suggestions list, as determined by the default filters in the record type.\n \n ### Selections and placeholders\n \n - Any nulls in the array passed to selected records are not displayed. A `[Not Available]` token is displayed for any invalid identifiers in the selected records array.\n - The component always saves an array regardless of how many selections have been made.\n - By default, all selected record tokens include a link to the record unless *showRecordLinks* is false. Consider setting *showRecordLinks* to false when selecting reference data from the picker. See [Select a record from a record type without a link to the record](#select-a-record-from-a-record-type-without-a-link-to-the-record) for an example.\n - This picker cannot be used to selected records of a rule-backed record type (deprecated).\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ## Examples\n \n *Record type object references are specific to each environment. If you copy and paste these examples into an interface, they will not evaluate. Use them as a references only.*\n \n ### Select a record from a record type \n \n ```sail \n a!localVariables(\n   local!storedRecord,\n   a!pickerFieldRecords(\n     label: \"Choose an Employee Record\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Employee)  \n      * with a valid record type reference in your environment. \n      */\n     recordType: recordType!Employee,\n     value: local!storedRecord,\n     saveInto: local!storedRecord\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a record picker with a record from a record type selected](images/Record_picker_example_172.png){:.screenshot}\n \n ### Select a record from a record type with a filter\n \n ```sail \n a!localVariables(\n   local!storedRecord,\n   a!pickerFieldRecords(\n     label: \"Choose an Employee Record\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Employee)  \n      * with a valid record type reference in your environment. \n      */\n     recordType: recordType!Employee,\n     filters:{ \n       a!queryFilter(\n         field: \"department\",\n         operator: \"=\",\n         value: \"Engineering\"\n       )\n     },\n     value: local!storedRecord,\n     saveInto: local!storedRecord\n   )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a record picker with a filter and a record selected](images/Record_Picker_w_Filter_172.png){:.screenshot}\n \n ### Select a record from a record type without a link to the record\n \n ```sail\n a!localVariables(\n   local!storedRecord,\n     a!pickerFieldRecords(\n       label: \"Choose a Case Priority\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Priority)  \n      * with a valid record type reference in your environment. \n      */\n       recordType: recordType!Priority,\n       value: local!storedRecord,\n       saveInto: local!storedRecord,\n     /* Since the Priority record type only contains reference data (the different case priority levels), \n      * we can hide the record links to prevent users from navigating to their summary views.\n      */\n       showRecordLinks: false,\n     )\n )\n ```\n \n Displays the following:\n \n ![screenshot of a record picker without a link to the selected record](images/Record_Picker_without_Link.png){:.screenshot}"}, {"doc": "Gauge_Icon_Component.md", "content": "---\n layout: function\n title: Gauge Icon\n category: function_page\n compatibility: -crf\n excerpt: Displays an icon for use within the gauge field primary text parameter.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gaugeIcon\n fncsubcat: Display\n parameters:\n - keyword: icon\n   name: Icon\n   types: Text\n   description: 'Icon to display. See the list of [available icons](sail/ux-styled-icons.md).\n \n     '\n - keyword: altText\n   name: Icon Alternative Text\n   types: Text\n   description: Equivalent alternate text to display in the hover tooltip and for use\n     by screen readers.\n - keyword: color\n   name: Icon Color\n   types: Text\n   description: 'Determines the icon color. Access the percentage using fv!percentage.\n     Valid values: Any valid hex color or `\"ACCENT\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`. Defaults\n     to the gauge field color.\n \n     '\n reftype: sailcomponent\n scdisplayname: Gauge Icon\n scsubcat: Gauge_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gaugeIcon \n  function syntax: a!gaugeIcon (icon,altText,color)\n \n Displays an icon for use within the [gauge](Gauge_Component.md) field *primaryText* parameter.\n \n **See also**: [Gauge design guidance](sail/ux-gauge.md)\n \n ## Parameters\n \n [{\"keyword\": \"icon\", \"name\": \"Icon\", \"types\": \"Text\", \"description\": \"Icon to display. See the list of [available icons](sail/ux-styled-icons.md).\\n\"}, {\"keyword\": \"altText\", \"name\": \"Icon Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text to display in the hover tooltip and for use by screen readers.\"}, {\"keyword\": \"color\", \"name\": \"Icon Color\", \"types\": \"Text\", \"description\": \"Determines the icon color. Access the percentage using fv!percentage. Valid values: Any valid hex color or `\\\"ACCENT\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`. Defaults to the gauge field color.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n =a!gaugeField(\n   label: \"Evaluations Completed\",\n   percentage: (25 / 26) * 100,\n   primarytext: a!gaugeIcon(icon: \"pencil\"),\n   secondaryText: \"25 of 26\"\n )\n {% endsailbox %}"}, {"doc": "Paging_Grid_Component_191.md", "content": "---\n layout: function\n title: a!gridField_19r1 Component\n reftype: sailcomponent\n category: function_page\n compatibility: -crf\n excerpt: Displays read-only text, links, and images in a grid that supports selecting,\n   sorting, and paging.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gridField_19r1\n fncsubcat: Grids\n fncsyntax: '**a!gridField**( [*label*], [*labelPostion*], [*instructions*], [*helpTooltip*],\n   [*totalCount*], [*emptyGridMessage*], [*columns*], [*identifiers*], [*value*], [*saveInto*],\n   [*selection*], [*requireSelection*], [*requiredMessage*], [*disabled*], [*validations*],\n   [*validationGroup*], [*showWhen*], [*shadeAlternateRows*], [*spacing*], [*height*],\n   [*borderStyle*], [*selectionStyle*], [*rowHeader*] )'\n space: sail_component\n evolved_fncname: a!gridField\n evolved_reason: 'Now supports embedded queries, columns widths, and rich text.\n \n   '\n ---\n \n ## Paging Grid\n \n **Function**: `a!gridField_19r1()`\n \n Displays read-only text, links, and images in a grid that supports selecting, sorting, and paging. To organize editable inputs in a tabular layout, use an [editable grid](Editable_Grid_Component.md).\n \n **Parameters**\n \n <table class=\"appianTable\">\n    <tr>\n       <th>Name</th>\n       <th>Keyword</th>\n       <th>Type</th>\n       <th>Description</th>\n    </tr>\n    <tr>\n       <td>Label</td>\n       <td>label</td>\n       <td>Text </td>\n       <td>Optional text to display as the field label.</td>\n    </tr>\n    <tr>\n       <td>Label Position</td>\n       <td>labelPosition</td>\n       <td>Text </td>\n       <td>\n          Optional text to determine where the label appears. Valid values include\n          <ul>\n             <li><code>\"ABOVE\"</code> (default) Displays the label above the component.</li>\n             <li><code>\"ADJACENT\"</code> Displays the label to the left of the component.</li>\n             <li>\n                <code>\"COLLAPSED\"</code> Hides the label. The label will still be read by screen readers; see <a href=\"building_accessible_applications.md\">accessibility considerations</a> for more information.\n             </li>\n             <li><code>\"JUSTIFIED\"</code> Aligns the label alongside the component starting at the edge of the page.</li>\n          </ul>\n       </td>\n    </tr>\n    <tr>\n       <td>Instructions</td>\n       <td>instructions</td>\n       <td>Text </td>\n       <td>Optional text that displays below the label.</td>\n    </tr>\n    <tr>\n       <td>Help Tooltip</td>\n       <td>helpTooltip</td>\n       <td>Text</td>\n       <td>Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is <code>\"COLLAPSED\"</code>.</td>\n    </tr>\n    <tr>\n       <td>Total Count</td>\n       <td>totalCount</td>\n       <td>Integer </td>\n       <td>Total number of rows of data for all pages in the grid.</td>\n    </tr>\n    <tr>\n       <td>Empty Grid Message</td>\n       <td>emptyGridMessage</td>\n       <td>Text </td>\n       <td>Text to display in the grid when no data is available. Default is <code>\"No items available\".</code></td>\n    </tr>\n    <tr>\n       <td>Columns</td>\n       <td>columns</td>\n       <td>\n          Array of <a href=\"Grid_Text_Column_Component.html\">Text Columns</a> or <a href=\"Grid_Image_Column_Component.html\">Image Columns</a>\n       </td>\n       <td>Holds an array of Text or Image columns that configure and define the data or links to display for each column in the grid. Configured using <code>a!gridTextColumn()</code> or <code>a!gridImageColumn()</code>.</td>\n    </tr>\n    <tr>\n       <td>Identifiers</td>\n       <td>identifiers</td>\n       <td>Text or Integer Array </td>\n       <td>Accepts an array of text or integers that are used to determine which rows are selected.</td>\n    </tr>\n    <tr>\n       <td>Paging and Selection Value</td>\n       <td>value</td>\n       <td>\n          <a href=\"Appian_Data_Types.md#paginginfo\">PagingInfo</a> or <a href=\"Grid_Selection_Component.html\">GridSelection</a> \n       </td>\n       <td>Holds the paging and sorting configurations for the grid as well as which rows in the grid should be selected. When defined with the variable configured in <i>Save Paging and Selection To</i>, it allows users to change the sort column, view another grid page, or select and deselect rows. When the type is GridSelection, checkboxes appear for each row if selection is enabled. When the type is PagingInfo, no checkboxes appear.</td>\n    </tr>\n    <tr>\n       <td>Save Paging and Selection To</td>\n       <td>saveInto</td>\n       <td>Save Array</td>\n       <td>One or more variables that are updated with the paging or grid selection configuration when the user pages, sorts, or changes the grid's selections. Use <code>a!save()</code> to save a modified or alternative value to a variable.</td>\n    </tr>\n    <tr>\n       <td>Selectable</td>\n       <td>selection</td>\n       <td>Boolean</td>\n       <td>Determines if the rows in the grid are selectable. Default is <code>false</code>.</td>\n    </tr>\n    <tr>\n       <td>Selection required</td>\n       <td>requireSelection</td>\n       <td>Boolean</td>\n       <td>Determines if a selection is required to submit the form. Default is <code>false</code>.</td>\n    </tr>\n    <tr>\n       <td>Required Message</td>\n       <td>requiredMessage</td>\n       <td>Text</td>\n       <td>Custom message to be displayed when a selection is required and not provided.</td>\n    </tr>\n    <tr>\n       <td>Disabled</td>\n       <td>disabled</td>\n       <td>Boolean</td>\n       <td>Determines if the user is prevented from changing which rows are selected. Default is <code>false</code>.</td>\n    </tr>\n    <tr>\n       <td>Validations</td>\n       <td>validations</td>\n       <td>Text Array</td>\n       <td>Validation errors to be displayed below the field when the value is not null.</td>\n    </tr>\n    <tr>\n       <td>Validation Group</td>\n       <td>validationGroup</td>\n       <td>Text</td>\n       <td>When present, this field is only validated when a button in the same validation group is clicked.</td>\n    </tr>\n    <tr>\n       <td>Visibility</td>\n       <td>showWhen</td>\n       <td>Boolean</td>\n       <td>Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.</td>\n    </tr>\n    <tr>\n       <td>Spacing</td>\n       <td>spacing</td>\n       <td>Text</td>\n       <td>Determines the spacing within grid cells. Valid values: <code>\"STANDARD\"</code> (default), <code>\"DENSE\"</code>.</td>\n    </tr>\n    <tr>\n       <td>Height</td>\n       <td>height</td>\n       <td>Text</td>\n       <td>Determines the height of the grid. Valid values: <code>\u201cSHORT\u201d</code>, <code>\u201cMEDIUM\u201d</code>, <code>\u201cTALL\u201d</code>, <code>\u201cAUTO\u201d</code> (default). When set to <code>SHORT</code>, <code>MEDIUM</code>, or <code>TALL</code>, the header is frozen.</td>\n    </tr>\n    <tr>\n       <td>Border Style</td>\n       <td>borderStyle</td>\n       <td>Text</td>\n       <td>Determines the style of the grid border. Valid values: <code>\"STANDARD\"</code> (default), <code>\"LIGHT\"</code>.</td>\n    </tr>\n    <tr>\n       <td>Shade Alternate Rows</td>\n       <td>shadeAlternateRows</td>\n       <td>Boolean</td>\n       <td>Determines whether alternate rows are shaded. Default: true.</td>\n    </tr>\n    <tr>\n       <td>Selection Style</td>\n       <td>selectionStyle</td>\n       <td>Text</td>\n       <td>Determines the style when a row is selected. Valid values: <code>\"CHECKBOX\"</code> (default), <code>\"ROW_HIGHLIGHT\"</code>.</td>\n    </tr>\n    <tr>\n       <td>Row Header</td>\n       <td>rowHeader</td>\n       <td>Integer</td>\n       <td>Index of the column to be used as the row header. Screen readers will announce the value in each row header when navigating to other cells within that row. Used only for accessibility; produces no visible change.</td>\n    </tr>\n </table>\n \n **Configuration Notes**\n \n - The paging grid requires certain configurations to render properly. It errors under the following conditions:\n   * The *columns* and *value* parameters are null or empty\n   * The *batchSize* in *Paging and Selection Value* is less than the length of the *data* array in any column\n   * The *startIndex* in *Paging and Selection Value* is greater than the *totalCount* value\n   * The length of the *data* array in any column is null or less than the *totalCount* value\n - Interacting with the grid produces a value of type PagingInfo that is then saved in your *Save Paging and Selection To* parameter. This is used to refresh and render the grid accordingly.\n - Passing a local variable with the `load()` function to the *Value* parameter and passing the same local variable to the *Save Paging and Selection To* parameter allows for re-evaluation of the expression. Re-evaluation occurs when users click a column to change the sorting or navigate to another page of the grid.\n - When using a datasubset obtained using *a!queryEntity()* as the source of data for the paging grid, make sure to set its *fetchTotalCount* parameter to `true`. Otherwise, the `totalCount` field on the resulting datasubset may be invalid (i.e. set to -1). See also: [a!queryEntity() Function](fnc_system_a_queryentity.md).\n - For accessibility purposes, every grid should have a row header configured. The first column containing text is usually the correct choice for row header. See the [SAIL Design System](sail/ux-grids.md#accessibility) for more information.\n \n **Display Notes**\n \n - To reduce clutter on smaller grids, the following happens:\n   * No paging controls are displayed when the grid has 5 or fewer rows and all rows are on one page.\n   * Paging controls to jump to the first or last page are not displayed when a grid has 100 or fewer total items.\n - The order of items in *Columns* determines the order of the columns. The order of items in the *Data* array in each column determines the default order of the data.\n - Spaces and line breaks are supported within a column\u2019s *Data* values but not its *Label* values.\n - If the *Data* value for a column is empty or null, the grid still renders the column with just the label.\n - Each column\u2019s width is determined by the length of the longest value in that column. If the total width is wider than the page or column containing the grid, a horizontal scroll bar displays for users to view the remaining data.\n - Paging and sorting do not function and images do not render when this component is used offline.\n - Grid heights behave as a fixed height on web but a maximum height on mobile.\n - Setting the height of the grid to <code>SHORT</code>, <code>MEDIUM</code>, or <code>TALL</code> will freeze the grid's header and footer. See the [Short Two-Column Grid with Process Task Links](#short-two-column-grid-with-process-task-links) example below.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Grid Showing Static Columns\n \n ```sail\n     =a!gridField_19r1(\n       label: \"Employees\",\n       totalCount: 5,\n       columns: {\n         a!gridTextColumn(\n           label: \"Name\",\n           data: {\"John Smith\", \"Michael Johnson\", \"Mary Reed\", \"Angela Cooper\", \"Elizabeth Ward\"},\n           alignment: \"LEFT\"\n         ),\n         a!gridTextColumn(\n           label: \"Title\",\n           data: {\"Director\", \"Analyst\", \"Software Engineer\", \"Sales\", \"Sales\"},\n           alignment: \"LEFT\"\n         ),\n         a!gridTextColumn(\n           label: \"Department\",\n           data: {\"Engineering\", \"Finance\", \"Engineering\", \"Sales\", \"Sales\"},\n           alignment: \"LEFT\"\n         )\n       },\n       value: a!pagingInfo(\n         startIndex: 1,\n         batchSize: 5,\n         sort: a!sortInfo(\n           field: \"name\",\n           ascending: true\n         )\n       ),\n       rowHeader: 1\n     )\n ```\n \n Displays the following:\n \n <img src=\"images/Grid_simple_75.png\" class=\"screenshot\"/>\n \n ### Single-Column Grid with Paging/Sorting\n \n ```sail\n     =load(\n       local!pagingInfo: a!pagingInfo(startIndex: 1, batchSize: 5, sort: a!sortInfo(field: \"label\", ascending: true)),\n       local!sampleData: {\n         type!LabelValue(label: \"John Smith\"),\n         type!LabelValue(label: \"Michael Johnson\"),\n         type!LabelValue(label: \"Mary Reed\"),\n         type!LabelValue(label: \"Angela Cooper\"),\n         type!LabelValue(label: \"Elizabeth Ward\"),\n         type!LabelValue(label: \"Daniel Lewis\"),\n         type!LabelValue(label: \"Paul Martin\"),\n         type!LabelValue(label: \"Jessica Peterson\"),\n         type!LabelValue(label: \"Mark Hall\"),\n         type!LabelValue(label: \"Rebecca Wood\")\n       },\n       with(\n         local!datasubset: todatasubset(local!sampleData, local!pagingInfo),\n         local!dataForCurrentPage: local!datasubset.data,\n         a!gridField_19r1(\n           label: \"Employees\",\n           instructions: local!pagingInfo,\n           totalCount: local!datasubset.totalCount,\n           columns: {\n             a!gridTextColumn(\n               label: \"Name\",\n               field: \"label\",\n               data: index(local!dataForCurrentPage, \"label\", null),\n               alignment: \"LEFT\"\n             )\n           },\n           value: local!pagingInfo,\n           saveInto: local!pagingInfo\n         )\n       )\n     )\n ```\n \n Displays the following:\n \n <img src=\"images/Grid_complex_75.png\" class=\"screenshot\"/>\n \n **NOTE**: If you sort or page through this example, you\u2019ll notice the instructions change. We\u2019ve configured this value as `local!pagingInfo` to show how the `pagingInfo` value changes each time the expression is re-evaluated.\n \n ### Single-Column Grid with Static Links\n \n ```sail \n     =a!gridField_19r1(\n       totalCount: 4,\n       columns: {\n         a!gridTextColumn(\n           label: \"Company Information\",\n           data:{\n             \"Company Website\",\n             \"LinkedIn\",\n             \"Twitter\",\n             \"Facebook\"\n           },\n           links: {\n             a!safeLink(uri: \"http://www.appian.com\"),\n             a!safeLink(uri: \"http://www.linkedin.com/company/appian-corporation\"),\n             a!safeLink(uri: \"https://twitter.com/appian\"),\n             a!safeLink(uri: \"https://www.facebook.com/AppianCorporation\")\n           },\n           alignment: \"LEFT\"\n         )\n       },\n       value: a!pagingInfo(\n         startIndex: 1,\n         batchSize: 4,\n         sort: a!sortInfo(\n           field: \"name\",\n           ascending: true\n         )\n       )\n     )\n ```\n \n Displays the following:\n \n <img src=\"images/Gridlink_onecol_75.png\" class=\"screenshot\"/>\n \n ### Short Two-Column Grid with Process Task Links\n \n ```sail\n       =load(\n       local!pagingInfo: a!pagingInfo(startIndex: 1, batchSize: -1, sort: a!sortInfo(field: \"label\", ascending: true)),\n       local!sampleData: {\n         type!LabelValue(label: \"Smith, John\"),\n         type!LabelValue(label: \"Johnson, Michael\"),\n         type!LabelValue(label: \"Reed, Mary\"),\n         type!LabelValue(label: \"Cooper, Angela\"),\n         type!LabelValue(label: \"Ward, Elizabeth\"),\n         type!LabelValue(label: \"Garcia, Emilia\"),\n         type!LabelValue(label: \"Klein, Raphael\")\n       },\n       with(\n         local!dataForCurrentPage: todatasubset(local!sampleData, local!pagingInfo).data,\n         a!gridField_19r1(\n           totalCount: length(local!sampleData),\n           columns: {\n             a!gridTextColumn(\n               label: \"Name\",\n               field: \"label\",\n               data: local!dataForCurrentPage.label,\n               alignment: \"LEFT\"\n             ),\n             a!gridTextColumn(\n               label: \"Open Task\",\n               data: {\n                 \"Expense Approval\",\n                 \"Expense Approval\",\n                 \"Timesheet Approval\",\n                 \"Timesheet Approval\",\n                 \"Expense Approval\",\n                 \"Timesheet Approval\",\n                 \"Timesheet Approval\",\n               },\n               links:{\n                 a!processTaskLink(task: 1382),\n                 a!processTaskLink(task: 1377),\n                 a!processTaskLink(task: 536870918),\n                 a!processTaskLink(task: 268436948),\n                 a!processTaskLink(task: 1383),\n                 a!processTaskLink(task: 268439975),\n                 a!processTaskLink(task: 1388),\n               },\n               alignment: \"LEFT\"\n             )\n           },\n           value: local!pagingInfo,\n           saveInto: local!pagingInfo,\n           height: \"SHORT\"\n         )\n       )\n     )\n ```\n \n Displays the following:\n \n <img src=\"images/gridLink_twocol.gif\" class=\"screenshot\"/>\n \n ### Paging Grid with Row Selection\n > appian-style-tip\n > This recipe uses an employee data structure and objects created through the [Use the Write to Data Store Entity Smart Service Function on an Interface](recipe-use-the-write-to-data-store-entity-smart-service-function-on-an-interface.md) recipe. Make sure that recipes has been built first in order to see data in this example.\n \n ```sail\n =load(\n   /* Set the default paging and sorting config */\n   local!gridSelection: a!gridSelection(\n     selected: {},\n     pagingInfo: a!pagingInfo(\n       startIndex: 1,\n       batchSize: 10,\n       sort: a!sortInfo(\n         field: \"lastName\",\n         ascending: true\n       )\n     )\n   ),\n   with(\n     local!datasubset: a!queryEntity(\n       entity: cons!EMPLOYEE_ENTITY,\n       query: a!query(\n         selection: a!querySelection(\n           columns: {\n             a!queryColumn(\n               field: \"firstName\"\n             ),\n             a!queryColumn(\n               field: \"lastName\"\n             ),\n             a!queryColumn(\n               field: \"title\"\n             )\n           }\n         ),\n         pagingInfo: local!gridSelection.pagingInfo\n       ),\n \t  fetchTotalCount: true\n     ),\n     a!sectionLayout(\n       contents: {\n         a!gridField_19r1(\n           label: \"SAIL Example: Employee Grid Selection\",\n           totalCount: local!datasubset.totalCount,\n           columns: {\n             a!gridTextColumn(\n               label: \"First\",\n               field: \"firstName\",\n               data: index(\n                 local!datasubset.data,\n                 \"firstName\",\n                 {}\n               )\n             ),\n             a!gridTextColumn(\n               label: \"Last\",\n               field: \"lastName\",\n               data: index(\n                 local!datasubset.data,\n                 \"lastName\",\n                 {}\n               )\n             ),\n             a!gridTextColumn(\n               label: \"Title\",\n               field: \"title\",\n               data: index(\n                 local!datasubset.data,\n                 \"title\",\n                 {}\n               )\n             )\n           },\n           identifiers: local!datasubset.identifiers,\n           value: local!gridSelection,\n           saveInto: {\n             local!gridSelection\n           },\n           rowHeader: 1,\n           selection: true,\n           shadeAlternateRows: false,\n           selectionStyle: \"ROW_HIGHLIGHT\"\n         ),\n         a!textField(\n           label: \"Selected Employee IDs\",\n           readOnly: true,\n           value: if(\n             length(\n               local!gridSelection.selected\n             ) = 0,\n             \"No employees selected\",\n             joinarray(\n               local!gridSelection.selected,\n               \", \"\n             )\n           )\n         )\n       }\n     )\n   )\n )\n ```\n \n Displays the following:\n \n <img src=\"images/grid_row_selection_example.png\" class=\"screenshot\"/>\n \n ## See Also\n \n [Tempo Report Design Best Practices](Tempo_Report_Design.md#design-best-practices): Includes best practices for configuring a grid on a Tempo report for optimal performance and usability.\n \n [SAIL Design System: Grids](sail/ux-grids.md): Includes UX best practices for designing grids.\n \n [Grid Tutorial](Grid_Tutorial.md): Details the steps for creating a Tempo report using a grid component that shows data queried from an external database and allows for sorting and paging."}, {"doc": "Radio_Button_Component.md", "content": "---\n layout: function\n title: Radio Button Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a limited set of choices from which the user must select one item\n   and saves a value based on the selected choice.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!radioButtonField\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: choiceValues\n   name: Choice Values\n   types: List of Variant\n   description: Array of values associated with the available choices.\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: Value of choice to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice value when\n     the user changes the selection. Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: choiceLayout\n   name: Choice Layout\n   types: Text\n   description: 'Determines the layout. Valid values: `\"STACKED\"` (default), `\"COMPACT\"`.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: choiceStyle\n   name: Choice Style\n   types: Text\n   description: 'Determines how the choices should be displayed on the interface. Valid\n     values: `\"STANDARD\"` (default), `\"CARDS\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Radio Button\n space: sail_component\n ---\n \n ## Function\n \n function name: a!radioButtonField \n  function syntax: a!radioButtonField (label,instructions,required,disabled,choiceLabels,choiceValues,value,validations,saveInto,validationGroup,requiredMessage,labelPosition,choiceLayout,helpTooltip,accessibilityText,showWhen,choiceStyle)\n \n Displays a limited set of choices from which the user must select one item and saves a value based on the selected choice. To save the index instead of a value, use [radio buttons by index](Radio_Button_By_Index_Component.md).\n \n If the choice is not exclusive, then consider using [checkboxes](Checkbox_Component.md) or a [multiple dropdown](Multiple_Dropdown_Component.md) component.\n \n If there are many choices, make the component as large as necessary to display all the options. If a more compact presentation is desirable, consider using a [dropdown](Dropdown_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"choiceValues\", \"name\": \"Choice Values\", \"types\": \"List of Variant\", \"description\": \"Array of values associated with the available choices.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"Value of choice to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice value when the user changes the selection. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"choiceLayout\", \"name\": \"Choice Layout\", \"types\": \"Text\", \"description\": \"Determines the layout. Valid values: `\\\"STACKED\\\"` (default), `\\\"COMPACT\\\"`.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"choiceStyle\", \"name\": \"Choice Style\", \"types\": \"Text\", \"description\": \"Determines how the choices should be displayed on the interface. Valid values: `\\\"STANDARD\\\"` (default), `\\\"CARDS\\\"`.\\n\"}]\n \n ## Usage considerations \n \n ### Using the choiceLayout parameter\n \n - The `\"COMPACT\"` option for *choiceLayout* should only be used for radio buttons with short choice labels, such as \"Yes\", \"No\", or \"Maybe\". When using the `\"COMPACT\"` option, labels with text longer than 2 lines will be truncated. \n - For long labels, use the `\"STACKED\"` option for *choiceLayout*.\n \n ### Using the choiceLayout and choiceValue parameters\n \n - Choices display in the same order as defined in the *choiceLabels* parameter.\n - The *choiceLabels* argument cannot be null.\n - *choiceLabels* and *choiceValues* must be the same length.\n - *choiceValues* cannot contain nulls or duplicate values.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Radio Button with first choice selected by default\n \n {% sailbox 600 %}\n a!localVariables(\n   local!browser: \"ffx\",\n   a!radioButtonField(\n     label: \"Browser\",\n     choiceLabels: {\n       \"Firefox\",\n       \"Chrome\",\n       \"Safari\"\n     },\n     choiceValues: {\n       \"ffx\",\n       \"chr\",\n       \"sfr\"\n     },\n     value: local!browser,\n     saveInto: local!browser\n   )\n )\n {% endsailbox %}\n \n ### Radio Buttons with compact layout and cards style\n \n {% sailbox 600 %}\n a!localVariables(\n   local!selected, \n   {\n     a!radioButtonField(\n     label: \"Did the product meet your needs?\",\n     labelPosition: \"ABOVE\",\n     choiceLabels: {\"Yes\", \"No\"},\n     choiceValues: {1, 2},\n     value: local!selected,\n     saveInto: {local!selected},\n     choiceLayout: \"COMPACT\",\n     choiceStyle: \"CARDS\",\n     validations: {}\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Start_Process_Link_Component.md", "content": "---\n layout: function\n title: Start Process Link\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Defines a link to start a process and navigates the user through any initial\n   chained forms.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!startProcessLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text associated with this link.\n - keyword: processModel\n   name: Process Model\n   types: '[Process Model](Appian_Data_Types.html#process-model)'\n   description: The process model to start. You must provide a constant referencing\n     the process model or a process model UUID.\n - keyword: processParameters\n   name: Process Parameters\n   types: Dictionary\n   description: A dictionary containing the parameters for the process model and their\n     values.\n - keyword: bannerMessage\n   name: Banner Message\n   types: Text\n   description: 'The text shown in the banner when a process starts successfully after\n     completing any initial chained forms. When not provided, no banner is displayed.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the link is displayed in the component. When set\n     to false, the link is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Start Process Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!startProcessLink \n  function syntax: a!startProcessLink (label,processModel,processParameters,bannerMessage,showWhen)\n \n Defines a link to start a process and navigates the user through any initial chained forms. Users are shown the start form or first chained attended node and any subsequent chained forms. When the user submits the last form, the chain completes and the original interface is reloaded. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [Starting Processes From an Interface](Ways_to_Start_a_Process_From_a_Process.md#starting-a-process-from-an-interface)\n - [Process Model Type](Appian_Data_Types.md#process-model)\n - [Link](Link_Component.md), [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text associated with this link.\"}, {\"keyword\": \"processModel\", \"name\": \"Process Model\", \"types\": \"[Process Model](Appian_Data_Types.html#process-model)\", \"description\": \"The process model to start. You must provide a constant referencing the process model or a process model UUID.\"}, {\"keyword\": \"processParameters\", \"name\": \"Process Parameters\", \"types\": \"Dictionary\", \"description\": \"A dictionary containing the parameters for the process model and their values.\"}, {\"keyword\": \"bannerMessage\", \"name\": \"Banner Message\", \"types\": \"Text\", \"description\": \"The text shown in the banner when a process starts successfully after completing any initial chained forms. When not provided, no banner is displayed.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the link is displayed in the component. When set to false, the link is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using start process links offline\n \n - Start process links will not function on the mobile application on a form that is configured to be [available offline](offline-mobile-overview.md).\n \n ## Examples\n \n *Since process model constants are specific to each system, this example does not evaluate in your Test Rules interface. Use it only as a reference.*\n \n ### Start process link that passes parameter data to the process model\n \n ```sail \n a!linkField(\n   links: {\n     a!startProcessLink(\n       label: \"Update Customer Details\",\n       processModel: cons!UPDATE_CUSTOMER_DETAILS_PM,\n       processParameters: {\n         customerId: ri!customer.id\n       },\n       bannerMessage: \"Updated details for \" & ri!customer.name\n     )\n   }\n )\n ```"}, {"doc": "Bulleted_List_Component.md", "content": "---\n layout: function\n title: Bulleted List\n category: function_page\n compatibility: -crf\n excerpt: Displays a bulleted list within a rich text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextBulletedList\n fncsubcat: Display\n parameters:\n - keyword: items\n   name: Items\n   types: Text, [Styled Text](Styled_Text_Component.md), and [List](List_Item_Component.md)\n   description: 'Array of text to display as a bulleted list. Text can be further formatted\n     using `a!richTextItem()`. Nested lists can be created using `a!richTextListItem()`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Bulleted List\n scsubcat: Rich_Text_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextBulletedList \n  function syntax: a!richTextBulletedList (items,showWhen)\n \n Displays a bulleted list within a [rich text](Rich_Text_Component.md) component.\n \n **See also**: [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"items\", \"name\": \"Items\", \"types\": \"Text, [Styled Text](Styled_Text_Component.md), and [List](List_Item_Component.md)\", \"description\": \"Array of text to display as a bulleted list. Text can be further formatted using `a!richTextItem()`. Nested lists can be created using `a!richTextListItem()`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the items parameter\n \n - Specific values within *items* can be further formatted using styled text.\n - Bulleted lists cannot be nested within styled text.\n - If *items* is null or contains an empty array, no list is displayed.\n - If the *items* array contains one or more null values, those items in the list have no text displayed.\n \n ## Examples\n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 530 %} \n a!richTextDisplayField(\n   labelPosition: \"COLLAPSED\",\n   value: {\n     a!richTextBulletedList(\n       items: {\n         \"A\",\n         \"B\",\n         \"C\",\n         a!richTextItem(\n           text: \"D\",\n           style: \"EMPHASIS\"\n         ),\n         \"E\"\n       }\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Rich_Text_Component.md", "content": "---\n layout: function\n title: Rich Text Component\n category: function_page\n compatibility: -crf\n excerpt: Displays text in variety of styles, including bold, italics, underline, links,\n   headers, and numbered and bulleted lists.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextDisplayField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the text value. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`. Does not apply to lists.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: 'Array of rich text to display. Create rich text using a combination\n     of text, a!richTextItem(), a!richTextHeader(), a!richTextImage(), a!richTextIcon(),\n     a!richTextBulletedList(), or a!richTextNumberedList(). Example: `{\"Hello \", a!richTextItem(text:\n     \"World\", style: \"STRONG\"), \"!\"}`.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: preventWrapping\n   name: Prevent Wrapping\n   types: Boolean\n   description: 'Determines if wrapping to multiple lines will be prevented. When set\n     to true, each header, paragraph, or list item will truncate to a single line.\n     Default: false.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: Text to display on mouseover (web) or long press (mobile).\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Rich Text\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextDisplayField \n  function syntax: a!richTextDisplayField (label,labelPosition,instructions,align,value,helpTooltip,accessibilityText,showWhen,preventWrapping,tooltip,marginAbove,marginBelow)\n \n Displays text in variety of styles, including bold, italics, underline, links, headers, and numbered and bulleted lists.\n \n **See also**:\n \n - [Bulleted List](Bulleted_List_Component.md)\n - [Header Text](Header_Text_Component.md)\n - [Inline Image](Inline_Image_Component.md)\n - [List Item](List_Item_Component.md)\n - [Numbered List](Numbered_List_Component.md)\n - [Styled Icon](Styled_Icon_Component.md)\n - [Styled Text](Styled_Text_Component.md)\n - [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the text value. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`. Does not apply to lists.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"Array of rich text to display. Create rich text using a combination of text, a!richTextItem(), a!richTextHeader(), a!richTextImage(), a!richTextIcon(), a!richTextBulletedList(), or a!richTextNumberedList(). Example: `{\\\"Hello \\\", a!richTextItem(text: \\\"World\\\", style: \\\"STRONG\\\"), \\\"!\\\"}`.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"preventWrapping\", \"name\": \"Prevent Wrapping\", \"types\": \"Boolean\", \"description\": \"Determines if wrapping to multiple lines will be prevented. When set to true, each header, paragraph, or list item will truncate to a single line. Default: false.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display on mouseover (web) or long press (mobile).\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Editing rich text\n \n The rich text configuration pane contains a rich text editor to help with designing your interfaces. It supports the following styles:\n \n - Header size\n - Bold\n - Italic\n - Underline\n - Color\n - Safe links\n - Styled icons\n - Web images\n \n If your rich text contains any of the following, it can only be edited in **Configure items** mode or as an expression:\n \n - Non-Web Images\n - Non-Safe Links\n - Functions\n - Variables\n \n ![rich text example](images/rich_text_editor.png){:.screenshot}\n \n > appian-style-tip\n > We recommend using the rich text editor to apply the supported styles, then switching to **Configure items** mode for additional configurations.\n \n ### Displaying values\n \n - If *value* is null or contains an empty array, the *label* and *instructions* render with no rich text displayed.\n - Multiple styles can be applied to text by nesting styled text within itself.\n \n ### Using the preventWrapping parameter\n \n - Don't use the *preventwrapping* parameter in side-by-side layouts that use the `\"MINIMIZE\"` width.\n - Don't use the *preventWrapping* parameter if your rich text display field contains nested list items.\n - When using the *preventwrapping* parameter, the full text automatically appears in a tooltip when you hover over the truncated text.\n \n   ![screenshot of grid column displaying truncated rich text with the full text appearing in a tooltip](images/preventWrapping_grid_example.png){:.screenshot}\n \n ### Reducing render time\n \n - As with any interface, showing many components at once can increase server evaluation time, client rendering time, and network transmission time. The use of styled text, bulleted, and numbered lists all contribute to this. To provide a fast user experience, limit the number of components, including styled text, bulleted, and numbered lists, shown on a single interface. See also: [Interface Evaluation Lifecycle](SAIL_Performance.md).\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Rich text icons and styled text with multiple styles and colors\n \n {% sailbox 600 %}\n a!richTextDisplayField(\n   labelPosition: \"COLLAPSED\",\n   value: {\n     a!richTextItem(\n       text: {\n         a!richTextIcon(icon: \"USER\", caption: \"Name\"),\n         \" Xavier Jones\"\n       },\n       size: \"MEDIUM\",\n       style: { \"STRONG\" }\n     ),\n     char(10),\n     a!richTextItem(\n       text: {\n         a!richTextIcon(icon: \"PHONE\", caption: \"Phone\"),\n         \" (555) 123-4567\"\n       },\n       color: \"SECONDARY\"\n     ),\n     char(10),\n     a!richTextItem(\n       text: {\n         a!richTextIcon(icon: \"BUILDING-O\", caption: \"Location\"),\n         \" Reston, VA\"\n       },\n       color: \"SECONDARY\"\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Grid_Column_Component.md", "content": "---\n layout: function\n title: Read-Only Grid Column Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a column of data as read-only text, links, images, or rich text\n   within the read-only grid.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gridColumn\n fncsubcat: Grids and Lists\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the column header.\n - keyword: sortField\n   name: Sort Field\n   types: Any Type\n   description: 'The field used to sort the grid when selecting this column header.\n     Grids that use record data must use the `recordType!` domain to reference a record\n     field or related record field. For example, `recordType!Case.fields.caseName`.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon in the column header with the specified text as\n     a tooltip.\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: 'The value to display in each cell within the column. The value can\n     be text, `a!imageField()`, `a!linkField()`, `a!richTextDisplayField()`, `a!tagField()`,\n     `a!buttonArrayLayout()`, `a!recordActionField()`, or `a!progressBarField()`. It\n     is evaluated once for each row. Reference fields from the source using dot notation,\n     such as `fv!row.status`, or the identifier using `fv!identifier`.  Grids that\n     use record data must use the `recordType!` domain to reference a record field\n     or related record field. For example, `fv!row[recordType!Case.fields.caseName]`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the column is displayed in the grid. When set to\n     false, the column is hidden and is not evaluated. Default: `true`.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines the alignment for the header label and all values within\n     the column. Valid values: `\"START\"` (default), `\"CENTER\"`, `\"END\"`.\n \n     '\n - keyword: width\n   name: Width\n   types: Text\n   description: 'Determines the column width. Valid values: `\"AUTO\"`, `\"ICON\"`, `\"ICON_PLUS\"`,\n     `\"NARROW\"`, `\"NARROW_PLUS\"`, `\"MEDIUM\"`, `\"MEDIUM_PLUS\"`, `\"WIDE\"`, `\"1X\"`, `\"2X\"`,\n     `\"3X\"`, `\"4X\"`, `\"5X\"`, `\"6X\"`, `\"7X\"`, `\"8X\"`, `\"9X\"`, and `\"10X\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Read-Only Grid Column\n scsubcat: Read-Only_Grid_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gridColumn \n  function syntax: a!gridColumn (label,sortField,helpTooltip,value,showWhen,align,width)\n \n Displays a column of data as read-only text, links, images, rich text, buttons, tags, record actions, or progress bars within the [Read-Only Grid Component](Paging_Grid_Component.md).\n \n When configuring the component, click **Display Options** after choosing a value.\n \n ![Grid column display options dialog](images/grid_column_display_options_202.png){:.screenshot style=\"width:50%;\"}\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the column header.\"}, {\"keyword\": \"sortField\", \"name\": \"Sort Field\", \"types\": \"Any Type\", \"description\": \"The field used to sort the grid when selecting this column header. Grids that use record data must use the `recordType!` domain to reference a record field or related record field. For example, `recordType!Case.fields.caseName`.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon in the column header with the specified text as a tooltip.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"The value to display in each cell within the column. The value can be text, `a!imageField()`, `a!linkField()`, `a!richTextDisplayField()`, `a!tagField()`, `a!buttonArrayLayout()`, `a!recordActionField()`, or `a!progressBarField()`. It is evaluated once for each row. Reference fields from the source using dot notation, such as `fv!row.status`, or the identifier using `fv!identifier`.  Grids that use record data must use the `recordType!` domain to reference a record field or related record field. For example, `fv!row[recordType!Case.fields.caseName]`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the column is displayed in the grid. When set to false, the column is hidden and is not evaluated. Default: `true`.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines the alignment for the header label and all values within the column. Valid values: `\\\"START\\\"` (default), `\\\"CENTER\\\"`, `\\\"END\\\"`.\\n\"}, {\"keyword\": \"width\", \"name\": \"Width\", \"types\": \"Text\", \"description\": \"Determines the column width. Valid values: `\\\"AUTO\\\"`, `\\\"ICON\\\"`, `\\\"ICON_PLUS\\\"`, `\\\"NARROW\\\"`, `\\\"NARROW_PLUS\\\"`, `\\\"MEDIUM\\\"`, `\\\"MEDIUM_PLUS\\\"`, `\\\"WIDE\\\"`, `\\\"1X\\\"`, `\\\"2X\\\"`, `\\\"3X\\\"`, `\\\"4X\\\"`, `\\\"5X\\\"`, `\\\"6X\\\"`, `\\\"7X\\\"`, `\\\"8X\\\"`, `\\\"9X\\\"`, and `\\\"10X\\\"`.\\n\"}]\n \n ## Usage considerations\n \n ### Using the value parameter\n \n - If the *value* parameter for a column is empty or null, the grid still renders the column with just the label.\n - If the *value* parameter contains a data query, each row of the column may be [evaluated in parallel](expressions-parallel-evaluation.md) to reduce the overall evaluation time of the grid.\n \n ### Using the width parameter\n \n - For columns using the `\"AUTO\"` width, the width is determined by the length of the longest unbroken value in that column.\n   - For example, this could be the length of the longest word in a paragraph or the width of the widest image.\n - Avoid using `\"AUTO\"` and weighted column widths (such as `\"1X\"`, `\"2X\"`, `\"3X\"`, etc) together.\n - If you use a fixed width (such as `\"NARROW\"`, `\"MEDIUM\"`, etc) for a column that doesn't take up the width of the page, the width will auto distribute depending on the content inside the column.\n - If you use `\"ICON\"` & `\"AUTO\"` widths together, the column using `\"ICON\"` will always be the same width and the column using `\"AUTO\"` will fill up the remaining space.\n - For complete guidance on when and how to use column widths, see [Column Widths](sail/ux-grids.md#column-widths)."}, {"doc": "Stamp_Component.md", "content": "---\n layout: function\n title: Stamp Component\n category: function_page\n compatibility: -crf\n excerpt: Displays an icon and/or text on a colored circular background.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!stampField\n fncsubcat: Display\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: icon\n   name: Icon\n   types: Text\n   description: 'Icon to display inside the stamp. See the [documentation for details](sail/ux-styled-icons.md).\n \n     '\n - keyword: text\n   name: Text\n   types: Text\n   description: Text to display within the stamp.\n - keyword: backgroundColor\n   name: Background Color\n   types: Text\n   description: 'Determines the background color. Valid values: Any valid hex color\n     or `\"ACCENT\"` (default), `\"POSITIVE\"`, `\"NEGATIVE\"`, `\"SECONDARY\"`, `\"TRANSPARENT\"`.\n     If `\"TRANSPARENT\"` is selected, the circle border will take on the content color\n     and the circle fill will be transparent.\n \n     '\n - keyword: contentColor\n   name: Content Color\n   types: Text\n   description: 'Determines the icon color. Valid values: Any hex color or `\"STANDARD\"`\n     (default), `\"ACCENT\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`.\n \n     '\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the size of the stamp. Valid values: `\"TINY\"`, `\"SMALL\"`,\n     `\"MEDIUM\"` (default), `\"LARGE\"`.\n \n     '\n - keyword: align\n   name: Align\n   types: Text\n   description: 'Determines alignment of the stamp. Valid values: `\"START\"`, `\"CENTER\"`\n     (default), `\"END\"`.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: Text to display on mouseover (web) or tap (mobile).\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to apply to the stamp. Create a link with `a!documentDownloadLink()`,\n     `a!dynamicLink()`, `a!newsEntryLink()`, `a!processTaskLink()`, `a!recordLink()`,\n     `a!reportLink()`, `a!safeLink()`, `a!startProcessLink()`, `a!submitLink()`, `a!userRecordLink()`,\n     or `a!authorizationLink()`.\n \n     '\n - keyword: marginAbove\n   name: Margin Above\n   types: Text\n   description: \"Determines how much space is added above the layout. Valid values:\n     `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n - keyword: marginBelow\n   name: Margin Below\n   types: Text\n   description: \"Determines how much space is added below the layout. Valid values:\n     `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`,\n     `\\\"EVEN_MORE\\\"`. \\n\"\n reftype: sailcomponent\n scdisplayname: Stamp\n space: sail_component\n ---\n \n ## Function\n \n function name: a!stampField \n  function syntax: a!stampField (label,labelPosition,instructions,helpTooltip,icon,text,backgroundColor,contentColor,size,align,tooltip,showWhen,accessibilityText,link,marginAbove,marginBelow)\n \n Displays an icon and/or text on a colored circular background. They are best used as a decorative component to add visual interest to your page. This feature is perfect for drawing attention to important content and reduces the need for custom images. \n \n Stamps can include a link and are an alternative style in places where you might otherwise use a button or a link.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"icon\", \"name\": \"Icon\", \"types\": \"Text\", \"description\": \"Icon to display inside the stamp. See the [documentation for details](sail/ux-styled-icons.md).\\n\"}, {\"keyword\": \"text\", \"name\": \"Text\", \"types\": \"Text\", \"description\": \"Text to display within the stamp.\"}, {\"keyword\": \"backgroundColor\", \"name\": \"Background Color\", \"types\": \"Text\", \"description\": \"Determines the background color. Valid values: Any valid hex color or `\\\"ACCENT\\\"` (default), `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`, `\\\"SECONDARY\\\"`, `\\\"TRANSPARENT\\\"`. If `\\\"TRANSPARENT\\\"` is selected, the circle border will take on the content color and the circle fill will be transparent.\\n\"}, {\"keyword\": \"contentColor\", \"name\": \"Content Color\", \"types\": \"Text\", \"description\": \"Determines the icon color. Valid values: Any hex color or `\\\"STANDARD\\\"` (default), `\\\"ACCENT\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`.\\n\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the size of the stamp. Valid values: `\\\"TINY\\\"`, `\\\"SMALL\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"LARGE\\\"`.\\n\"}, {\"keyword\": \"align\", \"name\": \"Align\", \"types\": \"Text\", \"description\": \"Determines alignment of the stamp. Valid values: `\\\"START\\\"`, `\\\"CENTER\\\"` (default), `\\\"END\\\"`.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display on mouseover (web) or tap (mobile).\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to apply to the stamp. Create a link with `a!documentDownloadLink()`, `a!dynamicLink()`, `a!newsEntryLink()`, `a!processTaskLink()`, `a!recordLink()`, `a!reportLink()`, `a!safeLink()`, `a!startProcessLink()`, `a!submitLink()`, `a!userRecordLink()`, or `a!authorizationLink()`.\\n\"}, {\"keyword\": \"marginAbove\", \"name\": \"Margin Above\", \"types\": \"Text\", \"description\": \"Determines how much space is added above the layout. Valid values: `\\\"NONE\\\"` (default), `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`, `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}, {\"keyword\": \"marginBelow\", \"name\": \"Margin Below\", \"types\": \"Text\", \"description\": \"Determines how much space is added below the layout. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"` (default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`. \\n\"}]\n \n ## Usage considerations\n \n ### Stamp color\n \n - A stamp with a `\"TRANSPARENT\"` background displays an icon and/or text with a colored circular border. The *contentColor* will be used for the icon, text, and circular border.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Stamp with an ACCENT background\n \n {% sailbox 600 %} \n a!stampField(\n   label: \"Stamp\",\n   labelPosition: \"COLLAPSED\",\n   backgroundColor: \"ACCENT\",\n   icon: \"STAR\",\n   contentColor: \"STANDARD\"\n )\n {% endsailbox %}\n \n ### Stamp with a TRANSPARENT background\n \n {% sailbox 600 %} \n a!stampField(\n   label: \"Stamp\",\n   labelPosition: \"COLLAPSED\",\n   backgroundColor: \"TRANSPARENT\",\n   icon: \"HOME\",\n   contentColor: \"POSITIVE\" \n )\n {% endsailbox %}\n \n ### Stamp with text\n \n {% sailbox 600 %} \n {\n   a!sideBySideLayout(\n     items: {\n       a!sideBySideItem(\n         item: a!stampField(\n           backgroundColor: \"#cc0000\",\n           text: \"1\",\n           align: \"END\"\n         )\n       ),\n       a!sideBySideItem(\n         item: a!stampField(\n           backgroundColor: \"#cc0000\",\n           text: \"2\",\n           align: \"CENTER\"\n         )\n       ),\n       a!sideBySideItem(\n         item: a!stampField(\n           backgroundColor: \"#cc0000\",\n           text: \"3\",\n           align: \"START\"\n         )\n       )\n     }\n   )\n }\n {% endsailbox %}\n \n ### Stamps with dynamic links\n \n {% sailbox 900 %}\n {\n   a!localVariables(\n     /* The selected navigation section */\n     local!activeNavSection: 1,\n     /* The navigation sections */\n     local!navSections: {\n       a!map(name: \"Workspace\", icon: \"briefcase\"),\n       a!map(name: \"Tasks\",     icon: \"tasks\"),\n       a!map(name: \"Requests\",  icon: \"paper-plane\"),\n       a!map(name: \"Calendar\",  icon: \"calendar\"),\n       a!map(name: \"My Time\",   icon: \"clock-o\"),\n       a!map(name: \"Expenses\",  icon: \"money\")\n     },\n     {\n       a!columnsLayout(\n         columns: {\n           a!columnLayout(\n             contents: {\n               a!forEach(\n                 items: local!navSections,\n                 expression: { \n                   a!stampField(\n                     labelPosition: \"COLLAPSED\",\n                     icon: fv!item.icon,\n                     backgroundColor: if(\n                       fv!index = local!activeNavSection,\n                       \"ACCENT\",\n                       \"SECONDARY\"\n                     ),\n                     link: a!dynamicLink(\n                       value: fv!index,\n                       saveInto: local!activeNavSection\n                     ),\n                     size: \"MEDIUM\",\n                     align: \"CENTER\"\n                   )\n                 }\n               )\n             },\n             width: \"NARROW\"\n           ),\n           a!columnLayout(\n             contents: {\n               choose(\n                 local!activeNavSection,\n                 a!sectionLayout(\n                   label: index(\n                     local!navSections.name,\n                     local!activeNavSection,\n                     \"\"\n                   ),\n                   contents: {\n                     a!richTextDisplayField(\n                       value: a!richTextItem(\n                         text: \"Put your workspace content here.\"\n                       )\n                     )\n                   }\n                 ),\n                 a!sectionLayout(\n                   label: index(\n                     local!navSections.name,\n                     local!activeNavSection,\n                     \"\"\n                   ),\n                   contents: {\n                     a!richTextDisplayField(\n                       value: a!richTextItem(\n                         text: \"Put your tasks content here.\"\n                       )\n                     )\n                   }\n                 ),\n                 a!sectionLayout(\n                   label: index(\n                     local!navSections.name,\n                     local!activeNavSection,\n                     \"\"\n                   ),\n                   contents: {\n                     a!richTextDisplayField(\n                       value: a!richTextItem(\n                         text: \"Put your requests content here.\"\n                       )\n                     )\n                   }\n                 ),\n                 a!sectionLayout(\n                   label: index(\n                     local!navSections.name,\n                     local!activeNavSection,\n                     \"\"\n                   ),\n                   contents: {\n                     a!richTextDisplayField(\n                       value: a!richTextItem(\n                         text: \"Put your calendar content here.\"\n                       )\n                     )\n                   }\n                 ),\n                 a!sectionLayout(\n                   label: index(\n                     local!navSections.name,\n                     local!activeNavSection,\n                     \"\"\n                   ),\n                   contents: {\n                     a!richTextDisplayField(\n                       value: a!richTextItem(\n                         text: \"Put your time management content here.\"\n                       )\n                     )\n                   }\n                 ),\n                 a!sectionLayout(\n                   label: index(\n                     local!navSections.name,\n                     local!activeNavSection,\n                     \"\"\n                   ),\n                   contents: {\n                     a!richTextDisplayField(\n                       value: a!richTextItem(\n                         text: \"Put your expenses content here.\"\n                       )\n                     )\n                   }\n                 )\n               )\n             }\n           )\n         },\n         spacing: \"SPARSE\",\n         showDividers: true\n       )\n     }\n   )\n }\n {% endsailbox %}"}, {"doc": "Dropdown_By_Index_Component_20r2.md", "content": "---\n layout: function\n title: a!dropdownFieldByIndex_20r2 Component\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays a limited set of choices from which the user must select one item\n   and saves the index of the selected choice.\n category: function_page\n compatibility: -crf\n fncname: a!dropdownFieldByIndex_20r2\n fncsubcat: Selection\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scdisplayname: Dropdown By Index\n evolved_fncname: a!dropdownFieldByIndex\n evolved_reason: Added an optional search box and renamed the placeholderLabel parameter\n   to placeholder.\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.'\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.'\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: placeholderLabel\n   name: Placeholder Label\n   types: Text\n   description: Text to display when nothing is selected and the value is null.\n - keyword: value\n   name: Selected Index\n   types: Number (Integer)\n   description: Index of the choice to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the choice index when the\n     user changes the selection. Use a!save() to save a modified or alternative value\n     to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.'\n ---\n \n ## Dropdown By Index\n \n **Function**: `a!dropdownFieldByIndex_20r2()`\n \n Displays a limited set of exclusive choices from which the user must select one item and saves the index of the selected choice.  To save a value instead of the index, use a [dropdown](Dropdown_Component.md). This component is not available from the interface component picker in the design view.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"placeholderLabel\", \"name\": \"Placeholder Label\", \"types\": \"Text\", \"description\": \"Text to display when nothing is selected and the value is null.\"}, {\"keyword\": \"value\", \"name\": \"Selected Index\", \"types\": \"Number (Integer)\", \"description\": \"Index of the choice to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice index when the user changes the selection. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\"}]\n \n **Notes**\n \n - If you set *Label Position* to `\"ADJACENT\"` or `\"ABOVE\"`, but do not give a value for *Label*, a space still displays to the left-side or above, respectively, of the component as if there was a label displayed. To ensure the component appears to the far left when *Label* has no value, use `\"COLLAPSED\"` for *Label Position*.\n - Choices display in the same order as defined in the *Choice Labels* parameter. The *Choice Labels* argument cannot be null.\n - Passing a null value to the dropdown's *Selected Index* parameter causes the placeholder text to appear selected. The *Placeholder Label* and *Selected Index* arguments cannot both be null. If the placeholder is selected and *Required* is true when a validating button is clicked, the field prompts the user to select a value.\n - The argument passed to the *Placeholder Label* parameter does not have an index.\n - Choice index numbers start at 1. The index number for *Selected Index* cannot be null, empty, less than 1, or greater than the length of the *Choice Labels* array.\n - The choice at the index passed to the *Selected Index* parameter displays as selected by default."}, {"doc": "Section_Layout_171.md", "content": "---\n layout: function\n title: a!sectionLayout_17r1 Component\n category: function_page\n compatibility: -crf\n evolved_fncname: a!sectionLayout\n evolved_reason: Replaced _firstColumnContents_ and _secondColumnContents_ with `contents`.\n   Now supports greater than two-column layout.\n excerpt: Displays one or two columns of related components beneath a section title\n   on an interface.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!sectionLayout_17r1\n fncsubcat: Layouts\n fncsyntax: '**a!sectionLayout_17r1**( [*label*] , [*firstColumnContents*], [*secondColumnContents*],\n   [*validations*], [*validationGroup*], [*isCollapsible*], [*isInitiallyCollapsed*]\n   )'\n reftype: sailcomponent\n scdisplayname: Section Layout 17.1\n space: sail_component\n ---\n \n ## Section layout component\n \n **Function**: `a!sectionLayout_17r1()`\n \n Displays one or two columns of related components beneath a section title on an interface.\n \n **See also**: [Dashboard](Dashboard_Layout.md), [Form](Form_Layout.md)\n \n ## Parameters\n \n <table class=\"appianTable\">\n   <tr>\n     <th> Name </th>\n     <th> Keyword </th>\n     <th> Type </th>\n     <th> Description </th>\n   </tr>\n   <tr>\n     <td> Label </td>\n     <td> label </td>\n     <td> Text </td>\n     <td> Optional text to display as the section's title. </td>\n   </tr>\n   <tr>\n     <td> Column 1 Contents </td>\n     <td> firstColumnContents </td>\n     <td> Any Type Array </td>\n     <td> Values that define the contents for the first column in the interface. </td>\n   </tr>\n   <tr>\n     <td> Column 2 Contents </td>\n     <td> secondColumnContents </td>\n     <td> Any Type Array </td>\n     <td> Values that define the contents for the second column in the interface. </td>\n   </tr>\n   <tr>\n     <td> Validations </td>\n     <td> validations </td>\n     <td> Text or <a href=\"Validation_Message.html\">Validation Message</a> Array </td>\n     <td> Validation errors displayed below the section title. Configured using a text array or an array with a mix of text and Validation Message using <code>a!validationMessage(message, validateAfter)</code>. </td>\n   </tr>\n   <tr>\n     <td> Validation Group </td>\n     <td> validationGroup </td>\n     <td> Text </td>\n     <td> When present, the section is only validated when a button in the same validation group is clicked. </td>\n   </tr>\n   <tr>\n     <td> Collapsible </td>\n     <td> isCollapsible </td>\n     <td> Boolean </td>\n     <td> Determines if an expand/collapse control appears in the section label. Default is <code>false</code>. </td>\n   </tr>\n   <tr>\n     <td> Initially Collapsed </td>\n     <td> isInitiallyCollapsed </td>\n     <td> Boolean </td>\n     <td> Determines if the section is collapsed when the interface first loads. Default is <code>false</code>. </td>\n   </tr>\n   <tr>\n     <td> Visibility </td>\n     <td> showWhen </td>\n     <td> Boolean </td>\n     <td> Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. </td>\n   </tr>\n </table>\n \n ## Usage considerations\n \n - If you put a two-column section within a column of a two-column dashboard, the section's columns collapse into one.\n - If the *Column 2 Contents* argument is null, the content for the first column displays as in a single-column layout with no space left for where the second column would display.\n - Sections that contain validation messages are not collapsible regardless of the setting of the *Collapsible* parameter. For example, if a validation is triggered when the form loads, then that section is expanded, even if you have specified `true` for the *Initially Collapsed* parameter.\n - If you have nested section layouts, any validations on an inner section will appear in the outer section.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Two columns within a section\n \n ```sail \n a!sectionLayout_17r1(\n   label: \"Customers for Review\",\n   firstColumnContents: {\n     a!textField(\n       label: \"Customer\",\n       value: \"John Smith\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Status\",\n       value: \"Prospective\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Priority\",\n       value: \"High\",\n       readOnly: true\n     )\n   },\n   secondColumnContents: {\n     a!textField(\n       label: \"Customer\",\n       value: \"Michael Johnson\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Status\",\n       value: \"Prospective\",\n       readOnly: true\n     ),\n     a!textField(\n       label: \"Priority\",\n       value: \"Medium\",\n       readOnly: true\n     )\n   }\n )\n ```\n \n Displays the following:\n \n ![screenshot of two columns layouts within a section](images/Sectionlayout_simple_75.png){:.screenshot}"}, {"doc": "Submit_Link_Component.md", "content": "---\n layout: function\n title: Submit Link\n category: function_page\n compatibility: -crf, -portal\n excerpt: Defines a link to trigger form submission.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!submitLink\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text associated with this link.\n - keyword: confirmMessage\n   name: Confirmation Message\n   types: Text\n   description: Text to display in an optional confirmation dialog where a null argument\n     disables the confirmation dialog and a text argument enables it with the text\n     entered as the confirmation message.\n - keyword: confirmButtonStyle\n   name: Confirmation Button Style\n   types: Text\n   description: 'Determines the style of the primary button in the confirmation dialog.\n     Valid values: `\"PRIMARY\"` (default),`\"DESTRUCTIVE\"`.\n \n     '\n - keyword: value\n   name: Value\n   types: Any Type\n   description: Value to be saved when the link is clicked.\n - keyword: saveInto\n   name: Save Value To\n   types: List of Save\n   description: 'One or more variables that are updated with the link value when the\n     user clicks it. Use a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: skipValidation\n   name: Skip Validation\n   types: Boolean\n   description: 'When true, submit without performing validation. Default: false.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is clicked.\n \n     '\n - keyword: confirmHeader\n   name: Confirmation Header\n   types: Text\n   description: Text to display at the top of the confirmation dialog.\n - keyword: confirmButtonLabel\n   name: Confirm Button Label\n   types: Text\n   description: 'Text to display on the confirm button. Default: `\"Yes\"`.\n \n     '\n - keyword: cancelButtonLabel\n   name: Cancel Button Label\n   types: Text\n   description: 'Text to display on the cancel button. Default: `\"No\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Submit Link\n scsubcat: Link_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!submitLink \n  function syntax: a!submitLink (label,confirmMessage,confirmButtonStyle,value,saveInto,skipValidation,validationGroup,confirmHeader,confirmButtonLabel,cancelButtonLabel,showWhen)\n \n Defines a link to trigger form submission. Links can be used in charts, grids, hierarchy browsers, images, link fields, milestones, pickers, and rich text.\n \n **See also**:\n \n - [Submit Button](Submit_Button_Component.md)\n - [Link](Link_Component.md)\n - [Images](Image_Component.md)\n - [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text associated with this link.\"}, {\"keyword\": \"confirmMessage\", \"name\": \"Confirmation Message\", \"types\": \"Text\", \"description\": \"Text to display in an optional confirmation dialog where a null argument disables the confirmation dialog and a text argument enables it with the text entered as the confirmation message.\"}, {\"keyword\": \"confirmButtonStyle\", \"name\": \"Confirmation Button Style\", \"types\": \"Text\", \"description\": \"Determines the style of the primary button in the confirmation dialog. Valid values: `\\\"PRIMARY\\\"` (default),`\\\"DESTRUCTIVE\\\"`.\\n\"}, {\"keyword\": \"value\", \"name\": \"Value\", \"types\": \"Any Type\", \"description\": \"Value to be saved when the link is clicked.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Value To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the link value when the user clicks it. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"skipValidation\", \"name\": \"Skip Validation\", \"types\": \"Boolean\", \"description\": \"When true, submit without performing validation. Default: false.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is clicked.\\n\"}, {\"keyword\": \"confirmHeader\", \"name\": \"Confirmation Header\", \"types\": \"Text\", \"description\": \"Text to display at the top of the confirmation dialog.\"}, {\"keyword\": \"confirmButtonLabel\", \"name\": \"Confirm Button Label\", \"types\": \"Text\", \"description\": \"Text to display on the confirm button. Default: `\\\"Yes\\\"`.\\n\"}, {\"keyword\": \"cancelButtonLabel\", \"name\": \"Cancel Button Label\", \"types\": \"Text\", \"description\": \"Text to display on the cancel button. Default: `\\\"No\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Primary and secondary buttons\n \n - In the confirmation dialog there are two buttons. The confirm button is in the primary position and the cancel button is in the secondary position.\n - The cancel button is always `\"SECONDARY\"` style.\n \n ### Saving values\n \n - If *confirmationHeader* and *confirmationMessage* are null, the interface refreshes and the *saveInto* state change occurs once the user clicks the link. If either is not null, the confirmation dialog displays. The interface only refreshes and the *saveInto* state change only occurs if the user clicks the confirm button.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Confirmation dialog\n \n ```sail \n a!linkField(\n   links: {\n     a!submitLink(\n       label: \"Delete Request\",\n       confirmHeader: \"Warning!\",\n       confirmMessage: \"This request will be permanently deleted. Do you want to continue?\",\n       confirmButtonLabel: \"Delete Request\",\n       confirmButtonStyle: \"DESTRUCTIVE\",\n       cancelButtonLabel: \"Cancel\"\n     )\n   }\n )\n ```\n \n Displays the following when clicked:\n \n ![screenshot of a confirmation dialog](images/confirmation-dialog-172.png){:.screenshot}"}, {"doc": "Button_Component.md", "content": "---\n layout: function\n title: Button Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a button that can conditionally be used to submit a form.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!buttonWidget\n fncsubcat: Action\n reftype: sailcomponent\n scdisplayname: Button\n scsubcat: Button_Types\n space: sail_component\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Optional text to display on the button.\n - keyword: style\n   name: Style\n   types: Text\n   description: \"Determines the color of the button, where\\n  - `\\\"NORMAL\\\"` default)\n     Displays it with accent color label and border.\\n  - `\\\"PRIMARY\\\"` Displays it\n     in the accent color.\\n  - `\\\"SECONDARY\\\"` Displays it in gray.\\n  - `\\\"LINK\\\"`\n     Displays it with an accent color label and no border until focused.\\n  - `\\\"DESTRUCTIVE\\\"`\n     Displays it in red.\\n\"\n - keyword: confirmMessage\n   name: Confirmation Message\n   types: Text\n   description: \"Text to display in an optional confirmation dialog where a null argument\n     disables the confirmation dialog and a text argument enables it with the text\n     entered as the confirmation message.  \\n\"\n - keyword: value\n   name: Value\n   types: Any Type\n   description: The value associated with this button.\n - keyword: saveInto\n   name: Save Value To\n   types: Save Array\n   description: \"One or more variables that are updated with the button value when\n     the user presses it. Use `a!save()` to save a modified or alternative value to\n     a variable. \\n\"\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the user is prevented from clicking the button and triggering\n     the state change. Default is `false`.\n \n     '\n - keyword: submit\n   name: Submit\n   types: Boolean\n   description: \"Determines whether this button submits a form after saving its value.\n     \\n\"\n - keyword: validate\n   name: Validate\n   types: Boolean\n   description: 'Determines whether this button performs validation before saving its\n     value. When *submit* is true, this defaults to `true`, otherwise it defaults to\n     `false`.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, components in the same validation group are validated\n     when this button is clicked.\n \n     '\n - keyword: size\n   name: Size\n   types: Text\n   description: 'Determines the size of the button. Valid values: `\"SMALL\"`, `\"STANDARD\"`\n     (default), and `\"LARGE\"`.\n \n     '\n - keyword: width\n   name: Width\n   types: Text\n   description: \"Determines button width. Valid values are `\\\"MINIMIZE\\\"` and `\\\"FILL\\\"`.\n     \\  Default behavior displays `\\\"FILL\\\"` width buttons on phone size screens and\n     `\\\"MINIMIZE\\\"` buttons on wider screens.\\n  -  `\\\"MINIMIZE\\\"` width is determined\n     by button label.\\n  - `\\\"FILL\\\"` width fills the button container.\\n\"\n - keyword: confirmHeader\n   name: Confirmation Header\n   types: Text\n   description: \"Text to display at the top of the confirmation dialog.  \\n\"\n - keyword: confirmButtonLabel\n   name: Confirmation Button Label\n   types: Text\n   description: \"Text to display on the confirmation button. Default: \\\"Yes\\\".  \\n\"\n - keyword: cancelButtonLabel\n   name: Cancel Button Label\n   types: Text\n   description: \"Text to display on the cancel button. Default: \\\"No\\\". \\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: \"Determines whether the button is displayed on the interface. When\n     set to false the button is hidden and is not evaluated. Default: true.  \\n\"\n - keyword: icon\n   name: Icon\n   types: Text\n   description: \"Icon to display before any text inside the button. See the list of\n     available [icons](sail/ux-styled-icons.md).  \\n\"\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: \"Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.  \\n\"\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: 'Text to display on mouseover (web) or long press (mobile).\n \n     '\n - keyword: recaptchaSaveInto\n   name: reCAPTCHA Save Value To\n   types: List of saves\n   description: 'One or more variables that are updated after reCAPTCHA executes. Use\n     `a!verifyRecaptcha()` to verify the reCAPTCHA result and `a!save()` to save a\n     modified or alternative value to a variable. Only for use in Portals.\n \n     '\n - keyword: loadingIndicator\n   name: Show loading indicator on press\n   types: Boolean\n   description: 'Determines whether the button will display a loading indicator on\n     press and be disabled while processing. Default: false.\n \n     '\n - keyword: iconPosition\n   name: Icon Position\n   description: 'Determines where the icon appears in relation to the text. Valid values:\n     \"START\" (default), \"END\".\n \n     '\n   types: Text\n ---\n \n ## Function\n \n function name: a!buttonWidget \n  function syntax: a!buttonWidget (label,style,confirmMessage,value,saveInto,disabled,submit,validate,validationGroup,size,width,confirmHeader,confirmButtonLabel,cancelButtonLabel,showWhen,icon,accessibilityText,tooltip,recaptchaSaveInto,loadingIndicator,iconPosition)\n \n Displays a button that can conditionally be used to submit a form.\n \n **See also**: [Button design guidance](sail/ux-buttons.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Optional text to display on the button.\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines the color of the button, where\\n  - `\\\"NORMAL\\\"` default) Displays it with accent color label and border.\\n  - `\\\"PRIMARY\\\"` Displays it in the accent color.\\n  - `\\\"SECONDARY\\\"` Displays it in gray.\\n  - `\\\"LINK\\\"` Displays it with an accent color label and no border until focused.\\n  - `\\\"DESTRUCTIVE\\\"` Displays it in red.\\n\"}, {\"keyword\": \"confirmMessage\", \"name\": \"Confirmation Message\", \"types\": \"Text\", \"description\": \"Text to display in an optional confirmation dialog where a null argument disables the confirmation dialog and a text argument enables it with the text entered as the confirmation message.  \\n\"}, {\"keyword\": \"value\", \"name\": \"Value\", \"types\": \"Any Type\", \"description\": \"The value associated with this button.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Value To\", \"types\": \"Save Array\", \"description\": \"One or more variables that are updated with the button value when the user presses it. Use `a!save()` to save a modified or alternative value to a variable. \\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the user is prevented from clicking the button and triggering the state change. Default is `false`.\\n\"}, {\"keyword\": \"submit\", \"name\": \"Submit\", \"types\": \"Boolean\", \"description\": \"Determines whether this button submits a form after saving its value. \\n\"}, {\"keyword\": \"validate\", \"name\": \"Validate\", \"types\": \"Boolean\", \"description\": \"Determines whether this button performs validation before saving its value. When *submit* is true, this defaults to `true`, otherwise it defaults to `false`.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, components in the same validation group are validated when this button is clicked.\\n\"}, {\"keyword\": \"size\", \"name\": \"Size\", \"types\": \"Text\", \"description\": \"Determines the size of the button. Valid values: `\\\"SMALL\\\"`, `\\\"STANDARD\\\"` (default), and `\\\"LARGE\\\"`.\\n\"}, {\"keyword\": \"width\", \"name\": \"Width\", \"types\": \"Text\", \"description\": \"Determines button width. Valid values are `\\\"MINIMIZE\\\"` and `\\\"FILL\\\"`.   Default behavior displays `\\\"FILL\\\"` width buttons on phone size screens and `\\\"MINIMIZE\\\"` buttons on wider screens.\\n  -  `\\\"MINIMIZE\\\"` width is determined by button label.\\n  - `\\\"FILL\\\"` width fills the button container.\\n\"}, {\"keyword\": \"confirmHeader\", \"name\": \"Confirmation Header\", \"types\": \"Text\", \"description\": \"Text to display at the top of the confirmation dialog.  \\n\"}, {\"keyword\": \"confirmButtonLabel\", \"name\": \"Confirmation Button Label\", \"types\": \"Text\", \"description\": \"Text to display on the confirmation button. Default: \\\"Yes\\\".  \\n\"}, {\"keyword\": \"cancelButtonLabel\", \"name\": \"Cancel Button Label\", \"types\": \"Text\", \"description\": \"Text to display on the cancel button. Default: \\\"No\\\". \\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the button is displayed on the interface. When set to false the button is hidden and is not evaluated. Default: true.  \\n\"}, {\"keyword\": \"icon\", \"name\": \"Icon\", \"types\": \"Text\", \"description\": \"Icon to display before any text inside the button. See the list of available [icons](sail/ux-styled-icons.md).  \\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.  \\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display on mouseover (web) or long press (mobile).\\n\"}, {\"keyword\": \"recaptchaSaveInto\", \"name\": \"reCAPTCHA Save Value To\", \"types\": \"List of saves\", \"description\": \"One or more variables that are updated after reCAPTCHA executes. Use `a!verifyRecaptcha()` to verify the reCAPTCHA result and `a!save()` to save a modified or alternative value to a variable. Only for use in Portals.\\n\"}, {\"keyword\": \"loadingIndicator\", \"name\": \"Show loading indicator on press\", \"types\": \"Boolean\", \"description\": \"Determines whether the button will display a loading indicator on press and be disabled while processing. Default: false.\\n\"}, {\"keyword\": \"iconPosition\", \"name\": \"Icon Position\", \"description\": \"Determines where the icon appears in relation to the text. Valid values: \\\"START\\\" (default), \\\"END\\\".\\n\", \"types\": \"Text\"}]\n \n ## Usage considerations\n \n ### Using the submit parameter\n \n For buttons that are used to submit a start form or task, set the value of the *submit* parameter to `true` in order to submit the start form or task. Otherwise, use the default value, `false`.\n \n ### Using the confirmation parameters\n \n - In the confirmation dialog there are two buttons. The confirm button is in the primary position and the cancel button is in the secondary position.\n - If *confirmHeader* and *confirmMessage* are both null, the interface refreshes and the *saveInto* state change occurs once the user clicks the button. If either is not null, the confirmation dialog displays. The interface only refreshes and the *Save Value To* state change only occurs if the user clicks the confirm button.\n \n ### Styling buttons\n \n - When *style* is `\"DESTRUCTIVE\"` and a confirmation dialog is enabled, the confirm button displays in `\"DESTRUCTIVE\"` and the cancel button displays in grey. All other *style* options result in a `\"PRIMARY\"` confirm button and a `\"SECONDARY\"` cancel button.\n - You can only configure button shapes on [sites](sites_object.md#branding) and not at the component level. The same shape will be applied to all buttons sitewide.\n \n ### Using the recaptchaSaveInto parameter in a Portal\n \n [reCAPTCHA](recaptcha.md) allows you to monitor your [public portals](portals-home.md) for potentially malicious or fraudulent activity. Appian works with Google\u2019s reCAPTCHA services to provide you with a configurable experience that allows you to choose your thresholds for and responses to potential misuses of your Portal.\n \n reCAPTCHA works on the button component so that you can apply it to submission buttons in a Portal. This allows you to have more control over what kinds of users are submitting entries using your Portal. To use reCAPTCHA, you must use the [a!verifyRecaptcha()](fnc_connector_recaptcha_verifyrecaptcha.md) function within the *recaptchaSaveInto* parameter and define logic to determine what to do when a bot may be using your Portal.\n \n You can use the `a!save()` function to save new or updated values to variables in the same way that you would for configuring any button, but make sure to nest `a!save()` inside the `a!verifyRecaptcha()` function.\n \n For more information on using reCAPTCHA in Portals or a breakdown of examples, check out our [reCAPTCHA guidance](recaptcha.md).\n \n > appian-style-note\n > reCAPTCHA does not work within Appian designer and will always evaluate the *onError* parameter of the [a!verifyRecaptcha()](fnc_connector_recaptcha_verifyrecaptcha.md)) function. For more information on testing reCAPTCHA, check out our [reCAPTCHA guidance](recaptcha.md#testing-monitoring-and-troubleshooting-recaptcha).\n \n ## Examples\n \n *Copy and paste an example into an Appian Expression Editor to experiment with it.*\n \n ### Button styles and sizes\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 580 %} \n a!localVariables(\n   local!styles: {\"NORMAL\",\"PRIMARY\",\"SECONDARY\",\"LINK\",\"DESTRUCTIVE\"},\n   local!sizes: {\"SMALL\",\"STANDARD\",\"LARGE\"},\n   {\n     a!forEach(\n       items: local!sizes,\n       expression: a!localVariables(\n         local!size: fv!item,\n         a!buttonLayout(\n           secondaryButtons: a!forEach(\n             items: local!styles,\n             expression: a!buttonWidget(\n               size: local!size,\n               style: fv!item,\n               label: fv!item\n             )\n           )\n         )\n       )\n     )\n   }\n )\n {% endsailbox %}\n \n ### Icon-only button with tooltip\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 470 %}\n a!buttonArrayLayout(\n   buttons: {\n     a!buttonWidget(\n       icon: \"download\",\n       tooltip: \"Download File\"\n     )\n   }\n )\n {% endsailbox %}\n \n \n ### Confirmation dialog\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 470 %} \n a!buttonArrayLayout(\n   buttons: {\n     a!buttonWidget(\n       label: \"Delete Request\",\n       icon: \"times-circle\",\n       style: \"DESTRUCTIVE\",\n       confirmHeader: \"Warning!\",\n       confirmMessage: \"This request will be permanently deleted. Do you want to continue?\",\n       confirmButtonLabel: \"Delete Request\",\n       cancelButtonLabel: \"Cancel\",\n     )\n   },\n   align: \"START\"\n )\n {% endsailbox %}\n \n ### reCAPTCHA in a button\n \n The following is an example of what the expression for a button using reCAPTCHA might look like when separated out from the rest of the interface. If you copy and paste the example into an expression editor, reCAPTCHA will not work. Use this example only as a reference. Only for use in [Portals](portals-home.md).\n \n ```sail\n a!localVariables(\n   local!submissionDetails: a!map(needsReview: null),\n   local!submissionStatus,\n   local!confirmationMessage,\n   {\n     a!buttonArrayLayout(\n       buttons: {\n         a!buttonWidget(\n           label: \"Submit\",\n           recaptchaSaveInto: a!verifyRecaptcha(\n             onSuccess: {\n               if(\n                 fv!score > .7,\n                 /* Score >.7 indicates the user is likely human */\n                 {\n                   /* No need for a manual review since the user was confirmed by reCAPTCHA to be human*/\n                   a!save(\n                     local!submissionDetails.needsReview,\n                     false\n                   ),\n                   a!writeToDataStoreEntity(\n                     dataStoreEntity: cons!PORTAL_ENTITY,\n                     valueToStore: local!submissionDetails,\n                     onSuccess: {\n                       a!save(local!submissionStatus, \"SUCCESS\"),\n                       a!save(\n                         local!confirmationMessage,\n                         \"Your submission is confirmed.\"\n                       )\n                     }\n                   )\n                 },\n                 if(\n                   fv!score > .3,\n                   /* Score is between .3 & .7 indicating that the user may be human or a bot*/\n                   {\n                     /* No need for a manual review since the user was confirmed by reCAPTCHA to be human*/\n                     a!save(\n                       local!submissionDetails.needsReview,\n                       true\n                     ),\n                     a!writeToDataStoreEntity(\n                       dataStoreEntity: cons!PORTAL_ENTITY,\n                       valueToStore: local!submissionDetails,\n                       onSuccess: {\n                         a!save(local!submissionStatus, \"WARN\"),\n                         a!save(\n                           local!confirmationMessage,\n                           \"Your submission is processing. You will receive an email shortly with confirmation details. If you do not hear from us soon, please try again or give us a call.\"\n                         )\n                       }\n                     )\n                   },\n                   /* Score <.3 indicates the user is most likely a bot*/\n                   {\n                     a!save(local!submissionStatus, \"BOT\"),\n                     a!save(\n                       local!confirmationMessage,\n                       \"Your submission was not successful. Please try again or call us at (202) 555-7171.\"\n                     )\n                   }\n                 )\n               )\n             },\n             onError: {\n               /* Cannot connect to Google reCAPTCHA services.*/\n               a!save(local!submissionStatus, \"ERROR\"),\n               a!save(\n                 local!confirmationMessage,\n                 \"Your submission was not successful. Please try again or call us at (202) 555-7171.\"\n               )\n             }\n           ),\n           width: \"FILL\",\n           style: \"PRIMARY\",\n           loadingIndicator: true\n         )\n       }\n     )\n   }\n )\n ```"}, {"doc": "Button_Layout.md", "content": "---\n layout: function\n title: Button Layout\n category: function_page\n compatibility: -crf\n excerpt: Displays a list of buttons grouped by prominence. Use this layout in cases\n   where prominence needs to be explicitly specified.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!buttonLayout\n fncsubcat: Action\n parameters:\n - keyword: primaryButtons\n   name: Primary Buttons\n   types: List of ButtonWidget\n   description: Array of prominent buttons created with a!buttonWidget().\n - keyword: secondaryButtons\n   name: Secondary Buttons\n   types: List of ButtonWidget\n   description: Array of less prominent buttons created with a!buttonWidget().\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Button Layout\n space: sail_component\n ---\n \n ## Function\n \n function name: a!buttonLayout \n  function syntax: a!buttonLayout (primaryButtons,secondaryButtons,accessibilityText,showWhen)\n \n Displays a list of buttons grouped by prominence. Use this layout in cases where prominence needs to be explicitly specified.\n \n **See also**: [Button design guidance](sail/ux-buttons.md)\n \n ## Parameters\n \n [{\"keyword\": \"primaryButtons\", \"name\": \"Primary Buttons\", \"types\": \"List of ButtonWidget\", \"description\": \"Array of prominent buttons created with a!buttonWidget().\"}, {\"keyword\": \"secondaryButtons\", \"name\": \"Secondary Buttons\", \"types\": \"List of ButtonWidget\", \"description\": \"Array of less prominent buttons created with a!buttonWidget().\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using buttons on different devices\n \n - For web and mobile tablets, buttons display in a horizontal list. The most prominent buttons appear at the far right and the least prominent buttons appear at the far left.\n - For mobile phones, buttons display in a vertical line. The most prominent buttons appear at the top and the least prominent buttons appear at the bottom.\n \n ### Using the primaryButtons and secondaryButtons parameters\n \n - For the *primaryButtons* parameter, the first item in the array is the most prominent. \n - For the *secondaryButtons* parameter, the first item in the array is the least prominent."}, {"doc": "Folder_Picker_Component.md", "content": "---\n layout: function\n title: Folder Picker Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for selecting one or more folders.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldFolders\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n - keyword: folderFilter\n   name: Folder Filter\n   types: Folder\n   description: 'When present, only folders that are inside this folder and its subfolders\n     are suggested.\n \n     '\n - keyword: value\n   name: Display Value\n   types: List of Folder\n   description: Array of currently selected folders.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected folders\n     when the user selects or removes a folder. Use a!save() to save a modified or\n     alternative value to a variable.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Folder Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldFolders \n  function syntax: a!pickerFieldFolders (label,labelPosition,instructions,required,requiredMessage,readOnly,disabled,maxSelections,folderFilter,value,validations,validationGroup,saveInto,placeholder,helpTooltip,accessibilityText,showWhen)\n \n Displays an autocompleting input for selecting one or more folders.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\"}, {\"keyword\": \"folderFilter\", \"name\": \"Folder Filter\", \"types\": \"Folder\", \"description\": \"When present, only folders that are inside this folder and its subfolders are suggested.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Folder\", \"description\": \"Array of currently selected folders.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected folders when the user selects or removes a folder. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Saving and displaying values and placeholders\n \n - Any nulls in the array passed to *Selected Folders* are not displayed.\n - The component always saves an array regardless of how many selections have been made.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Filtering and permissions\n \n - When the filter folder is used, the filtering folder itself is never suggested.\n - The user viewing the picker must have access to view folders passed to the value. Only folders that the viewing user has permissions to see appear in the suggestions list. When *Folder Filter* is not null, the viewing user must have permission to view the filtering folder for any suggestions to be made."}, {"doc": "Numbered_List_Component.md", "content": "---\n layout: function\n title: Numbered List\n category: function_page\n compatibility: -crf\n excerpt: Displays a numbered list within a rich text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!richTextNumberedList\n fncsubcat: Display\n parameters:\n - keyword: items\n   name: Items\n   types: Text, [Styled Text](Styled_Text_Component.md), [List](List_Item_Component.md)\n   description: 'Array of text to display as a numbered list. Text can be further formatted\n     using `a!richTextItem()`. Nested lists can be created using `a!richTextListItem()`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Numbered List\n scsubcat: Rich_Text_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!richTextNumberedList \n  function syntax: a!richTextNumberedList (items,showWhen)\n \n Displays a numbered list within a [rich text](Rich_Text_Component.md) component.\n \n **See also**: [Rich text style guidance](sail/ux-rich-text.md)\n \n ## Parameters\n \n [{\"keyword\": \"items\", \"name\": \"Items\", \"types\": \"Text, [Styled Text](Styled_Text_Component.md), [List](List_Item_Component.md)\", \"description\": \"Array of text to display as a numbered list. Text can be further formatted using `a!richTextItem()`. Nested lists can be created using `a!richTextListItem()`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the items parameter\n \n - Specific values within *items* can be further formatted using styled text.\n - If *items* is null or contains an empty array, no list is displayed.\n - If the *items* array contains one or more null values, those items in the list have no text displayed.\n \n ### Formatting numbered lists and using styled text\n \n - Numbered lists cannot be nested within styled text.\n - Top-level numbered lists use Arabic numerals (for example, 1, 2, 3); second-level numbered lists use letters (for example, a, b, c); third-level numbered lists use lower-case Roman numerals (for example, i, ii, iii). Further nested numbered lists repeat the same pattern starting with Arabic numerals.\n \n ## Example\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n {% sailbox 600 %} \n a!richTextDisplayField(\n   labelPosition: \"COLLAPSED\",\n   value: {\n     a!richTextNumberedList(\n       items: {\n         \"A\",\n         \"B\",\n         \"C\",\n         a!richTextItem(\n           text: \"D\",\n           style: \"EMPHASIS\"\n         ),\n         \"E\"\n       }\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Link_Component.md", "content": "---\n layout: function\n title: Link Component\n category: function_page\n compatibility: -crf\n excerpt: Displays one or more links of any link type, including document links, task\n   links, record view links, external web page links, and dynamic links that update\n   variables.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!linkField\n fncsubcat: Action\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: links\n   name: Links\n   types: Any Type\n   description: \"Array of links to display. Create links with:        \\n  - [a!authorizationLink()](authorization_link_component.md)\\n\n     \\ - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n\n     \\ - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n\n     \\ - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n\n     \\ - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of link labels. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n reftype: sailcomponent\n scdisplayname: Link\n space: sail_component\n ---\n \n ## Function\n \n function name: a!linkField \n  function syntax: a!linkField (label,instructions,links,labelPosition,align,helpTooltip,showWhen,accessibilityText)\n \n Displays one or more links of any link type, including document links, task links, record view links, external web page links, and dynamic links that update variables. Link types serve two main purposes: to navigate to objects, such as tasks and records, or to perform actions, such as downloading documents or starting processes.\n \n Avoid using this component for offline mobile forms because links do not execute when tapped offline.\n \n **See also**: [Link Types](SAIL_Components.md#display), [Buttons and link design guidance](sail/ux-buttons-vs-links.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"links\", \"name\": \"Links\", \"types\": \"Any Type\", \"description\": \"Array of links to display. Create links with:        \\n  - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of link labels. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}]\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %} \n a!linkField(\n   label: \"Links\",\n   links: a!safeLink(\n     label: \"Company web site\",\n     uri: \"http://www.appian.com\"\n   )\n )\n {% endsailbox %}"}, {"doc": "Record_Picker_Component_20r2.md", "content": "---\n layout: function\n title: a!pickerFieldRecords_20r2\n category: function_page\n compatibility: -crf, -portal, -om\n excerpt: Displays an autocompleting input for the selection of one or more records,\n   filtered by a single record type. Suggestions and picker tokens use the title of\n   the record. This is an older version of `a!pickerFieldRecords()`, which supports\n   record type field references.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldRecords_20r2\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: maxSelections\n   name: Max Selections\n   types: Number (Integer)\n   description: Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n - keyword: recordType\n   name: Record Type\n   types: RecordType\n   description: Required, singular. Filters picker to select records of this type.\n - keyword: filters\n   name: Filters\n   types: List of QueryFilter\n   description: List of filters to apply when searching for records.\n - keyword: value\n   name: Display Value\n   types: Any Type\n   description: Array of currently selected records. This will be either a List of\n     Text or a List of Number (Integer), depending on the recordType selected.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected records\n     when the user selects or removes a record. Use a!save() to save a modified or\n     alternative value to a variable.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.'\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.'\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.'\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.'\n reftype: sailcomponent\n scdisplayname: Record Picker\n space: sail_component\n evolved_fncname: a!pickerFieldRecords\n evolved_reason: Supports updated record types that use record type field references.\n ---\n \n ## Record picker\n \n **Function**: `a!pickerFieldRecords()`\n \n Displays an autocompleting input for the selection of one or more records, filtered by a single record type. Suggestions and picker tokens use the title of the record.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"maxSelections\", \"name\": \"Max Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\"}, {\"keyword\": \"recordType\", \"name\": \"Record Type\", \"types\": \"RecordType\", \"description\": \"Required, singular. Filters picker to select records of this type.\"}, {\"keyword\": \"filters\", \"name\": \"Filters\", \"types\": \"List of QueryFilter\", \"description\": \"List of filters to apply when searching for records.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Any Type\", \"description\": \"Array of currently selected records. This will be either a List of Text or a List of Number (Integer), depending on the recordType selected.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected records when the user selects or removes a record. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\"}]\n \n **Notes**\n \n - Suggestions are based on the fields used in the record title. This is equivalent to the search functionality in a feed-style record list.\n   - If you are having trouble getting your record picker to work for a service-backed record type, make sure the record list search is working correctly. See the [Service-Backed Record Type Tutorial](Service-Backed_Record_Tutorial.md) for an example of how to configure this.\n - Only records that the viewing user has permissions to see appear in the suggestions list, as determined by the default filters in the record type.\n - All selected record tokens include a link to the record.\n - Any nulls in the array passed to *Selected Records* are not displayed. A `[Not Available]` token is displayed for any invalid identifiers in the *Selected Records* array.\n - The component always saves an array regardless of how many selections have been made.\n - Whether placeholder text clears on focus or input varies by device and browser. \n - This picker cannot be used to selected records of a rule-backed record type (deprecated).\n \n ## Examples\n \n The examples below use the \"Employee\" record type for the purpose of illustration only. If you copy and paste the expression below into an interface definition or **Expression Mode**, it will not evaluate in your Test Interface. Use it as a reference only. \n \n ***Select a Record from a Record Type***\n \n ```sail \n =a!localVariables(\n   local!storedRecord,\n   a!pickerFieldRecords_20r2(\n     label: \"Choose an Employee Record\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Employee)  \n      * with a valid record type reference in your environment. \n      */\n     recordType: recordType!Employee,\n     value: local!storedRecord,\n     saveInto: local!storedRecord\n   )\n )\n ```\n \n Displays the following:\n \n ![record picker example](images/Record_picker_example_172.png){:.screenshot}\n \n \n ***Select a Record from a Record Type with a Filter***\n \n ```sail \n =a!localVariables(\n   local!storedRecord,\n   a!pickerFieldRecords_20r2(\n     label: \"Choose an Employee Record\",\n     /* For the \"recordType\" parameter below, replace the record type reference (recordType!Employee)  \n      * with a valid record type reference in your environment. \n      */\n     recordType: recordType!Employee,\n     filters:{ \n       a!queryFilter(\n         field: \"department\",\n         operator: \"=\",\n         value: \"Engineering\"\n       )\n     },\n     value: local!storedRecord,\n     saveInto: local!storedRecord\n   )\n )\n ```\n \n Displays the following:\n \n ![img](images/Record_Picker_w_Filter_172.png){:.screenshot}"}, {"doc": "Chart_Series_Component.md", "content": "---\n layout: function\n title: Chart Series Component\n category: function_page\n excerpt: Defines a series of data for a bar, column, line, area, or pie chart. This\n   component is always used within a chart component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!chartSeries\n fncsubcat: Charts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Name that corresponds to the data value or data values to display in\n     the legend.\n - keyword: data\n   name: Data\n   types: Decimal Array\n   description: Value displayed for the related series.label.\n - keyword: links\n   name: Links\n   types: Array of Links\n   description: \"Array of values that determine what occurs when a user clicks a data\n     point in the chart. Create links with:         \\n - [a!authorizationLink()](authorization_link_component.md)\\n\n     \\ - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n\n     \\ - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n\n     \\ - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n\n     \\ - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Overrides the auto-assignment of series color with a specific value.\n     Valid values: Any valid hex color or `\"ACCENT\"`, `\"BLUEGRAY\"`, `\"GREEN\"`, `\"GOLD\"`,\n     `\"ORANGE\"`, `\"PURPLE\"`, `\"RED\"`, `\"SKYBLUE\"`, `\"LIMEGREEN\"`, `\"YELLOW\"`, `\"AMBER\"`,\n     `\"PINK\"`, `\"VIOLETRED\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the series is displayed on the interface. When\n     set to false, the series is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Chart Series\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!chartSeries \n  function syntax: a!chartSeries (label,data,links,color,showWhen)\n \n Defines a series of data for a bar, column, line, area, or pie chart. This component is always used within a chart component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Name that corresponds to the data value or data values to display in the legend.\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Decimal Array\", \"description\": \"Value displayed for the related series.label.\"}, {\"keyword\": \"links\", \"name\": \"Links\", \"types\": \"Array of Links\", \"description\": \"Array of values that determine what occurs when a user clicks a data point in the chart. Create links with:         \\n - [a!authorizationLink()](authorization_link_component.md)\\n  - [a!documentDownloadLink()](Document_Link_Component.md)\\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\\n  - [a!startProcessLink()](Start_Process_Link_Component.md) \\n  - [a!submitLink()](Submit_Link_Component.md)\\n  - [a!userRecordLink()](User_Record_Link_Component.md)\\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Overrides the auto-assignment of series color with a specific value. Valid values: Any valid hex color or `\\\"ACCENT\\\"`, `\\\"BLUEGRAY\\\"`, `\\\"GREEN\\\"`, `\\\"GOLD\\\"`, `\\\"ORANGE\\\"`, `\\\"PURPLE\\\"`, `\\\"RED\\\"`, `\\\"SKYBLUE\\\"`, `\\\"LIMEGREEN\\\"`, `\\\"YELLOW\\\"`, `\\\"AMBER\\\"`, `\\\"PINK\\\"`, `\\\"VIOLETRED\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the series is displayed on the interface. When set to false, the series is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Chart series color\n \n The color of chart series can be defined by an overall [chart color scheme](Chart_Color_Scheme.md) or it can be configured individually. If a user has selected or created a color scheme, they can swap out the color of any individual series. \n \n Users can choose between the assigned color scheme color, the environment\u2019s [accent color](Appian_Administration_Console.md#colors), a color such as `\"SKYBLUE\"` or `\"BLUEGRAY\"`, or a custom color defined by a hex code. Any series configurations will take precedence over the assigned color scheme colors.  \n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Single series bar chart with label, Y-axis title, and no legend\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %} \n \n a!barChartField(\n   categories: {\"Baseball\", \"Hockey\", \"Soccer\"},\n   series: {\n     a!chartSeries(label: \"Points\", data: {8.3, 3.02, 2.71})\n   },\n   colorScheme: \"CLASSIC\",\n   yAxisTitle: \"Average Point per Professional Game\",\n   showLegend: false,\n   showDataLabels: true\n )\n {% endsailbox %}\n \n ### Multiple series line chart with label, X-axis title, Y-axis title, and legend\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 860 %} \n a!lineChartField(\n   label: \"Tempo Usage Trends\",\n   categories: {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"},\n   series: {\n     a!chartSeries(label: \"IT\", data: {92, 94, 93, 95, 96, 99, 98, 100, 99, 91, 98, 99}),\n     a!chartSeries(label: \"Human Services\", data: {84, 83, 85, 86, 87, 89, 91, 90, 89, 83, 93, 95}),\n     a!chartSeries(label: \"Sales\", data: {70, 63, 90, 72, 74, 74, 76, 89, 72, 65, 100, 85}),\n     a!chartSeries(label: \"Marketing\", data: {80, 80, 80, 90, 90, 90, 90, 90, 90, 70, 90, 90})\n   },\n   colorScheme: a!colorSchemeCustom(\n     colors: {\n       \"#c27ba0\",\n       \"#93c47d\",\n       \"#8e7cc3\",\n       \"#ffd966\",\n     }\n   ),\n   xAxisTitle: \"Month\",\n   yAxisTitle: \"% Active\",\n   yAxisMax: 100,\n   showLegend: true\n )\n {% endsailbox %}"}, {"doc": "Scatter_Chart_Component.md", "content": "---\n layout: function\n title: Scatter Chart Component\n category: function_page\n excerpt: Displays the relationship between two numerical data points. Use a scatter\n   chart to compare multiple values, visualize trends over time, and spot outliers.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!scatterChartField\n fncsubcat: Charts\n fncsyntax: '**a!scatterChartField**(*data*, *label*, *instructions*, *xAxisTitle*,\n   *yAxisTitle*, *yAxisMin*, *yAxisMax*, *xAxisMin*, *xAxisMax*, *referenceLines*,\n   *showDataLabels*, *showTooltips*, *showLegend*, *allowDecimalAxisLabels*, *labelPosition*,\n   *helpTooltip*, *accessibilityText*, *showWhen*, *colorScheme*, *height*, *xAxisStyle*,\n   *yAxisStyle*, *refreshAlways*, *refreshInterval*, *refreshOnReferencedVarChange*,\n   *refreshOnVarChange*, *refreshAfter*, *primaryGrouping*, *secondaryGrouping*, *xAxisMeasure*,\n   *yAxisMeasure*, *sort*, *dataLimit*, *link*)'\n parameters:\n - keyword: data\n   name: Data\n   types: Any type\n   description: Reference to a synced record type or unsynced database-backed record\n     type used as the source of the chart. Can accept [a!recordData](fnc_system_recorddata.md)\n     or a [record type reference](reference-records.md#reference-a-record-type).\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about the chart.\n - keyword: xAxisTitle\n   name: X-Axis Title\n   types: Text\n   description: Title for the horizontal axis.\n - keyword: yAxisTitle\n   name: Y-Axis Title\n   types: Text\n   description: Title for the vertical axis.\n - keyword: xAxisMin\n   name: Min X-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the horizontal axis.\n - keyword: xAxisMax\n   name: Max X-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the horizontal axis.\n - keyword: yAxisMin\n   name: Min Y-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the vertical axis.\n - keyword: yAxisMax\n   name: Max Y-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the vertical axis.\n - keyword: referenceLines\n   name: Reference Lines\n   types: List of Variant\n   description: 'Array of reference line values for each threshold to be defined on\n     the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\n \n     '\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: \"Determines if data values are displayed next to each data point. Default:\n     _false_.    \\n\"\n - keyword: showLegend\n   name: Show legend\n   types: Boolean\n   description: 'When a secondary grouping is used, determines if a color legend displays\n     below the chart. Default: *true*.\n \n     '\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for each data point.\n     Default: _true_.\n \n     '\n - keyword: allowDecimalAxisLabels\n   name: Allow decimal axis labels\n   types: Boolean\n   description: 'Allows values to display as decimal numbers instead of integers. Default:\n     _false_.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: _true_.\n \n     '\n - keyword: colorScheme\n   name: Color scheme\n   types: Any type\n   description: 'Determines which color scheme to use in the chart. Use one of the\n     following valid values: `\"CLASSIC\"` (default), `\"MIDNIGHT\"`, `\"OCEAN\"`, `\"MOSS\"`,\n     `\"BERRY\"`, `\"PARACHUTE\"`, `\"RAINFOREST\"`, `\"SUNSET\"` or define a custom color\n     scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See\n     [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the chart height. Valid values: `\"SHORT\"`, `\"MEDIUM\"` (default),\n     `\"TALL\"`.\n \n     '\n - keyword: xAxisStyle\n   name: X-Axis Style\n   types: Text\n   description: 'Determines how to display the labels and axis separators for the X-Axis.\n     Valid values: `\"STANDARD\"` (default), `\"NONE\"`.\n \n     '\n - keyword: yAxisStyle\n   name: Y-Axis Style\n   types: Text\n   description: 'Determines how to display the labels, axis separators, and grid lines\n     for the Y-Axis. Valid values: `\"STANDARD\"` (default), `\"MINIMAL\"`, `\"NONE\"`.\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, chart data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: \"How often chart data gets refreshed in minutes. When null, chart data\n     will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`,\n     `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: \"When true, chart data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh chart data\n     when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_. \\n\"\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: \"Refreshes chart data each time any of these specific variables change.\n     This allows you to refresh the chart data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n     \\n\"\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes chart data each time a specified event completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: primaryGrouping\n   name: Primary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display on the points in the chart. Configured\n     using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: secondaryGrouping\n   name: Secondary Grouping\n   types: Grouping\n   description: 'Defines the field labels to display on the points in the chart. Configured\n     using [a!grouping()](Grouping_Component.md).\n \n     '\n - keyword: xAxisMeasure\n   name: X-Axis Measure\n   types: Measure\n   description: 'Defines the numerical calculations for the x-axis of the chart. Configured\n     using [a!measure()](Measure_Component.md).\n \n     '\n - keyword: yAxisMeasure\n   name: Y-Axis Measure\n   types: Measure\n   description: 'Defines the numerical calculations for the y-axis of the chart. Configured\n     using [a!measure()](Measure_Component.md).\n \n     '\n - keyword: sort\n   name: Sort\n   types: SortInfo\n   description: 'Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending\n     or descending order. Use the alias of any groupings or measures to sort by the\n     values in the chart. Use a record field or related record field reference to sort\n     by data that is not referenced in the chart.\n \n     '\n - keyword: dataLimit\n   name: Data Limit\n   types: Integer\n   description: 'Maximum number of data points to display on the chart. Default: 5000.\n     Valid values: 1-5000.\n \n     '\n - keyword: link\n   name: Link\n   types: Any Type\n   description: 'Link to execute when a user selects a data point on the chart. Use\n     `fv!selection` to pass context from the selection made on the chart to the link.\n     Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\n \n     '\n reftype: sailcomponent\n scdisplayname: Scatter Chart\n space: sail_component\n ---\n \n ## Function\n \n {{ page.fncsyntax }}\n \n Displays the relationship between two numerical data points. Use a scatter chart to compare multiple values, visualize trends over time, and spot outliers. \n \n **See also**:\n \n - [Configure Charts Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Any type\", \"description\": \"Reference to a synced record type or unsynced database-backed record type used as the source of the chart. Can accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\"}, {\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about the chart.\"}, {\"keyword\": \"xAxisTitle\", \"name\": \"X-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the horizontal axis.\"}, {\"keyword\": \"yAxisTitle\", \"name\": \"Y-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the vertical axis.\"}, {\"keyword\": \"xAxisMin\", \"name\": \"Min X-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the horizontal axis.\"}, {\"keyword\": \"xAxisMax\", \"name\": \"Max X-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the horizontal axis.\"}, {\"keyword\": \"yAxisMin\", \"name\": \"Min Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the vertical axis.\"}, {\"keyword\": \"yAxisMax\", \"name\": \"Max Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the vertical axis.\"}, {\"keyword\": \"referenceLines\", \"name\": \"Reference Lines\", \"types\": \"List of Variant\", \"description\": \"Array of reference line values for each threshold to be defined on the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\\n\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed next to each data point. Default: _false_.    \\n\"}, {\"keyword\": \"showLegend\", \"name\": \"Show legend\", \"types\": \"Boolean\", \"description\": \"When a secondary grouping is used, determines if a color legend displays below the chart. Default: *true*.\\n\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for each data point. Default: _true_.\\n\"}, {\"keyword\": \"allowDecimalAxisLabels\", \"name\": \"Allow decimal axis labels\", \"types\": \"Boolean\", \"description\": \"Allows values to display as decimal numbers instead of integers. Default: _false_.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: _true_.\\n\"}, {\"keyword\": \"colorScheme\", \"name\": \"Color scheme\", \"types\": \"Any type\", \"description\": \"Determines which color scheme to use in the chart. Use one of the following valid values: `\\\"CLASSIC\\\"` (default), `\\\"MIDNIGHT\\\"`, `\\\"OCEAN\\\"`, `\\\"MOSS\\\"`, `\\\"BERRY\\\"`, `\\\"PARACHUTE\\\"`, `\\\"RAINFOREST\\\"`, `\\\"SUNSET\\\"` or define a custom color scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the chart height. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"xAxisStyle\", \"name\": \"X-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels and axis separators for the X-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"yAxisStyle\", \"name\": \"Y-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"MINIMAL\\\"`, `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh chart data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_. \\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. r`efreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`). \\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes chart data each time a specified event completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"primaryGrouping\", \"name\": \"Primary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display on the points in the chart. Configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"secondaryGrouping\", \"name\": \"Secondary Grouping\", \"types\": \"Grouping\", \"description\": \"Defines the field labels to display on the points in the chart. Configured using [a!grouping()](Grouping_Component.md).\\n\"}, {\"keyword\": \"xAxisMeasure\", \"name\": \"X-Axis Measure\", \"types\": \"Measure\", \"description\": \"Defines the numerical calculations for the x-axis of the chart. Configured using [a!measure()](Measure_Component.md).\\n\"}, {\"keyword\": \"yAxisMeasure\", \"name\": \"Y-Axis Measure\", \"types\": \"Measure\", \"description\": \"Defines the numerical calculations for the y-axis of the chart. Configured using [a!measure()](Measure_Component.md).\\n\"}, {\"keyword\": \"sort\", \"name\": \"Sort\", \"types\": \"SortInfo\", \"description\": \"Use [a!sortInfo()](fnc_system_a_sortinfo.md) to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart.\\n\"}, {\"keyword\": \"dataLimit\", \"name\": \"Data Limit\", \"types\": \"Integer\", \"description\": \"Maximum number of data points to display on the chart. Default: 5000. Valid values: 1-5000.\\n\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Any Type\", \"description\": \"Link to execute when a user selects a data point on the chart. Use `fv!selection` to pass context from the selection made on the chart to the link. Create a link using [a!dynamicLink()](Dynamic_Link_Component.md).\\n\"}]\n \n ## Configuration\n \n The data for a scatter chart is any record type with data sync enabled or a database-backed record type without data sync enabled. When you set the *data* parameter, Appian will perform the necessary query; select a *primaryGrouping*, *xAxisMeasure*, and *yAxisMeasure*; and display the results directly in the chart.\n \n See [Configure Charts Using Records](Chart_Configuration_Using_Records.md) for details on using a record type as the source. See [Build Reports from Records](report-with-records.md) for examples of reports created with different charts.\n \n ## Usage considerations\n \n ### Select a record type\n \n The record type in the *data* parameter is the central concept you want to compare in the chart. You can use record fields or related record fields in your groupings and measures. However, groupings cannot use related record fields from a one-to-many relationship because you cannot combine two or more values into a single data point.\n \n Imagine you are building a scatter chart to analyze your sales team's performance. In your app's data model, each salesperson is related to one or more orders.\n \n If you use the Sales Person record type as the source of the chart, you could not group by fields from the related record type Order.\n \n Instead, you should use the Order record type as the source of your chart so you can group by the salesperson's name. Because each order has only one salesperson associated with it, the chart shows each order as its own data point.\n \n {% include zoompic.html url=\"images/scatter-chart-base-record-example.png\" alt=\"\" border=\"-nb\" style=\"width:80%;\" %}\n \n ### Use the sort parameter {#prodlink-using-the-sort-parameter}\n \n Sorting only applies when the chart has a secondary grouping, the sort field is the secondary grouping's alias, and the legend is shown. The sort order determines if the legend items are shown in ascending or descending order.\n \n In this chart, the secondary grouping is the salesperson's region. Sorting on this field lets you display the legend in alphabetical order.\n \n {% include zoompic.html url=\"images/scatter-chart-example-sales-commission.png\" alt=\"Scatter chart with sorted secondary grouping\" border=\"-nb\" style=\"width:80%;\" %}\n \n ### Chart refresh behavior\n \n - You can define `a!refreshVariable` parameters directly in the chart without creating local variables. The only exception is `refreshOnVarChange`, which refreshes the chart after a specific local variable has changed.\n - It's recommended to use the refresh parameters in the chart instead of using local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function. This is because the refresh behavior will automatically apply to the fields specified in the *data* parameter of the chart.\n \n ### Select a primary grouping\n \n The scatter chart requires a primary grouping. This grouping appears as the title in your chart's tooltips to help users understand each data point.\n \n If you want to show users unique values, use a primary grouping field with unique labels (such as order number or item name). Set the `xAxisMeasure` and `yAxisMeasure` to use the average of the fields you want to measure.\n \n For example, if you want to examine information about individual employees, your User record type may have a field like `userId` or `fullName` that is unique to each person. Selecting this field for grouping would display unique data points for each individual in your chart.\n \n {% include zoompic.html url=\"images/scatter-chart-unique-values.png\" alt=\"Scatter chart with one grouping showing unique values\" border=\"-nb\" style=\"width:80%;\" %}\n \n If you want to show aggregate data, use a primary grouping field with common values (such as customer or item color). Then, use the appropriate aggregation to summarize the data.\n \n Instead of grouping by a unique value like `fullName`, you could select a field like `department` or `jobTitle` to view data for groups of users that have a matching attribute.\n \n {% include zoompic.html url=\"images/scatter-chart-aggregated-grouping.png\" alt=\"Scatter chart with two groupings showing aggregated data\" border=\"-nb\" style=\"width:80%;\" %}\n \n ### Work within the data limit\n \n Scatter charts are limited to 5000 data points, but it is important to include\n as many unique values as possible to ensure you do not omit relevant information and construct a misleading chart. Setting up measures using the `AVG` function is a good way to balance the goals of including enough data and maintaining performance.\n \n Because production datasets can be large, we recommend using the default limit of 5000 even if your development dataset is smaller.\n \n ## Examples\n \n [INCLUDE PAGE: ](_includeLibrary/appian-retail-example.md)\n \n ### Scatter chart with one grouping\n \n This example shows a comparison of the number of items in an customer's order and the order total. The primary grouping, the customer's name, is shown as the title of the tooltip. A positive correlation is expected in this case. Any outlier points are customers that either purchased a few expensive items or many inexpensive items.\n \n ```sail\n a!scatterChartField(\n   data: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order',\n   primaryGrouping: a!grouping(\n      field: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order.relationships.{35d1f7f4-442e-471f-8583-ecf70127f1ed}customer.relationships.{ab3f9d64-6b2e-4bd6-9289-a03dc5e7d386}person.fields.{120551bc-43ca-4057-8d03-dd69fcd018ed}fullName',\n      alias: \"fullName_primaryGrouping\"\n   ),\n   xAxisMeasure: a!measure(\n     label: \"Order quantity\",\n     function: \"SUM\",\n     field: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order.relationships.{0bde4028-fd7a-411f-97ad-7ad5b84e0d18}orderDetail.fields.{8e3748dd-bbaf-4ece-b9d6-b6108a93da40}orderQty',\n     alias: \"orderQty_sum_measure1\"\n   ),\n   yAxisMeasure: a!measure(\n     label: \"Average of Total Due\",\n     function: \"SUM\",\n     field: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order.fields.{f4f2ef33-2a2b-4947-a6f2-11603994ed9f}totalDue',\n     alias: \"totalDue_sum_measure1\",\n     formatValue: \"DOLLAR\"\n   ),\n   label: \"Average order total by order quantity\"\n )\n ```\n \n Displays the following:\n \n {% include zoompic.html url=\"images/scatter-chart-example-order-cost-quantity.png\" alt=\"Scatter chart with one grouping\" border=\"-nb\" style=\"width:80%;\" %}\n \n ### Scatter chart with two groupings\n \n This example shows a comparison between sales commission and the salesperson's year-to-date sales total. The chart also includes location data\u2014the salesperson's territory\u2014as the secondary grouping. The values in the legend correspond to the unique values of the secondary grouping (the sales territory). Both grouping values are shown in the tooltip.\n \n This chart shows that employees earning a higher commission tend to make larger sales overall. The secondary grouping lets viewers compare this across the company's sales regions.\n \n ```sail\n a!scatterChartField(\n   data: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order',\n   primaryGrouping: a!grouping(\n     field: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order.fields.{3f2ba6f1-4afd-4a21-afd1-f399eb6c18e0}orderNumber',\n     alias: \"orderNumber_primaryGrouping\"\n   ),\n    secondaryGrouping: a!grouping(\n     field: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}AW Sales Order Header.relationships.{cc547bb2-c17d-4884-97c7-7c67dbb5dd76}salesPerson.fields.{2c03cc2d-c998-4719-9e64-e719e33fccf5}territoryId',\n     alias: \"territoryId_secondaryGrouping\"\n   ),\n   xAxisMeasure: a!measure(\n     label: \"Salesperson commission (%)\",\n     function: \"AVG\",\n     field: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order.relationships.{afdc307f-fe3b-4ded-867d-734cf283d54f}salesPerson.fields.{77dd5675-8988-4381-a574-ec7a86d3477d}commissionPercent',\n     alias: \"commissionPercent_avg_measure1\",\n     formatValue: if(\n       a!isNullOrEmpty(fv!value),\n       \"No commission\",\n       tostring(concat(product(fv!value, 100),\"%\"))\n     )\n   ),\n   yAxisMeasure: a!measure(\n     label: \"Order total\",\n     function: \"AVG\",\n     field: 'recordType!{ad898682-e651-4b2d-af67-47c1fcb1171f}Order.relationships.{afdc307f-fe3b-4ded-867d-734cf283d54f}salesPerson.fields.{7a3fdc19-53c0-40a8-a441-e8eb8500d4c1}ytdSales',\n     alias: \"ytdSales_avg_measure1\"\n   ),\n   label: \"Average order total compared with salesperson commission\",\n   yAxisMin: 10000,\n )\n ```\n \n Displays the following:\n \n {% include zoompic.html url=\"images/scatter-chart-example-commission-sales-by-region.png\" alt=\"Scatter chart with two groupings\" border=\"-nb\" style=\"width:80%;\" %}"}, {"doc": "Measure_Component.md", "content": "---\n layout: function\n title: Measure Component\n category: function_page\n compatibility: -crf\n excerpt: Determines the numerical values to display on a query or chart. The measure\n   should incorporate a record field or a related record field, the appropriate calculation\n   to run on the field, and an alias. If your record type has data sync enabled, you\n   can also apply filters to determine which values are included in the calculation.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples\n fncname: a!measure\n fncsubcat: Charts\n parameters:\n - keyword: field\n   name: Field\n   types: Any Type\n   description: 'The record field or related record field to use in this calculation,\n     configured using the `recordType!` domain. For example, `recordType!Case.fields.status`.\n \n     '\n - keyword: function\n   name: Function\n   types: Text\n   description: 'Function to use with calculations on the field provided. Accepts `\"COUNT\"`,\n     `\"SUM\"`, `\"MIN\"`, `\"MAX\"`, `\"AVG\"`, `\"DISTINCT_COUNT\"`.\n \n     '\n - keyword: alias\n   name: Alias\n   types: Text\n   description: 'The short name by which the result of the measure field can be referenced\n     in other places in the chart configuration or `a!queryRecordType()`.\n \n     '\n - keyword: label\n   name: Label\n   types: Text\n   description: 'Text to display in the legend or tooltip when using the measure in\n     a chart. If no label is defined, the label displays with the function name and\n     field name. The label only displays if a single grouping is used on a bar, column,\n     or line chart. This parameter is ignored when used in `a!queryRecordType()`.\n \n     '\n - keyword: filters\n   name: Filter\n   types: Any Type\n   description: 'A single, logical expression or a list of query filters to filter\n     the record set. Queries also apply the default filters defined on the referenced\n     record type. This parameter is only available on record types that have [data\n     sync](records-data-sync.md) enabled.\n \n     '\n - keyword: formatValue\n   name: Format value\n   types: Text\n   description: 'Display value for the given measure value. Only applies when the measure\n     is used in a records-powered chart. Valid formats are `\"AUTO\"` (default), `\"INTEGER\"`,\n     `\"DECIMAL\"`, `\"DOLLAR\"`, `\"EURO\"`, `\"POUND\"`, `\"YEN\"`, `\"SWISS_FRANC\"`, or a custom\n     format defined with `text()`. For a custom format, you can reference the unformatted\n     result from the data source using `fv!value`. The display format does not affect\n     the values used in the calculations for the chart; it is only used for display.\n \n     '\n reftype: sailcomponent\n scdisplayname: Measure\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n {{ page.fncsyntax }}\n \n Determines the numerical values to display on a query or chart. The measure should incorporate a record field or a related record field, the appropriate calculation to run on the field, and an alias. If your record type has data sync enabled, you can also apply filters to determine which values are included in the calculation.\n \n This configuration is used when a record type is defined as the data source for a chart or query. This function can be within the `measure` parameter in a bar, column, line, or pie chart or a query with records.\n \n **See also**:\n \n - [Chart Configuration Using Records](Chart_Configuration_Using_Records.md)\n - [Record type relationships](record-type-relationships.md)\n \n ## Parameters\n \n [{\"keyword\": \"field\", \"name\": \"Field\", \"types\": \"Any Type\", \"description\": \"The record field or related record field to use in this calculation, configured using the `recordType!` domain. For example, `recordType!Case.fields.status`.\\n\"}, {\"keyword\": \"function\", \"name\": \"Function\", \"types\": \"Text\", \"description\": \"Function to use with calculations on the field provided. Accepts `\\\"COUNT\\\"`, `\\\"SUM\\\"`, `\\\"MIN\\\"`, `\\\"MAX\\\"`, `\\\"AVG\\\"`, `\\\"DISTINCT_COUNT\\\"`.\\n\"}, {\"keyword\": \"alias\", \"name\": \"Alias\", \"types\": \"Text\", \"description\": \"The short name by which the result of the measure field can be referenced in other places in the chart configuration or `a!queryRecordType()`.\\n\"}, {\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display in the legend or tooltip when using the measure in a chart. If no label is defined, the label displays with the function name and field name. The label only displays if a single grouping is used on a bar, column, or line chart. This parameter is ignored when used in `a!queryRecordType()`.\\n\"}, {\"keyword\": \"filters\", \"name\": \"Filter\", \"types\": \"Any Type\", \"description\": \"A single, logical expression or a list of query filters to filter the record set. Queries also apply the default filters defined on the referenced record type. This parameter is only available on record types that have [data sync](records-data-sync.md) enabled.\\n\"}, {\"keyword\": \"formatValue\", \"name\": \"Format value\", \"types\": \"Text\", \"description\": \"Display value for the given measure value. Only applies when the measure is used in a records-powered chart. Valid formats are `\\\"AUTO\\\"` (default), `\\\"INTEGER\\\"`, `\\\"DECIMAL\\\"`, `\\\"DOLLAR\\\"`, `\\\"EURO\\\"`, `\\\"POUND\\\"`, `\\\"YEN\\\"`, `\\\"SWISS_FRANC\\\"`, or a custom format defined with `text()`. For a custom format, you can reference the unformatted result from the data source using `fv!value`. The display format does not affect the values used in the calculations for the chart; it is only used for display.\\n\"}]\n \n ## Usage considerations\n \n ### Using the field and function parameters\n \n - The *field* and *function* parameters are required. The *field* parameter also must reference a record field or a [related record field](record-type-relationships.md) from the record type specified in the query or chart.\n - If no measure is provided in a chart, by default the chart will display as a count of the primary key field.\n \n ### Count and mathematical functions\n - The functions `SUM`, `MIN`, `MAX`, and `AVG` can only be used with fields of type integer or decimal.\n - The function `DISTINCT_COUNT` is only supported with entity-backed or synced record types.\n - The `COUNT` function will count the total number of values in a record field, whereas the `DISTINCT_COUNT` function will only count the unique values in a record field. \n \n   For example, say you want to count the number of customers who've placed an order. Since one customer can place many orders, the `COUNT` function would count the same customer twice; however, the `DISTINCT_COUNT` function will only count that customer once, even if they've placed multiple orders. \n   \n ### Using the alias parameter\n - When using `a!measure()` in a query, the *alias* is required. \n - If an alias is provided, it must be used as the field in the *sort* parameter within the parent configuration function.\n \n ### Using the label parameter\n \n - The *label* determines the text label displayed in the legend or tooltip for the measure when used in a chart. This parameter is ignored when used in `a!queryRecordType`.\n - If no label is provided, the default label displays with the function and field name, such as `Count of id`. \n - The label does not apply when used with a secondary grouping, as the label is then determined by the secondary grouping field value. Also, the label does not apply when using a measure in a pie chart.\n \n ### Using the filters parameter\n \n - The *filters* parameter is available for record types that have [data sync](records-data-sync.md) enabled, and can be used to determine which values are included in the calculation specified in the *field* and *function* parameters.\n \n - You can filter on a record field or a related record field, and the field reference must start from the aggregated record type.\n \n   For example, you have a Customer record type that has a one-to-many relationship with the Order record type. In a report, you want to calculate the number of orders for each customer that include the order item \"Printer\". Since you're aggregating on the Order record type, the field reference in the filter must start from `recordType!Order`.\n   \n   The `a!measure` function would look something like this:\n   \n   ```sail\n   a!measure(\n     function: \"COUNT\",\n   ! field: recordType!Customer.relationships.orders.fields.id,\n     alias: \"count_of_id\",\n     /* Since the Order record type is the related record type used in the field parameter, \n     we'll use that record type reference in the filter.*/\n     filters: {\n       a!queryFilter(\n   !   field: recordType!Order.relationships.orderItem.fields.itemName,\n       operator: \"=\",\n       value: \"Printer\"\n         )\n       }\n     )\n   ```\n \n - When you filter on a field from a related record type in a [one-to-many relationship](record-type-relationships.md) (the \"many\" side of the relationship), the filter returns all records from the base record type (the \"one\" side of the relationship) that have at least one related record that meets the filter condition.\n   \n   For example, an order can have many order items. So using the filter above, the aggregation will count all customer orders that have at least one order item called \"Printer\".\n \n > appian-style-note\n > You cannot use a custom record field defined using [a!customFieldMatch()](fnc_crf_customfieldmatch.md) as a filter in `a!measure()`.\n \n ### Using the formatValue parameter\n \n The `formatValue` has several predefined options to make the numbers on your records-powered chart easier to read and understand. You can also customize the formatting to make your data more meaningful to users.\n \n For example, your app may have a chart showing the average monthly temperature in each US state. If this data is stored in a record field as a Number (Decimal), the `\"AUTO\"` option lists each value as an unformatted number.\n \n ![Chart showing automatic measure data formatting](images/chart-measure-format-auto.png){:.screenshot}\n \n You can customize the formatting to indicate temperature by concatenating each value with the degree symbol and unit of measure.\n \n ```sail\n text(fv!value, fv!value & \" \" & char(176) & \"F\")\n ```\n \n ![Chart showing custom measure formatting for temperature data](images/chart-measure-format-custom.png){:.screenshot}\n \n ### Measures on charts\n - If you use a [bar](Bar_Chart_Config_Component.md), [column](Column_Chart_Config_Component.md), or [line](Line_Chart_Config_Component.md) chart, you can display multiple measures if no Secondary Grouping field is provided. See [Chart Configuration Using Records](Chart_Configuration_Using_Records.md) for more information on how to add measures to charts.\n - You can select a predefined or custom format value to change how the measure data is displayed on the chart. See [Using format values](Chart_Configuration_Using_Records.md#prodlink-format-value-measures) for more information."}, {"doc": "Group_Picker_Component.md", "content": "---\n layout: function\n title: Group Picker Component\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays an autocompleting input for selecting one or more groups.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!pickerFieldGroups\n fncsubcat: Pickers\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: maxSelections\n   name: Maximum Selections\n   types: Number (Integer)\n   description: 'Maximum number of allowed selections. Once this number is reached,\n     further selections are blocked until a selection is removed.\n \n     '\n - keyword: groupFilter\n   name: Group Filter\n   types: Group\n   description: 'When present, only groups which are members of this group are suggested.\n \n     '\n - keyword: value\n   name: Display Value\n   types: List of Group\n   description: Array of currently selected groups.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the array of selected groups\n     when the user selects or removes a group. Use a!save() to save a modified or alternative\n     value to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Group Picker\n space: sail_component\n ---\n \n ## Function\n \n function name: a!pickerFieldGroups \n  function syntax: a!pickerFieldGroups (label,instructions,required,readOnly,disabled,maxSelections,groupFilter,value,validations,saveInto,validationGroup,requiredMessage,labelPosition,placeholder,helpTooltip,accessibilityText,showWhen)\n \n Displays an autocompleting input for selecting one or more groups.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"maxSelections\", \"name\": \"Maximum Selections\", \"types\": \"Number (Integer)\", \"description\": \"Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed.\\n\"}, {\"keyword\": \"groupFilter\", \"name\": \"Group Filter\", \"types\": \"Group\", \"description\": \"When present, only groups which are members of this group are suggested.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Group\", \"description\": \"Array of currently selected groups.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the array of selected groups when the user selects or removes a group. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Saving and displaying values and placeholders\n \n - Any nulls in the array passed to selected groups are not displayed.\n - The component always saves an array regardless of how many selections have been made.\n - Whether placeholder text clears on focus or input varies by device and browser. \n \n ### Filtering and permissions\n \n - Both direct and indirect members (groups that are members of groups that are members of the filter group) are suggested. The filter group is never suggested.\n - The user viewing the picker must be allowed to view any groups passed to the value. Only groups that the viewing user has permissions to see appear in the suggestions list. When *group filter* is not null, the viewing user must have permission to view members of the filter group for any suggestions to be made."}, {"doc": "Paragraph_Component.md", "content": "---\n layout: function\n title: Paragraph Component\n category: function_page\n compatibility: -crf\n excerpt: Displays and allows entry of multiple lines of text.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!paragraphField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Text\n   description: Text to display in the field.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the text when the user\n     changes it. Use a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: Text\n   description: 'Determines when the interface is refreshed with the saved value from\n     the paragraph field. Valid values are `\"KEYPRESS\"` to refresh after every character\n     typed into the field and `\"UNFOCUS\"` (the default value) to refresh when the user\n     deselects the field after changing its value.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the field height. Valid values: `\"SHORT\"`, `\"MEDIUM\"` (default),\n     `\"TALL\"`.\n \n     '\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: characterLimit\n   name: Character Limit\n   types: Number (Integer)\n   description: 'Determines the maximum number of characters. Depending on the language,\n     some characters may count as more than one.\n \n     '\n - keyword: showCharacterCount\n   name: Show Character Limit Count\n   types: Boolean\n   description: 'Determines if the character count displays on the paragraph field.\n     Only applicable if the character limit is set. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Paragraph\n space: sail_component\n ---\n \n ## Function\n \n function name: a!paragraphField \n  function syntax: a!paragraphField (label,instructions,required,readOnly,disabled,value,validations,saveInto,refreshAfter,labelPosition,validationGroup,requiredMessage,height,placeholder,helpTooltip,showWhen,accessibilityText,characterLimit,showCharacterCount)\n \n Displays and allows entry of multiple lines of text. For a single line of text, use a [text](Text_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Text\", \"description\": \"Text to display in the field.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the text when the user changes it. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"Text\", \"description\": \"Determines when the interface is refreshed with the saved value from the paragraph field. Valid values are `\\\"KEYPRESS\\\"` to refresh after every character typed into the field and `\\\"UNFOCUS\\\"` (the default value) to refresh when the user deselects the field after changing its value.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the field height. Valid values: `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"TALL\\\"`.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"characterLimit\", \"name\": \"Character Limit\", \"types\": \"Number (Integer)\", \"description\": \"Determines the maximum number of characters. Depending on the language, some characters may count as more than one.\\n\"}, {\"keyword\": \"showCharacterCount\", \"name\": \"Show Character Limit Count\", \"types\": \"Boolean\", \"description\": \"Determines if the character count displays on the paragraph field. Only applicable if the character limit is set. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the labelPosition and placeholder parameters  \n \n - If you set *labelPosition* to `\"ADJACENT\"` or `\"ABOVE\"`, but do not give a value for *label*, a space still displays to the left-side or above, respectively, of the component as if there was a label displayed. To ensure the component appears to the far left when *label* has no value, use `\"COLLAPSED\"` for *labelPosition*.\n - Whether placeholder text clears on focus or input varies by device and browser. Placeholder text does not display on Microsoft Internet Explorer 9.\n \n ### Using the characterLimit parameter\n \n - Emojis and characters in some languages (for example, Chinese and Arabic) may be counted by *characterLimit* as more than one character.\n - The *characterLimit* parameter and character limits set on CDT fields must be independently maintained to ensure that the two limits match.\n - If you set *readOnly* to `true`, the component's character limit won't be displayed.\n \n ### Using the readOnly parameter\n \n - If *readOnly* is set to `true`, the component's value displays without a box around it.\n - If you pass the same local variable to *value* and *saveInto* when *readOnly* is set to `false`, you can use the user's input in the component to modify the interface.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Paragraph with only an adjacent label\n \n {% sailbox 600 %} \n a!paragraphField(\n   label: \"Description\",\n     labelPosition: \"ADJACENT\",\n   value: \"Expenses could not be submitted. When \" & char(10) & \" I click on the expenses link, I see an error page.\",\n   readOnly: true\n )\n {% endsailbox %}\n \n ### Editable paragraph with a label and instructions\n \n {% sailbox 600 %}\n a!paragraphField(\n   label: \"Description\",\n   instructions: \"The description must include the problem statement\",\n   value: \"Expenses could not be submitted. When \" & char(10) & \" I click on the expenses link, I see an error page.\"\n )\n {% endsailbox %}\n \n ### Paragraph using character limit\n \n {% sailbox 600 %}\n a!localVariables(\n   local!storedQuote: \"All we have to decide is what to do with the time that is given to us.\",\n   a!paragraphField(\n     label: \"Favorite Quote from a Book\",\n     value: local!storedQuote,\n     saveInto: local!storedQuote,\n     characterLimit: 300,\n     showCharacterCount: true \n   )\n )\n {% endsailbox %}"}, {"doc": "User_Image_Component.md", "content": "---\n layout: function\n title: User Image\n category: function_page\n compatibility: -crf, -om, -portal\n excerpt: Displays the profile photo of the user.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!userImage\n fncsubcat: Display\n parameters:\n - keyword: user\n   name: User\n   types: User\n   description: The user whose profile photo will be shown.\n - keyword: altText\n   name: Alternate Text\n   types: Text\n   description: \"Alternate text of the image used for the image's alt attribute and\n     read by screen readers; see accessibility considerations for more information.\n     \\n\"\n - keyword: caption\n   name: Caption\n   types: Text\n   description: Text to display in mouseovers.\n - keyword: link\n   name: Link\n   types: Link\n   description: \"Link that determines the behavior of an image when clicked. Create\n     links with:\\n  - [a!authorizationLink()](authorization_link_component.md) \\n  -\n     [a!documentDownloadLink()](Document_Link_Component.md) \\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n\n     \\ - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md)\n     \\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md)\n     \\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md)\n     \\n  - [a!userRecordLink()](User_Record_Link_Component.md) \\n  - [a!safeLink()](Web_Link_Component.md)\\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the image is displayed in the component. When set\n     to false, the image is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: User Image\n scsubcat: Image_Types\n space: sail_component\n ---\n \n ## Function\n \n function name: a!userImage \n  function syntax: a!userImage (user,altText,caption,link,showWhen)\n \n Displays a user's profile photo for use in an [image](Image_Component.md) field, [rich text](Rich_Text_Component.md) field, [tree browser](Tree_Browser_Component.md) field, [billboard](Billboard_Layout.md) layout or [grid column](Grid_Column_Component.md) in a Read-Only Grid.\n \n \n ## Parameters\n \n [{\"keyword\": \"user\", \"name\": \"User\", \"types\": \"User\", \"description\": \"The user whose profile photo will be shown.\"}, {\"keyword\": \"altText\", \"name\": \"Alternate Text\", \"types\": \"Text\", \"description\": \"Alternate text of the image used for the image's alt attribute and read by screen readers; see accessibility considerations for more information. \\n\"}, {\"keyword\": \"caption\", \"name\": \"Caption\", \"types\": \"Text\", \"description\": \"Text to display in mouseovers.\"}, {\"keyword\": \"link\", \"name\": \"Link\", \"types\": \"Link\", \"description\": \"Link that determines the behavior of an image when clicked. Create links with:\\n  - [a!authorizationLink()](authorization_link_component.md) \\n  - [a!documentDownloadLink()](Document_Link_Component.md) \\n  - [a!dynamicLink()](Dynamic_Link_Component.md)\\n  - [a!newsEntryLink()](News_Entry_Link_Component.md)\\n  - [a!processTaskLink()](Process_Task_Link_Component.md) \\n  - [a!recordLink()](Record_Link_Component.md)\\n  - [a!reportLink()](Report_Link_Component.md) \\n  - [a!startProcessLink()](Start_Process_Link_Component.md)\\n  - [a!submitLink()](Submit_Link_Component.md) \\n  - [a!userRecordLink()](User_Record_Link_Component.md) \\n  - [a!safeLink()](Web_Link_Component.md)\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the image is displayed in the component. When set to false, the image is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the user parameter\n \n - When no *user* is provided, the default profile picture is shown."}, {"doc": "Barcode_Component.md", "content": "---\n layout: function\n title: Barcode Component\n category: function_page\n compatibility: -crf\n excerpt: Displays and allows entry of a barcode value using a barcode scanner or manual\n   input.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!barcodeField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: acceptedTypes\n   name: Accepted Types\n   types: List of Text String\n   description: 'Determines the types of barcodes that are accepted in the field. Null\n     results in all types being accepted. Valid values: `\"CODE39\"`, `\"CODE93\"`, `\"CODE128\"`,\n     `\"DATAMATRIX\"`, `\"EAN8\"`, `\"EAN13\"`, `\"PDF417\"`, `\"QRCODE\"`, `\"UPCA\"`, `\"UPCE\"`.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Text\n   description: Text to display in the field.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the text when the user\n     changes it. Use a!save() to save a modified or alternative value to a variable.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: Text\n   description: 'Determines when the interface is refreshed with the saved value from\n     the barcode field. Valid values are `\"KEYPRESS\"` to refresh after every character\n     typed into the field and `\"UNFOCUS\"` (the default value) to refresh when the user\n     deselects the field after changing its value.\n \n     '\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the text value. Valid values: `\"LEFT\"` (default),\n     `\"CENTER\"`, `\"RIGHT\"`.\n \n     '\n - keyword: placeholder\n   name: Placeholder\n   types: Text\n   description: Text to display in the field when it is empty. Does not show if the\n     field is read only.\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: masked\n   name: Masked\n   types: Boolean\n   description: 'Determines if the value is obscured from view. Default: false.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Barcode\n space: sail_component\n ---\n \n ## Function\n \n function name: a!barcodeField \n  function syntax: a!barcodeField (label,labelPosition,instructions,acceptedTypes,value,saveInto,refreshAfter,required,requiredMessage,readOnly,disabled,validations,validationGroup,align,placeholder,helpTooltip,masked,accessibilityText,showWhen)\n \n Displays and allows entry of a barcode value using a barcode scanner or manual input.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"acceptedTypes\", \"name\": \"Accepted Types\", \"types\": \"List of Text String\", \"description\": \"Determines the types of barcodes that are accepted in the field. Null results in all types being accepted. Valid values: `\\\"CODE39\\\"`, `\\\"CODE93\\\"`, `\\\"CODE128\\\"`, `\\\"DATAMATRIX\\\"`, `\\\"EAN8\\\"`, `\\\"EAN13\\\"`, `\\\"PDF417\\\"`, `\\\"QRCODE\\\"`, `\\\"UPCA\\\"`, `\\\"UPCE\\\"`.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Text\", \"description\": \"Text to display in the field.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the text when the user changes it. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"Text\", \"description\": \"Determines when the interface is refreshed with the saved value from the barcode field. Valid values are `\\\"KEYPRESS\\\"` to refresh after every character typed into the field and `\\\"UNFOCUS\\\"` (the default value) to refresh when the user deselects the field after changing its value.\\n\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the text value. Valid values: `\\\"LEFT\\\"` (default), `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"placeholder\", \"name\": \"Placeholder\", \"types\": \"Text\", \"description\": \"Text to display in the field when it is empty. Does not show if the field is read only.\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"masked\", \"name\": \"Masked\", \"types\": \"Boolean\", \"description\": \"Determines if the value is obscured from view. Default: false.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Scanning on different devices\n - The native device's camera is used on mobile devices to scan barcodes.\n - The *masked* parameter is ignored on offline interfaces on Android devices. All barcode components are shown un-masked in this case.\n - The barcode component does not support barcode scanning on Appian's web user interfaces. Instead, users can manually enter barcode values.\n \n ### Using the acceptedTypes parameter\n - Use the *acceptedTypes* parameter to specify one or more type(s) of barcode.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Without masking\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 520 %} \n a!barcodeField(\n   label: \"Product Barcode\",\n   instructions: \"Scan a barcode from a product box\"\n )\n {% endsailbox %}\n \n Displays the following on Appian's browser user interfaces:\n \n ![screenshot of a barcode without masking in a browser](images/barcode-web-nomask.png){:.screenshot}\n \n Displays the following on Appian Mobile iOS application:\n \n ![screenshot of a barcode without masking on the mobile app on iOS](images/barcode_ios_nomask.png){:.screenshot}\n \n Displays the following on Appian Mobile Android application:\n \n ![screenshot of a barcode without masking on the mobile app on Android](images/barcode_android_nomask_30.png){:.screenshot}\n \n ### With masking\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 520 %} \n a!barcodeField(\n   label: \"Product Barcode\",\n   instructions: \"Scan a barcode from a product box\",\n   masked: true\n )\n {% endsailbox %}\n \n Displays the following on Appian's web user interfaces:\n \n ![screenshot of a barcode with masking in a browser ](images/barcode_web_masked.png){:.screenshot}\n \n Displays the following on Appian Mobile iOS application:\n \n ![screenshot of a barcode with masking on the mobile app on iOS](images/barcode_ios_masked.png){:.screenshot}\n \n Displays the following on Appian Mobile Android application:\n \n ![screenshot of a barcode with masking on the mobile app on Android](images/barcode_android_masked_30.png){:.screenshot}"}, {"doc": "Grid_Column_Config_Component.md", "content": "---\n layout: function\n title: Editable Grid Column Configuration Component\n category: function_page\n compatibility: -crf\n excerpt: Defines a column configuration for use in an editable grid (a!gridLayout).\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!gridLayoutColumnConfig\n fncsubcat: Grids and Lists\n parameters:\n - keyword: width\n   name: Width\n   types: Text\n   description: 'Determines the column width. Valid values: `\"DISTRIBUTE\"` (default),\n     `\"NARROW\"`, `\"ICON\"`.\n \n     '\n - keyword: weight\n   name: Weight\n   types: Number (Integer)\n   description: 'Determines how wide distributed columns are in relation to each other.\n     Valid values: integers from 1 (default) to 10.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the column configuration is displayed in the grid.\n     When set to false, the column configuration is hidden and is not evaluated. Default:\n     true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Editable Grid Column Configuration\n scsubcat: Editable_Grid_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!gridLayoutColumnConfig \n  function syntax: a!gridLayoutColumnConfig (width,weight,showWhen)\n \n Defines a column configuration for use in an [Editable Grid](Editable_Grid_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"width\", \"name\": \"Width\", \"types\": \"Text\", \"description\": \"Determines the column width. Valid values: `\\\"DISTRIBUTE\\\"` (default), `\\\"NARROW\\\"`, `\\\"ICON\\\"`.\\n\"}, {\"keyword\": \"weight\", \"name\": \"Weight\", \"types\": \"Number (Integer)\", \"description\": \"Determines how wide distributed columns are in relation to each other. Valid values: integers from 1 (default) to 10.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the column configuration is displayed in the grid. When set to false, the column configuration is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Using the editable grid's columnConfigurations parameter\n \n - The number of column configurations need not match the number of columns in the grid. They are matched with the columns by their position in the *columnConfigurations* array.\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Narrow grid column\n \n *This example needs to be used with the `a!gridLayout()` function for it to display anything. Examples that you can see in action are available in the Grid Layout component section.*\n \n ```sail \n a!gridLayoutColumnConfig(\n   width: \"ICON\"\n )\n ```"}, {"doc": "Date_and_Time_Component.md", "content": "---\n layout: function\n title: Date and Time Component\n category: function_page\n compatibility: -crf\n excerpt: Displays and allows entry of a single date and time (year, month, day, hour,\n   minute, second). To display a read-only date and time using a custom format, use\n   a text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!dateTimeField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Date and Time\n   description: Date and time to display in the field.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the date and time when\n     the user changes it. Use a!save() to save a modified or alternative value to a\n     variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Date and Time\n space: sail_component\n ---\n \n ## Function\n \n function name: a!dateTimeField \n  function syntax: a!dateTimeField (label,instructions,required,readOnly,disabled,value,validations,saveInto,validationGroup,requiredMessage,labelPosition,helpTooltip,accessibilityText,showWhen)\n \n Displays and allows entry of a single [date and time](Appian_Data_Types.md#date-and-time) (year, month, day, hour, minute, second). When the field is editable, users can input dates by typing or by picking from a calendar and then select the time from a dropdown. The date and time is shown in the current user's time zone and calendar format.\n \n When working with a [date](Appian_Data_Types.md#date) (year, month, day), use a [date](Date_and_Time_Component.md) component. To display a [time](Appian_Data_Types.md#time) (hour, minute, second), use a [time](Time_Component.md) component. To display a read-only date and time using a custom format, use a [text](Text_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Date and Time\", \"description\": \"Date and time to display in the field.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the date and time when the user changes it. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ### Usage considerations \n \n ## Calendar formatting and keyboard shortcuts\n \n - The date is shown in the current user's time zone and calendar format.\n - When focused on the calendar, selecting the **P** key will go to the previous month, the **N** key will go to next month, the **T** key will select today's date, and the **Delete** key will clear the value in the field.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Date and time with only a label\n \n {% sailbox 480 %} \n a!dateTimeField(\n   label: \"Created On\",\n   value: datetime(2013, 1, 12, 11, 20),\n   readOnly: true\n )\n {% endsailbox %}\n \n ### Date and time with a validation\n \n {% sailbox 520 %} \n a!localVariables(\n   local!storedValue:now()-1,\n   a!dateTimeField(\n     label: \"Meeting Date and Time\",\n     value: local!storedValue,\n     saveInto: local!storedValue,\n     validations: if(\n       local!storedValue <= now(),\n       \"Please schedule a meeting for a future date and time\",\n       \"\"\n     )\n   )\n )\n {% endsailbox %}"}, {"doc": "Chart_Reference_Line_Component.md", "content": "---\n layout: function\n title: Chart Reference Line Component\n category: function_page\n excerpt: Contains the reference line value for each threshold that is defined on a\n   column, bar, line, or area chart.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!chartReferenceLine\n fncsubcat: Charts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display on top of the reference line.\n - keyword: value\n   name: Value\n   types: Decimal\n   description: The numeric value at which the reference line will be drawn.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the reference line is displayed on the interface.\n     When set to false, the reference line is hidden and is not evaluated. Default:\n     true.\n \n     '\n - keyword: color\n   name: Color\n   types: Text\n   description: 'Color for the reference line. Valid values: Any valid hex color or\n     `\"ACCENT\"`, `\"BLUEGRAY\"`, `\"GREEN\"`, `\"GOLD\"`, `\"ORANGE\"`, `\"PURPLE\"`, `\"RED\"`,`\"SKYBLUE\"`,\n     `\"LIMEGREEN\"`, `\"YELLOW\"`, `\"AMBER\"`, `\"PINK\"`, and `\"VIOLETRED\"`.\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Style of the reference line. Valid values are: `\"SOLID\"`, `\"DOT\"`,\n     `\"DASH\"` (default), `\"DASHDOT\"`, `\"SHORTDASH\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Chart Reference Line\n scsubcat: Chart_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!chartReferenceLine \n  function syntax: a!chartReferenceLine (label,value,showWhen,color,style)\n \n Contains the reference line value for each threshold that is defined on a column, bar, line, or area chart.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display on top of the reference line.\"}, {\"keyword\": \"value\", \"name\": \"Value\", \"types\": \"Decimal\", \"description\": \"The numeric value at which the reference line will be drawn.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the reference line is displayed on the interface. When set to false, the reference line is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"color\", \"name\": \"Color\", \"types\": \"Text\", \"description\": \"Color for the reference line. Valid values: Any valid hex color or `\\\"ACCENT\\\"`, `\\\"BLUEGRAY\\\"`, `\\\"GREEN\\\"`, `\\\"GOLD\\\"`, `\\\"ORANGE\\\"`, `\\\"PURPLE\\\"`, `\\\"RED\\\"`,`\\\"SKYBLUE\\\"`, `\\\"LIMEGREEN\\\"`, `\\\"YELLOW\\\"`, `\\\"AMBER\\\"`, `\\\"PINK\\\"`, and `\\\"VIOLETRED\\\"`.\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Style of the reference line. Valid values are: `\\\"SOLID\\\"`, `\\\"DOT\\\"`, `\\\"DASH\\\"` (default), `\\\"DASHDOT\\\"`, `\\\"SHORTDASH\\\"`.\\n\"}]\n \n ## Usage considerations\n \n ### Displaying reference lines\n \n - Reference lines will not display if used in a chart when the `yAxisStyle` is set to `\"NONE\"`.\n \n ## Examples\n This example demonstrate how to configure a chart using categories and series. For examples on using record data, see [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md).\n \n ### Single series column chart with reference lines\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 860 %} \n a!localVariables(\n   local!data:{\n     {quarter: \"2015-Q1\", spent: 15804},\n     {quarter: \"2015-Q2\", spent: 13432},\n     {quarter: \"2015-Q3\", spent: 23400},\n     {quarter: \"2015-Q4\", spent: 15900},\n     {quarter: \"2016-Q1\", spent: 12004},\n     {quarter: \"2016-Q2\", spent: 13901},\n     {quarter: \"2016-Q3\", spent: 14142},\n     {quarter: \"2016-Q4\", spent: 17980},\n     {quarter: \"2017-Q1\", spent: 13822},\n     {quarter: \"2017-Q2\", spent: 11053},\n     {quarter: \"2017-Q3\", spent: 16607},\n     {quarter: \"2017-Q4\", spent: 15449}\n   },\n   a!lineChartField(\n     label: \"Money Spent per Quarter\",\n     categories: local!data.quarter,\n     series: a!chartSeries(\n       data: local!data.spent\n     ),\n     colorScheme: \"CLASSIC\",\n     xAxisTitle: \"Quarter\",\n     yAxisTitle: \"Amount Spent (in $)\",\n     referenceLines: {\n       a!chartReferenceLine(\n         label: \"100% Budget\",\n         value: 18000,\n         color: \"ORANGE\"\n       ),\n       a!chartReferenceLine(\n         label: \"125% Budget\",\n         value: 22500,\n         color: \"RED\",\n         style: \"DASH\"\n       )\n     },\n     showLegend: false\n   )\n )\n {% endsailbox %}"}, {"doc": "Bar_Chart_Component.md", "content": "---\n layout: function\n title: Bar Chart Component\n category: function_page\n compatibility: -crf\n excerpt: Displays numerical data as horizontal bars. Use a bar chart to display several\n   values at the same point in time.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!barChartField\n fncsubcat: Charts\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: categories\n   name: Categories\n   types: Text Array\n   description: Text to display on the x-axis next to each bar.\n - keyword: series\n   name: Series\n   types: Chart Series Array\n   description: Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\n - keyword: xAxisTitle\n   name: X-Axis Title\n   types: Text\n   description: Title for the independent (vertical) axis.\n - keyword: yAxisTitle\n   name: Y-Axis Title\n   types: Text\n   description: Title for the dependent (horizontal) axis.\n - keyword: yAxisMin\n   name: Min Y-Axis\n   types: Number (Decimal)\n   description: Determines the minimum displayed point on the horizontal axis.\n - keyword: yAxisMax\n   name: Max Y-Axis\n   types: Number (Decimal)\n   description: Determines the maximum displayed point on the horizontal axis.\n - keyword: stacking\n   name: Stacking\n   types: Text\n   description: 'Determines if series values display as separate bars, stacked within\n     one bar to show the sum of series values, or stacked to a height of 100% to show\n     the contribution to the whole within each category. Valid values: `\"NONE\"` (default),\n     `\"NORMAL\"`, `\"PERCENT_TO_TOTAL\"`.\n \n     '\n - keyword: referenceLines\n   name: Reference Lines\n   types: Chart Reference Lines Array\n   description: Array of reference line values for each threshold to be defined on\n     the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\n - keyword: showLegend\n   name: Show legend\n   types: Boolean\n   description: 'Determines if a color legend displays below the chart. Default: _true_.\n \n     '\n - keyword: showDataLabels\n   name: Show data labels\n   types: Boolean\n   description: 'Determines if data values are displayed next to each bar. Default:\n     _false_.\n \n     '\n - keyword: showTooltips\n   name: Show tooltips\n   types: Boolean\n   description: 'Determines if a tooltip displays the data value for a bar. Default:\n     _true_.\n \n     '\n - keyword: allowDecimalAxisLabels\n   name: Allow decimal axis labels\n   types: Boolean\n   description: 'Allows dependent (horizontal) values to display as decimal numbers\n     instead of integers. Default: _false_.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: _true_.\n \n     '\n - keyword: colorScheme\n   name: Color scheme\n   types: Any type\n   description: 'Determines which color scheme to use in the chart. Use one of the\n     following valid values: `\"CLASSIC\"` (default), `\"MIDNIGHT\"`, `\"OCEAN\"`, `\"MOSS\"`,\n     `\"BERRY\"`, `\"PARACHUTE\"`, `\"RAINFOREST\"`, `\"SUNSET\"` or define a custom color\n     scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See\n     [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\n \n     '\n - keyword: height\n   name: Height\n   types: Text\n   description: 'Determines the chart height. Valid values: `\"MICRO\"`, `\"SHORT\"`, `\"MEDIUM\"`,\n     `\"TALL\"`, `\"AUTO\"` (default). See [Chart Heights](Chart_Heights.md) for guidance\n     on using the `\"MICRO\"` size.\n \n     '\n - keyword: xAxisStyle\n   name: X-Axis Style\n   types: Text\n   description: 'Determines how to display the labels and axis separators for the X-Axis.\n     Valid values: `\"STANDARD\"` (default), `\"NONE\"`.'\n - keyword: yAxisStyle\n   name: Y-Axis Style\n   types: Text\n   description: 'Determines how to display the labels, axis separators, and grid lines\n     for the Y-Axis. Valid values: `\"STANDARD\"` (default), `\"MINIMAL\"`, `\"NONE\"`.\n \n     '\n - keyword: data\n   name: Data\n   types: Any type\n   description: Reference to the record type used for the source of this chart. Can\n     accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\n - keyword: config\n   name: Chart Configuration\n   types: BarChartConfig\n   description: 'Configures how to display data on the chart, including fields used\n     for calculations and grouping, using [a!barChartConfig()](Bar_Chart_Config_Component.md).\n \n     '\n - keyword: refreshAlways\n   name: Refresh Always\n   types: Boolean\n   description: 'When true, chart data will be refreshed after each user interaction\n     and each interval refresh. Default: _false_.\n \n     '\n - keyword: refreshAfter\n   name: Refresh After\n   types: List of Text String\n   description: 'Refreshes chart data each time a specified event completes. Valid\n     values: `\"RECORD_ACTION\"`.\n \n     '\n - keyword: refreshInterval\n   name: Refresh After an Interval of Time\n   types: Number (Decimal)\n   description: \"How often chart data gets refreshed in minutes. When null, chart data\n     will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`,\n     `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"\n - keyword: refreshOnReferencedVarChange\n   name: Refresh on Reference Variable Change\n   types: Boolean\n   description: \"When true, chart data will be refreshed each time the value of any\n     variable referenced in the _data_ parameter is updated. To refresh chart data\n     when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`.\n     Default: _true_. \\n\"\n - keyword: refreshOnVarChange\n   name: Refresh on Variable Change\n   types: Any Type\n   description: 'Refreshes chart data each time any of these specific variables change.\n     This allows you to refresh the chart data when a variable that is not referenced\n     in the _data_ parameter is updated. You can define a single variable (e.g. `refreshOnVarChange:\n     local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\n \n     '\n reftype: sailcomponent\n scdisplayname: Bar Chart\n space: sail_component\n ---\n \n ## Function\n \n function name: a!barChartField \n  function syntax: a!barChartField (label,instructions,categories,series,xAxisTitle,yAxisTitle,yAxisMin,yAxisMax,stacking,referenceLines,showLegend,showDataLabels,showTooltips,allowDecimalAxisLabels,labelPosition,helpTooltip,accessibilityText,showWhen,colorScheme,height,xAxisStyle,yAxisStyle,data,config,refreshAlways,refreshAfter,refreshInterval,refreshOnReferencedVarChange,refreshOnVarChange)\n \n Displays numerical data as horizontal bars. Use a bar chart to display several values at the same point in time.\n \n **See also**:\n \n - [Configure Charts Using Records](Chart_Configuration_Using_Records.md)\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"categories\", \"name\": \"Categories\", \"types\": \"Text Array\", \"description\": \"Text to display on the x-axis next to each bar.\"}, {\"keyword\": \"series\", \"name\": \"Series\", \"types\": \"Chart Series Array\", \"description\": \"Array of data series created with [a!chartSeries()](Chart_Series_Component.md).\"}, {\"keyword\": \"xAxisTitle\", \"name\": \"X-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the independent (vertical) axis.\"}, {\"keyword\": \"yAxisTitle\", \"name\": \"Y-Axis Title\", \"types\": \"Text\", \"description\": \"Title for the dependent (horizontal) axis.\"}, {\"keyword\": \"yAxisMin\", \"name\": \"Min Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the minimum displayed point on the horizontal axis.\"}, {\"keyword\": \"yAxisMax\", \"name\": \"Max Y-Axis\", \"types\": \"Number (Decimal)\", \"description\": \"Determines the maximum displayed point on the horizontal axis.\"}, {\"keyword\": \"stacking\", \"name\": \"Stacking\", \"types\": \"Text\", \"description\": \"Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: `\\\"NONE\\\"` (default), `\\\"NORMAL\\\"`, `\\\"PERCENT_TO_TOTAL\\\"`.\\n\"}, {\"keyword\": \"referenceLines\", \"name\": \"Reference Lines\", \"types\": \"Chart Reference Lines Array\", \"description\": \"Array of reference line values for each threshold to be defined on the chart. Configured using [a!chartReferenceLine()](Chart_Reference_Line_Component.md).\"}, {\"keyword\": \"showLegend\", \"name\": \"Show legend\", \"types\": \"Boolean\", \"description\": \"Determines if a color legend displays below the chart. Default: _true_.\\n\"}, {\"keyword\": \"showDataLabels\", \"name\": \"Show data labels\", \"types\": \"Boolean\", \"description\": \"Determines if data values are displayed next to each bar. Default: _false_.\\n\"}, {\"keyword\": \"showTooltips\", \"name\": \"Show tooltips\", \"types\": \"Boolean\", \"description\": \"Determines if a tooltip displays the data value for a bar. Default: _true_.\\n\"}, {\"keyword\": \"allowDecimalAxisLabels\", \"name\": \"Allow decimal axis labels\", \"types\": \"Boolean\", \"description\": \"Allows dependent (horizontal) values to display as decimal numbers instead of integers. Default: _false_.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: _true_.\\n\"}, {\"keyword\": \"colorScheme\", \"name\": \"Color scheme\", \"types\": \"Any type\", \"description\": \"Determines which color scheme to use in the chart. Use one of the following valid values: `\\\"CLASSIC\\\"` (default), `\\\"MIDNIGHT\\\"`, `\\\"OCEAN\\\"`, `\\\"MOSS\\\"`, `\\\"BERRY\\\"`, `\\\"PARACHUTE\\\"`, `\\\"RAINFOREST\\\"`, `\\\"SUNSET\\\"` or define a custom color scheme using [a!colorSchemeCustom](Chart_Custom_Color_Scheme_Component.md). See [Chart Color Scheme](Chart_Color_Scheme.md) for color scheme examples.\\n\"}, {\"keyword\": \"height\", \"name\": \"Height\", \"types\": \"Text\", \"description\": \"Determines the chart height. Valid values: `\\\"MICRO\\\"`, `\\\"SHORT\\\"`, `\\\"MEDIUM\\\"`, `\\\"TALL\\\"`, `\\\"AUTO\\\"` (default). See [Chart Heights](Chart_Heights.md) for guidance on using the `\\\"MICRO\\\"` size.\\n\"}, {\"keyword\": \"xAxisStyle\", \"name\": \"X-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels and axis separators for the X-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"NONE\\\"`.\"}, {\"keyword\": \"yAxisStyle\", \"name\": \"Y-Axis Style\", \"types\": \"Text\", \"description\": \"Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: `\\\"STANDARD\\\"` (default), `\\\"MINIMAL\\\"`, `\\\"NONE\\\"`.\\n\"}, {\"keyword\": \"data\", \"name\": \"Data\", \"types\": \"Any type\", \"description\": \"Reference to the record type used for the source of this chart. Can accept [a!recordData](fnc_system_recorddata.md) or a [record type reference](reference-records.md#reference-a-record-type).\"}, {\"keyword\": \"config\", \"name\": \"Chart Configuration\", \"types\": \"BarChartConfig\", \"description\": \"Configures how to display data on the chart, including fields used for calculations and grouping, using [a!barChartConfig()](Bar_Chart_Config_Component.md).\\n\"}, {\"keyword\": \"refreshAlways\", \"name\": \"Refresh Always\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed after each user interaction and each interval refresh. Default: _false_.\\n\"}, {\"keyword\": \"refreshAfter\", \"name\": \"Refresh After\", \"types\": \"List of Text String\", \"description\": \"Refreshes chart data each time a specified event completes. Valid values: `\\\"RECORD_ACTION\\\"`.\\n\"}, {\"keyword\": \"refreshInterval\", \"name\": \"Refresh After an Interval of Time\", \"types\": \"Number (Decimal)\", \"description\": \"How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: `\\\"0.5\\\"`, `\\\"1\\\"`, `\\\"2\\\"`, `\\\"3\\\"`, `\\\"4\\\"`, `\\\"5\\\"`, `\\\"10\\\"`, `\\\"30\\\"`, and `\\\"60\\\"`. \\n\"}, {\"keyword\": \"refreshOnReferencedVarChange\", \"name\": \"Refresh on Reference Variable Change\", \"types\": \"Boolean\", \"description\": \"When true, chart data will be refreshed each time the value of any variable referenced in the _data_ parameter is updated. To refresh chart data when another variable that is not used in the _data_ parameter changes, use `refreshOnVarChange`. Default: _true_. \\n\"}, {\"keyword\": \"refreshOnVarChange\", \"name\": \"Refresh on Variable Change\", \"types\": \"Any Type\", \"description\": \"Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the _data_ parameter is updated. You can define a single variable (e.g. `refreshOnVarChange: local!var1`) or a list of variables (e.g. `refreshOnVarChange: {local!var1, local!var2}`).\\n\"}]\n \n ## Configuration\n \n There are two ways to configure a bar chart:\n \n 1. Set a record type as the data source and define fields to display on the chart.\n 1. Perform your own query and define lists of data within the categories and series.\n \n If you have a record type that uses a database as the source, or a record type with [data sync](records-data-sync.md) enabled, we recommend using the record type as the source of your chart. This configuration is easier because Appian will perform the query for you and display the results directly in the chart.\n \n If your record type uses a web service as the source and does not have data sync enabled, use the *categories* and *series* to construct the chart manually.\n \n ### Using record data\n \n Configuring a bar chart using a record type as the source requires using two parameters: *data* and *config*. Once you provide a record type in the *data* parameter and provide the fields in the *config* parameter, the chart displays the results.\n \n See [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md) for details on using a record type as the source. See [Build Reports from Records](report-with-records.md) for examples of reports created with different charts.\n \n ### Using categories and series\n \n When using *categories* and *series*, you must provide the list of data labels and values directly to these parameters. \n \n #### Categories\n \n - The order of items in the *categories* array determines the display order of categories on the chart with the left-most item in the array appearing at the top of the x-axis. The x-axis is the vertical axis since the bar data displays horizontally.\n - For each null or empty item in the array passed to *categories*, `[Category #]` displays on the x-axis with `#` as the index number in the *categories* array of the null or empty item. For example, `[Category 1]`.\n - The index of each item in the *categories* array must match with the index of its *series* data value. \n \n #### Series\n \n - A single *series* item produces a bar for each *categories* item with all bars the same color. The *data* parameter should contain a list of values that match the size of the list for categories.\n - Use [a!chartSeries()](Chart_Series_Component.md) to create the Chart Series array.\n - If the *series* argument has a non-null label value paired with a 0, null, or empty data value, the data value still displays in the legend.\n - If the *series* argument has a null or empty label value paired with a non-null data value, the label value displays as `[Series #]` with `#` as the index number of the data value. For example, `[Series 1]`.\n - If a color is defined at the series level, it will show for the given scheme and move the color scheme colors to the next series.\n \n #### Series and stacking\n \n - Multiple *series* items when *stacking* is `NONE` or null produces a set of bars for each *categories* item - one bar for each *series* item with each bar in that set a different color. The order of the label items determine the display order of the columns in each set with the first bar displays furthest from the axis. \n - Multiple *series* items when *stacking* is `NORMAL` produces a single bar for each categories item with each *series* item displayed as a different segment of the bar in a different color, so they appear stacked on top of each other. The order of the label items determine the display order of the bar segments with the first label item appearing closest to the axis.\n - Multiple *series* items when *stacking* is `PERCENT_TO_TOTAL` also shows a single bar for each category, but bars have a total height of 100%. Each value shows the percent contribution to the total within each category.\n \n ## Usage considerations\n \n ### Chart data and stacking\n \n - If data values are small and less than a whole number, Appian recommends settings *allowDecimalAxisLabels* to `true`.\n - If *data* contains `a!recordData` or a record type reference, the categories and series parameters are ignored.\n - The Percent to Total stacking will update the axes and tooltips to show with a percentage. Also, the minimum and maximum y-axes values refer to percentages. For example, `yAxisMax: 50` would set the maximum y-axis at 50%.\n \n ### Charts height and background color\n \n - When the `\"AUTO\"` height is used, the chart will show as Medium height with 20 or less categories. If more categories are provided, the chart will expand in height to ensure categories are not cut off.\n - When the chart is placed in a colored card, the chart background will match the color of the card. Text labels and lines in the chart will also adjust if a dark background color is used. See the [SAIL Design System](sail/ux-charts.md#background-colors) for best practices on using charts with background colors.\n \n ### Chart refresh behavior\n \n - You can define `a!refreshVariable` parameters directly in the chart without creating additional local variables. The only exception being `refreshOnVarChange`, which refreshes the chart after a specific local variable has changed.\n - When you use a record type as the source of your chart, it's recommended to use the refresh parameters in the chart instead of using local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function. This is because the refresh behavior will automatically apply to the fields specified in the *data* parameter of the chart.\n - If you're not using a record type as the source of your chart, use local variables and the [a!refreshVariable()](fnc_evaluation_a_refreshvariable.md) function to define refresh behavior since you won't use the *data* parameter to configure your chart. \n \n ## Examples\n \n The examples below demonstrate how to configure your charts using categories and series. For examples on using record data, see [Chart Configuration Using Record Data](Chart_Configuration_Using_Records.md).\n \n ### Single series bar chart with label, y-axis title, and no legend\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %}\n \n a!barChartField(\n   categories: {\"Baseball\", \"Hockey\", \"Soccer\"},\n   series: {\n     a!chartSeries(label: \"Points\", data: {8.3, 3.02, 2.71})\n   },\n   colorScheme: \"CLASSIC\",\n   yAxisTitle: \"Average Point per Professional Game\",\n   showLegend: false,\n   showDataLabels: true\n )\n {% endsailbox %}\n \n ### Multiple series bar chart with label, y-axis title, and no stacking\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %}\n a!barChartField(\n   categories: {\"Americas\", \"EMEA\", \"APAC\"},\n   series: {\n     a!chartSeries(label: \"Referrals\", data: {19, 8, null}),\n     a!chartSeries(label: \"Existing Clients\", data: {11, 16, 10}),\n     a!chartSeries(label: \"Tradeshow Attendees\", data: {14, 12, 7})\n   },\n   yAxisTitle: \"Active Opportunities\",\n   showLegend: true,\n   colorScheme: \"CLASSIC\"\n )\n {% endsailbox %}\n \n \n ### Multiple series bar chart with label, y-axis title, and stacking\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 840 %}\n a!barChartField(\n   categories: {\"Americas\", \"EMEA\", \"APAC\"},\n   series: {\n     a!chartSeries(label: \"Referrals\", data: {19, 8, null}),\n     a!chartSeries(label: \"Existing Clients\", data: {11, 16, 10}),\n     a!chartSeries(label: \"Tradeshow Attendees\", data: {14, 12, 7})\n   },\n   colorScheme: \"RAINFOREST\",\n   yAxisTitle: \"Active Opportunities\",\n   stacking: \"PERCENT_TO_TOTAL\",\n   showLegend: true\n )\n {% endsailbox %}"}, {"doc": "full-overlay.md", "content": "---\n layout: function\n title: Full Overlay\n category: function_page\n compatibility: -crf\n excerpt: Displays an overlay that covers the entire billboard layout.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!fullOverlay\n fncsubcat: Layouts\n parameters:\n - keyword: alignVertical\n   name: Vertical Alignment\n   types: Text\n   description: 'Determines vertical alignment of all content within the overlay. Valid\n     values: `\"TOP\"` (default), `\"MIDDLE\"`, and `\"BOTTOM\"`.\n \n     '\n - keyword: contents\n   name: Contents\n   types: Any Type\n   description: 'The interface to display in the overlay. Accepts layouts and display\n     components. Supported layouts and components: Box, Button, Card, Columns, Image,\n     Link, Milestone, Progress Bar, Rich Text, Section, Side By Side.\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the layout is displayed on the interface. When\n     set to false, the layout is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: 'Determines the overlay style. Valid values: `\"DARK\"` (default), `\"SEMI_DARK\"`,\n     `\"NONE\"`, `\"SEMI_LIGHT\"`, `\"LIGHT\"`.\n \n     '\n - keyword: padding\n   name: Padding\n   types: Text\n   description: 'Determines the space between the overlay''s edges and its contents.\n     Valid values: `\"NONE\"`, `\"EVEN_LESS\"`, `\"LESS\"`, `\"STANDARD\"`(default), `\"MORE\"`,\n     `\"EVEN_MORE\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Full Overlay\n scsubcat: Layout_Elements\n space: sail_component\n ---\n \n ## Function\n \n function name: a!fullOverlay \n  function syntax: a!fullOverlay (alignVertical,contents,showWhen,style,padding)\n \n Displays an overlay that covers the entire billboard layout.\n \n **See also**: [Billboard](Billboard_Layout.md), [Billboard layout design guidance](sail/ux-billboard-layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"alignVertical\", \"name\": \"Vertical Alignment\", \"types\": \"Text\", \"description\": \"Determines vertical alignment of all content within the overlay. Valid values: `\\\"TOP\\\"` (default), `\\\"MIDDLE\\\"`, and `\\\"BOTTOM\\\"`.\\n\"}, {\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type\", \"description\": \"The interface to display in the overlay. Accepts layouts and display components. Supported layouts and components: Box, Button, Card, Columns, Image, Link, Milestone, Progress Bar, Rich Text, Section, Side By Side.\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines the overlay style. Valid values: `\\\"DARK\\\"` (default), `\\\"SEMI_DARK\\\"`, `\\\"NONE\\\"`, `\\\"SEMI_LIGHT\\\"`, `\\\"LIGHT\\\"`.\\n\"}, {\"keyword\": \"padding\", \"name\": \"Padding\", \"types\": \"Text\", \"description\": \"Determines the space between the overlay's edges and its contents. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`(default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.* \n \n ### Full overlay with intro message\n \n ```sail\n a!billboardLayout(\n   backgroundMedia: a!documentImage(\n     document: a!EXAMPLE_BILLBOARD_IMAGE()\n   ),\n   backgroundcolor: \"#073763\",\n   marginBelow: \"STANDARD\",\n   overlay: a!fullOverlay(\n     alignvertical: \"MIDDLE\",\n     contents: {\n       a!richTextDisplayField(\n         labelPosition: \"COLLAPSED\",\n         value: {\n           a!richTextItem(text: {\"Hello, \" & user(loggedinuser(), \"firstName\") & \".\"}, size: \"MEDIUM\"),\n           char(10),\n           a!richTextItem(text: {\"What do you need help with?\"}, size: \"LARGE\")\n         },\n         align: \"CENTER\"\n       )\n     },\n     style: \"DARK\"\n   )\n )\n ```\n Displays the following:\n \n ![Full Overlay Example](images/fullOverlayExample.png)"}, {"doc": "card-choices-bars-text-stacked.md", "content": "---\n layout: function\n title: Bars (Text Stacked) Template\n category: function_page\n compatibility: -crf\n excerpt: 'Displays a bar card template with an icon and stacked primary text and secondary\n   text. For use in the [Card Choice Field](card-choices-component.md) *cardTemplate*\n   parameter.\n \n   '\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!cardTemplateBarTextStacked\n fncsubcat: Selection\n parameters:\n - keyword: id\n   name: Id\n   types: Any Type\n   description: 'Value that identifies the card.\n \n     '\n - keyword: primaryText\n   name: Primary Text\n   types: Text\n   description: 'Optional text to display on the first line inside the card.\n \n     '\n - keyword: secondaryText\n   name: Secondary Text\n   types: Text\n   description: 'Optional text to display beneath the primary text inside the card.\n \n     '\n - keyword: icon\n   name: Icon\n   types: Text\n   description: 'Icon to display inside the card.\n \n     '\n - keyword: iconColor\n   name: Icon Color\n   types: Text\n   description: 'Determines the icon color. Valid values: Any hex color or `\"ACCENT\"`\n     (default), `\"STANDARD\"`, `\"SECONDARY\"`, `\"POSITIVE\"`, `\"NEGATIVE\"`.\n \n     '\n - keyword: iconAltText\n   name: Icon Alternative Text\n   types: Text\n   description: 'Equivalent alternate text for use by screen readers.\n \n     '\n - keyword: tooltip\n   name: Tooltip\n   types: Text\n   description: 'Text to display on mouseover (web) or tap (mobile).\n \n     '\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the card is displayed in the set of card choices.\n     When set to false, the card is hidden. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Bars (Text Stacked) Template\n scsubcat: Card_Choices_Templates\n space: sail_component\n ---\n \n ## Function\n \n function name: a!cardTemplateBarTextStacked \n  function syntax: a!cardTemplateBarTextStacked (id,primaryText,secondaryText,icon,iconColor,iconAltText,tooltip,showWhen)\n \n Displays a bar card template with an icon and stacked primary text and secondary text. For use in the [Card Choice Field](card-choices-component.md) *cardTemplate* parameter.\n \n \n ## Parameters\n \n [{\"keyword\": \"id\", \"name\": \"Id\", \"types\": \"Any Type\", \"description\": \"Value that identifies the card.\\n\"}, {\"keyword\": \"primaryText\", \"name\": \"Primary Text\", \"types\": \"Text\", \"description\": \"Optional text to display on the first line inside the card.\\n\"}, {\"keyword\": \"secondaryText\", \"name\": \"Secondary Text\", \"types\": \"Text\", \"description\": \"Optional text to display beneath the primary text inside the card.\\n\"}, {\"keyword\": \"icon\", \"name\": \"Icon\", \"types\": \"Text\", \"description\": \"Icon to display inside the card.\\n\"}, {\"keyword\": \"iconColor\", \"name\": \"Icon Color\", \"types\": \"Text\", \"description\": \"Determines the icon color. Valid values: Any hex color or `\\\"ACCENT\\\"` (default), `\\\"STANDARD\\\"`, `\\\"SECONDARY\\\"`, `\\\"POSITIVE\\\"`, `\\\"NEGATIVE\\\"`.\\n\"}, {\"keyword\": \"iconAltText\", \"name\": \"Icon Alternative Text\", \"types\": \"Text\", \"description\": \"Equivalent alternate text for use by screen readers.\\n\"}, {\"keyword\": \"tooltip\", \"name\": \"Tooltip\", \"types\": \"Text\", \"description\": \"Text to display on mouseover (web) or tap (mobile).\\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the card is displayed in the set of card choices. When set to false, the card is hidden. Default: true.\\n\"}]\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 580 %} \n a!localVariables(\n   local!save, \n   {\n     a!cardChoiceField(\n       label: \"Select all symptoms that apply\",\n       labelPosition: \"ABOVE\",\n       instructions: \"If this is an emergency, cancel this request and call 911\",\n       data: {\n         a!map(id: 1, icon: \"allergies\", primaryText: \"Rash\", secondaryText: \"Allergic reaction or skin irritation\", iconAltText: \"allergic reaction\"),\n         a!map(id: 2, icon: \"head-side-cough\", primaryText: \"Cough\", secondaryText: \"Respiratory congestion\", iconAltText: \"person coughing\" ),\n         a!map(id: 3, icon: \"temperature-high\", primaryText: \"Fever\", secondaryText: \"Above normal temperature\", iconAltText: \"thermometer with high temperature\"),\n         a!map(id: 4, icon: \"snowflake\", primaryText: \"Chills\", secondaryText: \"Chills and body aches\", iconAltText: \"snowflake\"),\n         a!map(id: 5, icon: \"bed\", primaryText: \"Fatigue\", secondaryText: \"Exhaustion and extreme fatigue\", iconAltText: \"person in bed\"),\n         a!map(id: 6, icon: \"eye\", primaryText: \"Blurry Vision\", secondaryText: \"Blurry or worsening vision\", iconAltText: \"eye\"),\n         a!map(id: 7, icon: \"band-aid\", primaryText: \"Wound\", secondaryText: \"Abrasion, laceration, or puncture wound\", iconAltText: \"band-aid\"),\n         a!map(id: 8, icon: \"brain\", primaryText: \"Headache\", secondaryText: \"Headache or dizziness\", iconAltText: \"brain\")\n       },\n       sort: {\n         a!sortInfo(\n           field: \"primaryText\",\n           ascending: true\n         )\n       },\n       cardTemplate: a!cardTemplateBarTextStacked(\n         id: fv!data.id,\n         primaryText: fv!data.primaryText,\n         secondaryText: fv!data.secondaryText,\n         icon: fv!data.icon,\n         iconColor: \"#000000\",\n         iconAltText: fv!data.iconAltText\n       ),\n       value: local!save,\n       saveInto: local!save,\n       maxSelections: 8\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "Date_Component.md", "content": "---\n layout: function\n title: Date Component\n category: function_page\n compatibility: -crf\n excerpt: Displays and allows entry of a single date (year, month, day). To display\n   a read-only date using a custom format, use a text component.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!dateField\n fncsubcat: Inputs\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: readOnly\n   name: Read-only\n   types: Boolean\n   description: 'Determines if the field should display as not editable. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: value\n   name: Display Value\n   types: Date\n   description: Date to display in the field.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: One or more variables that are updated with the date when the user\n     changes it. Use a!save() to save a modified or alternative value to a variable.\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of the date value. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n reftype: sailcomponent\n scdisplayname: Date\n space: sail_component\n ---\n \n ## Function\n \n function name: a!dateField \n  function syntax: a!dateField (label,instructions,required,readOnly,disabled,value,validations,saveInto,validationGroup,requiredMessage,align,labelPosition,helpTooltip,accessibilityText,showWhen)\n \n Displays and allows entry of a single [date](Appian_Data_Types.md#date) (year, month, day). When the field is editable, users can input dates by typing or by picking from a calendar.\n \n When working with [date and time](Appian_Data_Types.md#date-and-time) (year, month, day, hour, minute, second), use a [date & time](Date_and_Time_Component.md) component. To display a [time](Appian_Data_Types.md#time) (hour, minute, second), use a [time](Time_Component.md) component. To display a read-only date using a custom format, use a [text](Text_Component.md) component.\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"readOnly\", \"name\": \"Read-only\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as not editable. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"Date\", \"description\": \"Date to display in the field.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the date when the user changes it. Use a!save() to save a modified or alternative value to a variable.\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of the date value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values: \\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}]\n \n ## Usage considerations\n \n ### Calendar and date formatting\n \n - The date is shown in the current user's time zone and calendar format.\n - If you want to display a date with formatting other than the default, use the Text Field component.\n \n ### Keyboard shortcuts\n \n - When focused on the calendar, selecting the **P** key will go to the previous month, the **N** key will go to next month, the **T** key will select today's date, and the **Delete** key will clear the value in the field.\n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Date with only a label\n \n {% sailbox 490 %} \n a!dateField(\n   label: \"Created On\",\n   value: date(2013, 1, 12)\n )\n {% endsailbox %}\n \n ### Date with a validation\n \n {% sailbox 520 %} \n a!localVariables(\n   local!storedValue:today()-1,\n   a!dateField(\n     label:\"RSVP By\",\n     value: local!storedValue,\n     saveInto: local!storedValue,\n     validations: if(\n       local!storedvalue <= today(),\n       \"Please set the RSVP by to a future date\",\n       \"\"\n     )\n   )\n )\n {% endsailbox %}"}, {"doc": "Checkbox_Component.md", "content": "---\n layout: function\n title: Checkbox Component\n category: function_page\n compatibility: -crf\n excerpt: Displays a limited set of choices from which the user may select none, one,\n   or many items and saves the values of the selected choices.\n fnccat: Interface_Component\n fncexample: Click on the function name for examples.\n fncname: a!checkboxField\n fncsubcat: Selection\n parameters:\n - keyword: label\n   name: Label\n   types: Text\n   description: Text to display as the field label.\n - keyword: instructions\n   name: Instructions\n   types: Text\n   description: Supplemental text about this field.\n - keyword: required\n   name: Required\n   types: Boolean\n   description: 'Determines if a value is required to submit the form. Default: false.\n \n     '\n - keyword: disabled\n   name: Disabled\n   types: Boolean\n   description: 'Determines if the field should display as potentially editable but\n     grayed out. Default: false.\n \n     '\n - keyword: choiceLabels\n   name: Choice Labels\n   types: List of Text String\n   description: Array of options for the user to select.\n - keyword: choiceValues\n   name: Choice Values\n   types: List of Variant\n   description: Array of values associated with the available choices.\n - keyword: value\n   name: Display Value\n   types: List of Variant\n   description: Values of choices to display as selected.\n - keyword: validations\n   name: Validations\n   types: List of Text String\n   description: Validation errors to display below the field when the value is not\n     null.\n - keyword: saveInto\n   name: Save Input To\n   types: List of Save\n   description: 'One or more variables that are updated with the choice values when\n     the user changes the selections. Use a!save() to save a modified or alternative\n     value to a variable.\n \n     '\n - keyword: validationGroup\n   name: Validation Group\n   types: Text\n   description: 'When present, this field is only validated when a button in the same\n     validation group is pressed. See the documentation for more information about\n     how to use validation groups.\n \n     '\n - keyword: requiredMessage\n   name: Required Message\n   types: Text\n   description: 'Custom message to display when the field''s value is required and\n     not provided.\n \n     '\n - keyword: align\n   name: Alignment\n   types: Text\n   description: 'Determines alignment of choice labels. Appian recommends this setting\n     only be used inside the Grid Layout component. Valid values: `\"LEFT\"`, `\"CENTER\"`,\n     `\"RIGHT\"`.\n \n     '\n - keyword: labelPosition\n   name: Label Position\n   types: Text\n   description: \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"`\n     (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays\n     the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label.\n     The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md)\n     for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component\n     starting at the edge of the page.\\n\"\n - keyword: helpTooltip\n   name: Help Tooltip\n   types: Text\n   description: 'Displays a help icon with the specified text as a tooltip. The tooltip\n     displays a maximum of 500 characters. The help icon does not show when the label\n     position is `\"COLLAPSED\"`.\n \n     '\n - keyword: choiceLayout\n   name: Choice Layout\n   types: Text\n   description: 'Determines the layout. Valid values: `\"STACKED\"` (default), `\"COMPACT\"`.\n \n     '\n - keyword: accessibilityText\n   name: Accessibility Text\n   types: Text\n   description: Additional text to be announced by screen readers. Used only for accessibility;\n     produces no visible change.\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the component is displayed on the interface. When\n     set to false, the component is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: choiceStyle\n   name: Choice Style\n   types: Text\n   description: 'Determines how the choices should be displayed on the interface. Valid\n     values: `\"STANDARD\"` (default), `\"CARDS\"`.\n \n     '\n reftype: sailcomponent\n scdisplayname: Checkbox\n space: sail_component\n ---\n \n ## Function\n \n function name: a!checkboxField \n  function syntax: a!checkboxField (label,instructions,required,disabled,choiceLabels,choiceValues,value,validations,saveInto,validationGroup,requiredMessage,align,labelPosition,helpTooltip,choiceLayout,accessibilityText,showWhen,choiceStyle)\n \n Displays a limited set of choices from which the user may select none, one, or many items and saves the values of the selected choices. To save the index of the choice instead of a value, use [checkboxes by index](Checkbox_By_Index_Component.md).\n \n If the choice is exclusive, then consider using [radio buttons](Radio_Button_Component.md) or a [dropdown](Dropdown_Component.md).\n \n If there are many choices, the component grows as large as necessary to display all the options. If a more compact presentation is desirable, consider using a [multiple dropdown](Multiple_Dropdown_Component.md).\n \n ## Parameters\n \n [{\"keyword\": \"label\", \"name\": \"Label\", \"types\": \"Text\", \"description\": \"Text to display as the field label.\"}, {\"keyword\": \"instructions\", \"name\": \"Instructions\", \"types\": \"Text\", \"description\": \"Supplemental text about this field.\"}, {\"keyword\": \"required\", \"name\": \"Required\", \"types\": \"Boolean\", \"description\": \"Determines if a value is required to submit the form. Default: false.\\n\"}, {\"keyword\": \"disabled\", \"name\": \"Disabled\", \"types\": \"Boolean\", \"description\": \"Determines if the field should display as potentially editable but grayed out. Default: false.\\n\"}, {\"keyword\": \"choiceLabels\", \"name\": \"Choice Labels\", \"types\": \"List of Text String\", \"description\": \"Array of options for the user to select.\"}, {\"keyword\": \"choiceValues\", \"name\": \"Choice Values\", \"types\": \"List of Variant\", \"description\": \"Array of values associated with the available choices.\"}, {\"keyword\": \"value\", \"name\": \"Display Value\", \"types\": \"List of Variant\", \"description\": \"Values of choices to display as selected.\"}, {\"keyword\": \"validations\", \"name\": \"Validations\", \"types\": \"List of Text String\", \"description\": \"Validation errors to display below the field when the value is not null.\"}, {\"keyword\": \"saveInto\", \"name\": \"Save Input To\", \"types\": \"List of Save\", \"description\": \"One or more variables that are updated with the choice values when the user changes the selections. Use a!save() to save a modified or alternative value to a variable.\\n\"}, {\"keyword\": \"validationGroup\", \"name\": \"Validation Group\", \"types\": \"Text\", \"description\": \"When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.\\n\"}, {\"keyword\": \"requiredMessage\", \"name\": \"Required Message\", \"types\": \"Text\", \"description\": \"Custom message to display when the field's value is required and not provided.\\n\"}, {\"keyword\": \"align\", \"name\": \"Alignment\", \"types\": \"Text\", \"description\": \"Determines alignment of choice labels. Appian recommends this setting only be used inside the Grid Layout component. Valid values: `\\\"LEFT\\\"`, `\\\"CENTER\\\"`, `\\\"RIGHT\\\"`.\\n\"}, {\"keyword\": \"labelPosition\", \"name\": \"Label Position\", \"types\": \"Text\", \"description\": \"Determines where the label appears. Valid values:\\n  - `\\\"ABOVE\\\"` (default) Displays the label above the component.\\n  - `\\\"ADJACENT\\\"` Displays the label to the left of the component.\\n  - `\\\"COLLAPSED\\\"` Hides the label. The label will still be read by screen readers; see [accessibility considerations](building_accessible_applications.md) for more information.\\n  - `\\\"JUSTIFIED\\\"` Aligns the label alongside the component starting at the edge of the page.\\n\"}, {\"keyword\": \"helpTooltip\", \"name\": \"Help Tooltip\", \"types\": \"Text\", \"description\": \"Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is `\\\"COLLAPSED\\\"`.\\n\"}, {\"keyword\": \"choiceLayout\", \"name\": \"Choice Layout\", \"types\": \"Text\", \"description\": \"Determines the layout. Valid values: `\\\"STACKED\\\"` (default), `\\\"COMPACT\\\"`.\\n\"}, {\"keyword\": \"accessibilityText\", \"name\": \"Accessibility Text\", \"types\": \"Text\", \"description\": \"Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"choiceStyle\", \"name\": \"Choice Style\", \"types\": \"Text\", \"description\": \"Determines how the choices should be displayed on the interface. Valid values: `\\\"STANDARD\\\"` (default), `\\\"CARDS\\\"`.\\n\"}]\n \n ## Usage considerations \n \n ### Saving values \n \n - If a single item is selected, the system saves a single-item array.\n - If no selection is made, the system saves a null value into the component's *saveInto* field.\n \n ### Using the choiceLayout parameter\n \n - The `\"COMPACT\"` option for *choiceLayout* should only be used for checkboxes with short choice labels, such as \"Yes\", \"No\", or \"Maybe\". When using the `\"COMPACT\"` option, labels with text longer than two lines will be truncated. \n - For long labels, use the `\"STACKED\"` option for *choiceLayout*.\n \n ### Using the choiceLabels and choiceValue parameters\n \n - Choices display in the order defined in the *choiceLabels* parameter. \n - The *choiceLabels* argument cannot be null.\n - *choiceLabels* and *choiceValues* must be the same length.\n - *choiceValues* cannot contain nulls or duplicate values.\n \n \n ## Examples\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n ### Checkbox with first and third values checked\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: {\"en_US\", \"fr_FR\"},\n   a!checkboxField(\n     label: \"Language\",\n     instructions: \"In which languages are you proficient?\",\n     choiceLabels: { \"English\", \"Spanish\", \"French\", \"German\" },\n     choiceValues: { \"en_US\", \"es_ES\", \"fr_FR\", \"de_DE\" },\n     value: local!language,\n     saveInto: local!language\n   )\n )\n {% endsailbox %}\n \n ### Checkbox with no default values checked\n \n [INCLUDE PAGE: SAIL intro](_includeLibrary/sail-intro.md)\n \n {% sailbox 600 %}\n a!localVariables(\n   local!language: null,\n   a!checkboxField(\n     label: \"Language\",\n     instructions: \"In which languages are you proficient?\",\n     choiceLabels: {\n       \"English\",\n       \"Spanish\",\n       \"French\",\n       \"German\"\n     },\n     choiceValues: {\n       \"en_US\",\n       \"es_ES\",\n       \"fr_FR\",\n       \"de_DE\"\n     },\n     value: local!language,\n     saveInto: local!language\n   )\n )\n {% endsailbox %}\n \n ### Checkbox with cards style\n \n {% sailbox 600 %}\n a!localVariables(\n   local!selected,\n   {\n     a!checkboxField(\n       label: \"Reason(s) for appointment\",\n       labelPosition: \"ABOVE\",\n       choiceLabels: {\"Cough\", \"Sore throat\",\n         \"Congestion\",\n         \"Body aches\",\n         \"Nausea\",\n         \"Fever\"},\n       choiceValues: {\n         \"Cough\",\n         \"Sore throat\",\n         \"Congestion\",\n         \"Body ache\",\n         \"Nausea\",\n         \"Fever\"\n       },\n       value: local!selected,\n       saveInto: {local!selected},\n       choiceStyle: \"CARDS\",\n       validations: {}\n     )\n   }\n )\n {% endsailbox %}"}, {"doc": "column-overlay.md", "content": "---\n layout: basic\n title: Column Overlay\n space: sail_component\n reftype: sailcomponent\n excerpt: Displays a vertical column overlay for use in billboard layout.\n category: function_page\n compatibility: -crf\n fncname: a!columnOverlay\n fncsubcat: Layouts\n fncexample: Click on the function name for examples.\n fnccat: Interface_Component\n scsubcat: Layout_Elements\n scdisplayname: Column Overlay\n parameters:\n - keyword: alignVertical\n   name: Vertical Alignment\n   types: Text\n   description: \"Determines vertical alignment of all content within the overlay. Valid\n     values: `\\\"TOP\\\"` (default), `\\\"MIDDLE\\\"`, and `\\\"BOTTOM\\\"`. \\n\"\n - keyword: position\n   name: Position\n   types: Text\n   description: 'Determines where the column overlay appears. Valid values: `\"START\"`\n     (default), `\"CENTER\"`, `\"END\"`.\n \n     '\n - keyword: width\n   name: Width\n   types: Text\n   description: \"Determines the column overlay width. Valid values: `\\\"NARROW\\\"`, `\\\"MEDIUM\\\"`\n     (default), `\\\"WIDE\\\"`. \\n\"\n - keyword: contents\n   name: Contents\n   types: Any Type\n   description: \"The interface to display in the overlay. Accepts layouts and display\n     components. Supported layouts and components: Box, Button, Card, Columns, Image,\n     Link, Milestone, Progress Bar, Rich Text, Section, Side By Side. \\n\"\n - keyword: showWhen\n   name: Visibility\n   types: Boolean\n   description: 'Determines whether the overlay is displayed on the interface. When\n     set to false, the overlay is hidden and is not evaluated. Default: true.\n \n     '\n - keyword: style\n   name: Style\n   types: Text\n   description: \"Determines the overlay style. Valid values: `\\\"DARK\\\"` (default),\n     `\\\"SEMI_DARK\\\"`, `\\\"NONE\\\"`, `\\\"SEMI_LIGHT\\\"`, `\\\"LIGHT\\\"`. \\n\"\n - keyword: padding\n   name: Padding\n   types: Text\n   description: 'Determines the space between the overlay''s edges and its contents.\n     Valid values: `\"NONE\"`, `\"EVEN_LESS\"`, `\"LESS\"`, `\"STANDARD\"`(default), `\"MORE\"`,\n     `\"EVEN_MORE\"`.\n \n     '\n ---\n \n ## Function\n \n function name: a!columnOverlay \n  function syntax: a!columnOverlay (alignVertical,position,width,contents,showWhen,style,padding)\n \n Displays a vertical column overlay for use in billboard layout.\n \n **See also**: [Billboard](Billboard_Layout.md)\n \n ## Parameters\n \n [{\"keyword\": \"alignVertical\", \"name\": \"Vertical Alignment\", \"types\": \"Text\", \"description\": \"Determines vertical alignment of all content within the overlay. Valid values: `\\\"TOP\\\"` (default), `\\\"MIDDLE\\\"`, and `\\\"BOTTOM\\\"`. \\n\"}, {\"keyword\": \"position\", \"name\": \"Position\", \"types\": \"Text\", \"description\": \"Determines where the column overlay appears. Valid values: `\\\"START\\\"` (default), `\\\"CENTER\\\"`, `\\\"END\\\"`.\\n\"}, {\"keyword\": \"width\", \"name\": \"Width\", \"types\": \"Text\", \"description\": \"Determines the column overlay width. Valid values: `\\\"NARROW\\\"`, `\\\"MEDIUM\\\"` (default), `\\\"WIDE\\\"`. \\n\"}, {\"keyword\": \"contents\", \"name\": \"Contents\", \"types\": \"Any Type\", \"description\": \"The interface to display in the overlay. Accepts layouts and display components. Supported layouts and components: Box, Button, Card, Columns, Image, Link, Milestone, Progress Bar, Rich Text, Section, Side By Side. \\n\"}, {\"keyword\": \"showWhen\", \"name\": \"Visibility\", \"types\": \"Boolean\", \"description\": \"Determines whether the overlay is displayed on the interface. When set to false, the overlay is hidden and is not evaluated. Default: true.\\n\"}, {\"keyword\": \"style\", \"name\": \"Style\", \"types\": \"Text\", \"description\": \"Determines the overlay style. Valid values: `\\\"DARK\\\"` (default), `\\\"SEMI_DARK\\\"`, `\\\"NONE\\\"`, `\\\"SEMI_LIGHT\\\"`, `\\\"LIGHT\\\"`. \\n\"}, {\"keyword\": \"padding\", \"name\": \"Padding\", \"types\": \"Text\", \"description\": \"Determines the space between the overlay's edges and its contents. Valid values: `\\\"NONE\\\"`, `\\\"EVEN_LESS\\\"`, `\\\"LESS\\\"`, `\\\"STANDARD\\\"`(default), `\\\"MORE\\\"`, `\\\"EVEN_MORE\\\"`.\\n\"}]\n \n ## Examples\n \n *Copy and paste an example into the **INTERFACE DEFINITION** in **EXPRESSION MODE** to see it displayed.*\n \n ### Column overlay with intro message\n \n ```sail\n a!billboardLayout(\n   backgroundcolor: \"#073763\",\n   marginBelow: \"STANDARD\",\n   overlay: a!columnOverlay(\n     alignvertical: \"MIDDLE\",\n     contents: {\n       a!richTextDisplayField(\n         labelPosition: \"COLLAPSED\",\n         value: {\n           a!richTextItem(text: {\"Hello, \" & user(loggedinuser(), \"firstName\") & \".\"}, size: \"MEDIUM\"),\n           char(10),\n           a!richTextItem(text: {\"What do you need help with?\"}, size: \"LARGE\")\n         },\n         align: \"CENTER\"\n       )\n     },\n     style: \"DARK\",\n     padding: \"MORE\"\n   )\n )\n ```\n \n Displays the following:\n \n ![Column Overlay Example](images/columnOverlayExample.png)"}, {"doc": "Grid_Selection_Component.md", "content": "---\n layout: function\n title: Paging Grid Selection Component [Deprecated]\n reftype: sailcomponent\n category: function_page\n compatibility: -crf\n fncname: a!gridSelection\n scsubcat: Paging_Grid_Elements\n scdisplayname: Paging Grid Selection\n evolved_fncname: a!gridField\n evolved_reason: The paging grid natively supports selection.\n depver: 19.2\n fnccat: \u4e00Deprecated\u4e00\n parameters:\n - keyword: pagingInfo\n   name: pagingInfo\n   types: Any Type\n   description: Paging and sorting configuration created with a!pagingInfo().\n - keyword: Selected\n   name: selected\n   types: Any Type\n   description: 'Array of selected identifiers. Supported types: Text Array and Integer\n     Array.'\n ---\n \n The grid selection component has been deprecated, and will be removed in a future release of Appian. Instead, use a grid field. For information about the grid selection field, see the [Appian 19.4 documentation](https://docs.appian.com/suite/help/19.4/Grid_Selection_Component.html)."}, {"doc": "enabling_user_interaction.md", "content": "---\n layout: \"basic\"\n title: \"Interface Variables and Inputs\"\n topic: \"Interfaces\"\n type: \"Concept\"\n weight: 101\n ---\n \n This page is an overview of how to configure components when a user needs to interact with them.\n \n ## Overview\n \n Some interface components allow users to interact with them. Interactions are filling out form inputs, like typing in a text field or making a choice in a dropdown. Clicking links or buttons are also interactions.\n \n When a user interacts with an interface, the interface expression is reevaluated and the resulting interface displayed. This means the interface can dynamically respond to user interactions, such as changing the options in a dropdown based on an earlier dropdown, showing a section after a link is clicked, sorting columns in a  grid, and so on.\n \n Every interface component that supports user interaction has a parameter called `saveInto` that defines what changes to make when the user interacts with the component. The only way for a user to cause changes is through a component's `saveInto` parameter.\n \n There are three ways to respond to user interactions with the `saveInto` parameter:\n \n - Save the user's input to a variable, for example, `local!name `or `ri!amountPaid`\n - Save a modified or alternative value into a variable, for example, `a!save(ri!username, lower(save!value))`\n - Execute a smart service, for example, `a!deleteDocument(document: ri!requestForm)`\n \n ## Saving input into variables\n \n When a user interacts with a component and that component's `saveInto` parameter is configured with a [variable](parts-of-an-expression.md#variables), the component's updated value will be saved to that variable.\n \n ### Simple example\n \n The most common way to configure a component is to set its `value` and `saveInto` to the same variable. To see how this works, copy and paste the following expression into the **INTERFACE DEFINITION** in **EXPRESSION MODE**:\n \n ```sail\n a!localVariables(\n   local!name,\n   a!textField(\n     label: \"Name\",\n     instructions: \"Your name has \" & len(local!name) & \" characters\",\n     value: local!name,\n     saveInto: local!name\n   )\n )\n ```\n \n When the user types a name into the text field, the text they type will be saved to `local!name`. This in turn will be displayed in the text field because the same variable is passed to the `value` parameter.\n \n Notice the `local!name` variable is used in the expression for the `instructions` parameter, as well as the `value` and `saveInto` parameters.\n \n In the live view, type into the text field then press the tab key. Notice how the character count in the field instructions updates when you are no longer focused on the text input. This is because the expression was evaluated again and this time `local!name` had the new value.\n \n The value of the variable configured in the `saveInto` parameter does not automatically show up as the display value of the component. The `value` input must be set separately for the change to be displayed by the component. To see what happens when this is not done, try updating that expression so that the `value` parameter is `null`:\n \n ```sail\n a!localVariables(\n   local!name,\n   a!textField(\n     label: \"Name\",\n     instructions: \"Your name has \" & len(local!name) & \" characters\",\n !    value: null,\n     saveInto: local!name\n   )\n )\n ```\n \n Now, when you click away from the text input, the text input becomes blank. This is because the value of the component is hard-coded to null. Notice, though, the character count was updated. That's because the variable has the correct data.\n \n ### Local variables\n \n When a variable is defined in an expression instead of made available to the expression by the framework, it is called a [local variable](Local_Variables.md). Rule inputs, process variables, and record fields are examples of non-local variables that are provided to the expression because of where it is being evaluated.\n \n Most local variables can be updated through a `saveInto`. However, some local variable configurations can make that variable an invalid save target. For a full list of which types of local variables can be updated through a `saveInto`, see [Configuring Refresh Behavior of Local Variables](Local_Variables.md#configuring-refresh-behavior).\n \n ### Arrays and custom data types\n \n In addition to saving to a variable, you can save into an array at a specific index using square brackets. For example:\n \n     saveInto: local!names[10]\n \n or\n \n     saveInto: local!names[local!index]\n \n This is especially useful when generating components based on a list of data, such as in the [Add Multiple Text Components Dynamically recipe](recipe-add-multiple-text-components-dynamically.md).\n \n You can also save into a field of a custom data type using the dot operator. For example:\n \n     saveInto: local!person.firstName\n \n This is useful when you want to populate a custom data type via user input, since you can display an appropriate component for each field.\n \n The dot and bracket notation can also be combined:\n \n     saveInto: local!persons.firstNames[local!index]\n \n For a more extensive example, see the [Add and Populate Sections Dynamically recipe](recipe-add-and-populate-sections-dynamically.md).\n \n > appian-style-note \n > You must use square brackets or the dot operator to index in a `saveInto` variable. You cannot use the `index()` function to save to a specific index.\n \n ### Rule inputs\n \n When saving sections of your expression into rules, you can pass a local variable, a process variable, or a node input to the rule and save into the rule input. In such a scenario, the variable must always be passed to the rule input as is. The `saveInto` parameter will not work if the variable has been modified with a function or operator, nor will it work if something besides a valid variable is passed, like `\"hello\"`, `3`, or a local variable with a refresh configuration that prevents saving into the variable.\n \n For example, let\u2019s say you have a local variable called `local!name` and a rule that returns a Text component. In the rule definition, you want to save into `local!name`. You would create a rule input of type Text, and map it to the local variable by passing the local variable to the rule.\n \n ```sail\n a!localVariables(\n   local!name,\n   returnTextField(local!name)\n )\n ```\n \n Where the definition of `returnTextField` is the following:\n \n ```sail\n a!textField(\n   label: \"Name\",\n   instructions: \"Your name has \" & len(ri!name) & \" characters\",\n   value: ri!name,\n   saveInto: ri!name\n )\n ```\n \n ## Saving modified or alternative values\n \n Instead of saving the user's exact input, you can also modify the component's updated value before saving it into a variable. To do so, use the [a!save() function](fnc_evaluation_save.md). The first parameter of this function is the variable to be updated. The second parameter is the value to set. This parameter can be configured with an expression that can either modify the component's value or return an alternative value completely unrelated to that of the component. The component's new value can be accessed in the second parameter using the special variable `save!value`.\n \n For example, if you want to remove leading and trailing spaces from the user's input before saving it, you can use the `a!save()` function along with the `trim()` function. Update your interface with the following expression:\n \n ```sail\n a!localVariables(\n   local!name,\n   a!textField(\n     label: \"Name\",\n     instructions: \"Your name has \" & len(local!name) & \" characters\",\n     value: local!name,\n !    saveInto: a!save(local!name, trim(save!value))\n   )\n )\n ```\n \n Enter leading and trailing spaces into the text field and click away. Notice how the character count in the instructions does not count the spaces you entered.\n \n You can modify the user\u2019s input with as many functions or operators as you like. For example, update your interface with the following expression:\n \n ```sail\n a!localVariables(\n   local!name,\n   a!textField(\n     label: \"Name\",\n     instructions: local!name,\n     value: local!name,\n     saveInto: a!save(local!name, `fn!append(\"Hello \", trim(save!value)))`\n   )\n )\n ```\n \n To save into multiple variables, you can pass an array containing both variables to update and `a!save()` functions. This expression saves the user's input into one variable while updating a second variable the input prefixed with `\"Hello \"`:\n \n ```sail\n a!localVariables(\n   local!name,\n !  local!greeting,\n   a!textField(\n     label: \"Name\",\n !    instructions: local!greeting,\n     value: local!name,\n     saveInto: {\n       local!name,\n !      a!save(local!greeting, append(\"Hello \", save!value))\n     }\n   )\n )\n ```\n \n You can also use multiple `a!save()` functions. This expression trims the user's input before saving it into the first variable, then updates the second by prefixing the first variable:\n \n ```sail\n a!localVariables(\n   local!name,\n !  local!greeting,\n   a!textField(\n     label: \"Name\",\n !    instructions: local!greeting,\n     value: local!name,\n !    saveInto: {\n !      a!save(local!name, trim(save!value)),\n !      a!save(local!greeting, append(\"Hello \", local!name))\n !    }\n   )\n )\n ```\n \n Try typing leading and trailing spaces into the field and notice how `local!greeting` is getting updated with the trimmed name, not the original user input.\n \n The expression in the `saveInto` parameter evaluates when the user interacts with the component. Each item in the `saveInto` array evaluates one at a time. Therefore, if an a!save() parameter uses a variable that was updated higher in the list, a!save() evaluates with the variable's updated value."}]